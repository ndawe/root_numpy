/* Generated by Cython 0.24 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE___librootnumpy
#define __PYX_HAVE_API___librootnumpy
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "pythread.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <map>
#include <string>
#include "TClass.h"
#include "TObject.h"
#include "TDirectory.h"
#include "TDirectoryFile.h"
#include "TFile.h"
#include "TKey.h"
#include "TObjArray.h"
#include "TList.h"
#include "TBranch.h"
#include "TBranchElement.h"
#include "TLeaf.h"
#include "TTree.h"
#include "TChain.h"
#include "TFormula.h"
#include "TTreeFormula.h"
#include "TClassEdit.h"
#include "TF1.h"
#include "TF2.h"
#include "TF3.h"
#include "TH1.h"
#include "TH2.h"
#include "TH3.h"
#include "THnBase.h"
#include "TProfile.h"
#include "TProfile2D.h"
#include "TProfile3D.h"
#include "TGraph.h"
#include "TGraph2D.h"
#include "TSpline.h"
#include "TArrayD.h"
#include "TArrayF.h"
#include "TArrayL.h"
#include "TArrayI.h"
#include "TArrayS.h"
#include "TArrayC.h"
#include "TMatrixTBase.h"
#include "2to3.h"
#include "util.h"
#include <memory>
#include "Column.h"
#include "TreeChain.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "ascii"
#define __Pyx_PyObject_FromString __Pyx_PyStr_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyStr_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* None.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "root_numpy/src/setup.pxi",
  "root_numpy/src/converters.pyx",
  "root_numpy/src/tree.pyx",
  "root_numpy/src/array.pyx",
  "root_numpy/src/matrix.pyx",
  "root_numpy/src/sample.pyx",
  "root_numpy/src/hist.pyx",
  "root_numpy/src/graph.pyx",
  "root_numpy/src/evaluate.pyx",
  "root_numpy/src/innerjoin.pyx",
  "array.pxd",
  "__init__.pxd",
  "stringsource",
  "root_numpy/src/_librootnumpy.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */

#line 725 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */

#line 726 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */

#line 727 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */

#line 728 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */

#line 732 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */

#line 733 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */

#line 734 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */

#line 735 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */

#line 739 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */

#line 740 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */

#line 749 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */

#line 750 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */

#line 751 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */

#line 753 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */

#line 754 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */

#line 755 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */

#line 757 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */

#line 758 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */

#line 760 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */

#line 761 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */

#line 762 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "root_numpy/src/setup.pxi":37
 * from ._warnings import RootNumpyUnconvertibleWarning
 * 
 * ctypedef unsigned char unsigned_char             # <<<<<<<<<<<<<<
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int
 */

#line 37 "root_numpy/src/setup.pxi"
typedef unsigned char __pyx_t_13_librootnumpy_unsigned_char;

/* "root_numpy/src/setup.pxi":38
 * 
 * ctypedef unsigned char unsigned_char
 * ctypedef unsigned short unsigned_short             # <<<<<<<<<<<<<<
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long
 */

#line 38 "root_numpy/src/setup.pxi"
typedef unsigned short __pyx_t_13_librootnumpy_unsigned_short;

/* "root_numpy/src/setup.pxi":39
 * ctypedef unsigned char unsigned_char
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int             # <<<<<<<<<<<<<<
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long
 */

#line 39 "root_numpy/src/setup.pxi"
typedef unsigned int __pyx_t_13_librootnumpy_unsigned_int;

/* "root_numpy/src/setup.pxi":40
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long             # <<<<<<<<<<<<<<
 * ctypedef long long long_long
 * ctypedef unsigned long long unsigned_long_long
 */

#line 40 "root_numpy/src/setup.pxi"
typedef unsigned long __pyx_t_13_librootnumpy_unsigned_long;

/* "root_numpy/src/setup.pxi":41
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long unsigned_long_long
 * ctypedef np.npy_intp SIZE_t
 */

#line 41 "root_numpy/src/setup.pxi"
typedef PY_LONG_LONG __pyx_t_13_librootnumpy_long_long;

/* "root_numpy/src/setup.pxi":42
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long
 * ctypedef unsigned long long unsigned_long_long             # <<<<<<<<<<<<<<
 * ctypedef np.npy_intp SIZE_t
 * 
 */

#line 42 "root_numpy/src/setup.pxi"
typedef unsigned PY_LONG_LONG __pyx_t_13_librootnumpy_unsigned_long_long;

/* "root_numpy/src/setup.pxi":43
 * ctypedef long long long_long
 * ctypedef unsigned long long unsigned_long_long
 * ctypedef np.npy_intp SIZE_t             # <<<<<<<<<<<<<<
 * 
 * include "ROOT.pxi"
 */

#line 43 "root_numpy/src/setup.pxi"
typedef npy_intp __pyx_t_13_librootnumpy_SIZE_t;
/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */

#line 764 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */

#line 765 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cdouble __pyx_t_5numpy_complex_t;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_create_numpyarray;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_Converter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_BasicConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_ObjectConverterBase;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VaryArrayConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_FixedArrayConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_CharArrayConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
template <typename T>

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
template <typename T>

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorVectorConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorBoolConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorVectorBoolConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_StringConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorStringConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorVectorStringConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_get_converter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_NP2ROOTConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_FixedNP2ROOTConverter;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_21FixedNP2ROOTConverter___init__;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_list_objects_recursive;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_get_tree_structure;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_humanize_bytes;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_handle_load;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_array2tree;

/* "root_numpy/src/converters.pyx":53
 * # given numelement and size of each element
 * # and write it to buffer
 * cdef inline int create_numpyarray(void* buffer, void* src, int typecode,             # <<<<<<<<<<<<<<
 *                                   unsigned long numele, int elesize,
 *                                   int ndim=1, SIZE_t* dims=NULL):
 */

#line 53 "root_numpy/src/converters.pyx"
struct __pyx_opt_args_13_librootnumpy_create_numpyarray {

#line 53 "root_numpy/src/converters.pyx"
  int __pyx_n;

#line 53 "root_numpy/src/converters.pyx"
  int ndim;

#line 53 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_SIZE_t *dims;

#line 53 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_Converter
#line 53 "root_numpy/src/converters.pyx"
 {
  virtual 
#line 53 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual 
#line 53 "root_numpy/src/converters.pyx"
PyObject *get_nptype(void);
  virtual ~__pyx_t_13_librootnumpy_Converter() { }
#line 53 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_BasicConverter : public __pyx_t_13_librootnumpy_Converter
#line 53 "root_numpy/src/converters.pyx"
 {

  /* "root_numpy/src/converters.pyx":123
 * 
 * 
 * cdef cppclass BasicConverter(Converter):             # <<<<<<<<<<<<<<
 *     int size
 *     int nptypecode
 */

#line 123 "root_numpy/src/converters.pyx"
  int size;

#line 123 "root_numpy/src/converters.pyx"
  int nptypecode;

#line 123 "root_numpy/src/converters.pyx"
  std::string nptype;

#line 123 "root_numpy/src/converters.pyx"
   __pyx_t_13_librootnumpy_BasicConverter(int, std::string, int);
  virtual 
#line 123 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual 
#line 123 "root_numpy/src/converters.pyx"
PyObject *get_nptype(void);
  virtual 
#line 123 "root_numpy/src/converters.pyx"
int get_nptypecode(void);
  virtual ~__pyx_t_13_librootnumpy_BasicConverter() { }
#line 123 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_ObjectConverterBase : public __pyx_t_13_librootnumpy_Converter
#line 123 "root_numpy/src/converters.pyx"
 {
  virtual 
#line 123 "root_numpy/src/converters.pyx"
PyObject *get_nptype(void);
  virtual 
#line 123 "root_numpy/src/converters.pyx"
PyObject *get_nptypecode(void);
  virtual ~__pyx_t_13_librootnumpy_ObjectConverterBase() { }
#line 123 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_VaryArrayConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 123 "root_numpy/src/converters.pyx"
 {

  /* "root_numpy/src/converters.pyx":154
 * 
 * 
 * cdef cppclass VaryArrayConverter(ObjectConverterBase):             # <<<<<<<<<<<<<<
 *     BasicConverter* conv # converter for single element
 *     SIZE_t* dims
 */

#line 154 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_BasicConverter *conv;

#line 154 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_SIZE_t *dims;

#line 154 "root_numpy/src/converters.pyx"
  int ndim;

#line 154 "root_numpy/src/converters.pyx"
  int typecode;

#line 154 "root_numpy/src/converters.pyx"
  int elesize;

#line 154 "root_numpy/src/converters.pyx"
   __pyx_t_13_librootnumpy_VaryArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *, int, __pyx_t_13_librootnumpy_SIZE_t *);
  virtual 
#line 154 "root_numpy/src/converters.pyx"
 ~__pyx_t_13_librootnumpy_VaryArrayConverter(void);
  virtual 
#line 154 "root_numpy/src/converters.pyx"
int write(Column *, void *);

#line 154 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_FixedArrayConverter : public __pyx_t_13_librootnumpy_Converter
#line 154 "root_numpy/src/converters.pyx"
 {

  /* "root_numpy/src/converters.pyx":179
 * 
 * 
 * cdef cppclass FixedArrayConverter(Converter):             # <<<<<<<<<<<<<<
 *     BasicConverter* conv # converter for single element
 *     PyObject* shape
 */

#line 179 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_BasicConverter *conv;

#line 179 "root_numpy/src/converters.pyx"
  PyObject *shape;

#line 179 "root_numpy/src/converters.pyx"
   __pyx_t_13_librootnumpy_FixedArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *, PyObject *);
  virtual 
#line 179 "root_numpy/src/converters.pyx"
 ~__pyx_t_13_librootnumpy_FixedArrayConverter(void);
  virtual 
#line 179 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual 
#line 179 "root_numpy/src/converters.pyx"
PyObject *get_nptype(void);
  virtual 
#line 179 "root_numpy/src/converters.pyx"
int get_nptypecode(void);

#line 179 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_CharArrayConverter : public __pyx_t_13_librootnumpy_Converter
#line 179 "root_numpy/src/converters.pyx"
 {

  /* "root_numpy/src/converters.pyx":203
 * 
 * 
 * cdef cppclass CharArrayConverter(Converter):             # <<<<<<<<<<<<<<
 *     BasicConverter* conv # converter for single element
 *     int size
 */

#line 203 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_BasicConverter *conv;

#line 203 "root_numpy/src/converters.pyx"
  int size;

#line 203 "root_numpy/src/converters.pyx"
   __pyx_t_13_librootnumpy_CharArrayConverter(int);
  virtual 
#line 203 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual 
#line 203 "root_numpy/src/converters.pyx"
PyObject *get_nptype(void);
  virtual 
#line 203 "root_numpy/src/converters.pyx"
int get_nptypecode(void);
  virtual ~__pyx_t_13_librootnumpy_CharArrayConverter() { }
#line 203 "root_numpy/src/converters.pyx"
};

/* "root_numpy/src/converters.pyx":226
 * 
 * 
 * cdef cppclass VectorConverter[T](ObjectConverterBase):             # <<<<<<<<<<<<<<
 *     int elesize
 *     int nptypecode
 */

#line 226 "root_numpy/src/converters.pyx"
template <class T>
struct __pyx_t_13_librootnumpy_VectorConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 226 "root_numpy/src/converters.pyx"
 {

#line 226 "root_numpy/src/converters.pyx"
  int elesize;

#line 226 "root_numpy/src/converters.pyx"
  int nptypecode;

#line 226 "root_numpy/src/converters.pyx"
  Vector2Array<T>  v2a;

#line 226 "root_numpy/src/converters.pyx"
   __pyx_t_13_librootnumpy_VectorConverter(void);
  virtual 
#line 226 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorConverter() { }
#line 226 "root_numpy/src/converters.pyx"
};

/* "root_numpy/src/converters.pyx":246
 * 
 * 
 * cdef cppclass VectorVectorConverter[T](ObjectConverterBase):             # <<<<<<<<<<<<<<
 *     int elesize
 *     int nptypecode
 */

#line 246 "root_numpy/src/converters.pyx"
template <class T>
struct __pyx_t_13_librootnumpy_VectorVectorConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 246 "root_numpy/src/converters.pyx"
 {

#line 246 "root_numpy/src/converters.pyx"
  int elesize;

#line 246 "root_numpy/src/converters.pyx"
  int nptypecode;

#line 246 "root_numpy/src/converters.pyx"
  Vector2Array<T>  v2a;

#line 246 "root_numpy/src/converters.pyx"
   __pyx_t_13_librootnumpy_VectorVectorConverter(void);
  virtual 
#line 246 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorVectorConverter() { }
#line 246 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_VectorBoolConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 246 "root_numpy/src/converters.pyx"
 {
  virtual 
#line 246 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorBoolConverter() { }
#line 246 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_VectorVectorBoolConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 246 "root_numpy/src/converters.pyx"
 {
  virtual 
#line 246 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorVectorBoolConverter() { }
#line 246 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_StringConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 246 "root_numpy/src/converters.pyx"
 {
  virtual 
#line 246 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_StringConverter() { }
#line 246 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_VectorStringConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 246 "root_numpy/src/converters.pyx"
 {
  virtual 
#line 246 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorStringConverter() { }
#line 246 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_VectorVectorStringConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 246 "root_numpy/src/converters.pyx"
 {
  virtual 
#line 246 "root_numpy/src/converters.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorVectorStringConverter() { }
#line 246 "root_numpy/src/converters.pyx"
};

/* "root_numpy/src/converters.pyx":376
 * 
 * cdef cpp_map[string, Converter*] CONVERTERS
 * ctypedef pair[string, Converter*] CONVERTERS_ITEM             # <<<<<<<<<<<<<<
 * 
 * # basic type converters
 */

#line 376 "root_numpy/src/converters.pyx"
typedef std::pair<std::string,__pyx_t_13_librootnumpy_Converter *>  __pyx_t_13_librootnumpy_CONVERTERS_ITEM;

/* "root_numpy/src/converters.pyx":499
 * 
 * 
 * cdef Converter* get_converter(TLeaf* leaf, char type_code='\0'):             # <<<<<<<<<<<<<<
 *     # Find existing converter or attempt to create a new one
 *     cdef Converter* conv
 */

#line 499 "root_numpy/src/converters.pyx"
struct __pyx_opt_args_13_librootnumpy_get_converter {

#line 499 "root_numpy/src/converters.pyx"
  int __pyx_n;

#line 499 "root_numpy/src/converters.pyx"
  char type_code;

#line 499 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_NP2ROOTConverter
#line 499 "root_numpy/src/converters.pyx"
 {
  virtual 
#line 499 "root_numpy/src/converters.pyx"
void fill_from(void *);
  virtual 
#line 499 "root_numpy/src/converters.pyx"
 ~__pyx_t_13_librootnumpy_NP2ROOTConverter(void);

  /* "root_numpy/src/converters.pyx":544
 * ####################################
 * 
 * cdef cppclass NP2ROOTConverter:             # <<<<<<<<<<<<<<
 * 
 *     void fill_from(void* source):
 */

#line 544 "root_numpy/src/converters.pyx"
};
struct __pyx_t_13_librootnumpy_FixedNP2ROOTConverter : public __pyx_t_13_librootnumpy_NP2ROOTConverter
#line 544 "root_numpy/src/converters.pyx"
 {

  /* "root_numpy/src/converters.pyx":553
 * 
 * 
 * cdef cppclass FixedNP2ROOTConverter(NP2ROOTConverter):             # <<<<<<<<<<<<<<
 *     int nbytes
 *     void* value
 */

#line 553 "root_numpy/src/converters.pyx"
  int nbytes;

#line 553 "root_numpy/src/converters.pyx"
  void *value;

#line 553 "root_numpy/src/converters.pyx"
  TBranch *branch;

#line 553 "root_numpy/src/converters.pyx"
   __pyx_t_13_librootnumpy_FixedNP2ROOTConverter(TTree *, std::string, std::string, int, int, struct __pyx_opt_args_21FixedNP2ROOTConverter___init__ *__pyx_optional_args);
  virtual 
#line 553 "root_numpy/src/converters.pyx"
PyObject *__del__(PyObject *);
  virtual 
#line 553 "root_numpy/src/converters.pyx"
void fill_from(void *);
  virtual ~__pyx_t_13_librootnumpy_FixedNP2ROOTConverter() { }
#line 553 "root_numpy/src/converters.pyx"
};

/* "root_numpy/src/converters.pyx":558
 *     TBranch* branch
 * 
 *     __init__(TTree* tree, string name, string roottype,             # <<<<<<<<<<<<<<
 *              int length, int elembytes,
 *              int ndim=0, SIZE_t* dims=NULL):
 */

#line 558 "root_numpy/src/converters.pyx"
struct __pyx_opt_args_21FixedNP2ROOTConverter___init__ {

#line 558 "root_numpy/src/converters.pyx"
  int __pyx_n;

#line 558 "root_numpy/src/converters.pyx"
  int ndim;

#line 558 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_SIZE_t *dims;

#line 558 "root_numpy/src/converters.pyx"
};

/* "root_numpy/src/tree.pyx":4
 * 
 * 
 * cdef list_objects_recursive(TDirectory* rdir, objects, vector[TClass*]& classes, path=""):             # <<<<<<<<<<<<<<
 *     cdef TList* keys = rdir.GetListOfKeys()
 *     if keys == NULL:
 */

#line 4 "root_numpy/src/tree.pyx"
struct __pyx_opt_args_13_librootnumpy_list_objects_recursive {

#line 4 "root_numpy/src/tree.pyx"
  int __pyx_n;

#line 4 "root_numpy/src/tree.pyx"
  PyObject *path;

#line 4 "root_numpy/src/tree.pyx"
};

/* "root_numpy/src/tree.pyx":102
 * 
 * 
 * cdef get_tree_structure(TTree* tree, branches=None):             # <<<<<<<<<<<<<<
 *     cdef int ibranch
 *     cdef TBranch* branch
 */

#line 102 "root_numpy/src/tree.pyx"
struct __pyx_opt_args_13_librootnumpy_get_tree_structure {

#line 102 "root_numpy/src/tree.pyx"
  int __pyx_n;

#line 102 "root_numpy/src/tree.pyx"
  PyObject *branches;

#line 102 "root_numpy/src/tree.pyx"
};

/* "root_numpy/src/tree.pyx":123
 * 
 * 
 * cdef humanize_bytes(long value, int precision=1):             # <<<<<<<<<<<<<<
 *     abbrevs = (
 *         (1<<50, 'PB'),
 */

#line 123 "root_numpy/src/tree.pyx"
struct __pyx_opt_args_13_librootnumpy_humanize_bytes {

#line 123 "root_numpy/src/tree.pyx"
  int __pyx_n;

#line 123 "root_numpy/src/tree.pyx"
  int precision;

#line 123 "root_numpy/src/tree.pyx"
};

/* "root_numpy/src/tree.pyx":139
 * 
 * 
 * cdef handle_load(int load, bool ignore_index=False):             # <<<<<<<<<<<<<<
 *     if load >= 0:
 *         return
 */

#line 139 "root_numpy/src/tree.pyx"
struct __pyx_opt_args_13_librootnumpy_handle_load {

#line 139 "root_numpy/src/tree.pyx"
  int __pyx_n;

#line 139 "root_numpy/src/tree.pyx"
  bool ignore_index;

#line 139 "root_numpy/src/tree.pyx"
};

/* "root_numpy/src/tree.pyx":490
 * 
 * 
 * cdef TTree* array2tree(np.ndarray arr, string name='tree', TTree* tree=NULL) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[NP2ROOTConverter*] converters
 *     cdef NP2ROOTConverter* cvt
 */

#line 490 "root_numpy/src/tree.pyx"
struct __pyx_opt_args_13_librootnumpy_array2tree {

#line 490 "root_numpy/src/tree.pyx"
  int __pyx_n;

#line 490 "root_numpy/src/tree.pyx"
  std::string name;

#line 490 "root_numpy/src/tree.pyx"
  TTree *tree;

#line 490 "root_numpy/src/tree.pyx"
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListCompAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* SaveResetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* BufferFormatCheck.proto */
static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type); // PROTO

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* ArrayAPI.proto */
#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
#if PY_MAJOR_VERSION >= 3
    char *formats;
#endif
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
        short *as_shorts;
        unsigned short *as_ushorts;
        Py_UNICODE *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist;
#if PY_MAJOR_VERSION >= 3
        int ob_exports;
#endif
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    op->ob_size = size;
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->ob_size) {
        self->ob_size = n;
        return 0;
    }
    newsize = n + (n / 2) + 1;
    if (newsize <= self->allocated) {
        PyErr_NoMemory();
        return -1;
    }
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = newsize;
    return 0;
}
#endif

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* None.proto */
static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX         && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* None.proto */
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* None.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* None.proto */
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* None.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'array' */

/* Module declarations from 'cpython.array' */
static PyTypeObject *__pyx_ptype_7cpython_5array_array = 0;
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.cast' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from '_librootnumpy' */
static std::map<std::string,__pyx_t_13_librootnumpy_Converter *>  __pyx_v_13_librootnumpy_CONVERTERS;
static CYTHON_INLINE PyObject *__pyx_f_13_librootnumpy_resolve_type(char const *); /*proto*/
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray(void *, void *, int, unsigned long, int, struct __pyx_opt_args_13_librootnumpy_create_numpyarray *__pyx_optional_args); /*proto*/
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray_vectorbool(void *, std::vector<bool>  *); /*proto*/
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray_vectorstring(void *, std::vector<std::string>  *); /*proto*/
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_find_converter_by_typename(std::string); /*proto*/
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_get_array_converter(std::string, PyObject *); /*proto*/
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_get_converter(TLeaf *, struct __pyx_opt_args_13_librootnumpy_get_converter *__pyx_optional_args); /*proto*/
static __pyx_t_13_librootnumpy_NP2ROOTConverter *__pyx_f_13_librootnumpy_find_np2root_converter(TTree *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_list_objects_recursive(TDirectory *, PyObject *, std::vector<TClass *>  &, struct __pyx_opt_args_13_librootnumpy_list_objects_recursive *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_get_branch_structure(TBranch *); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_get_tree_structure(TTree *, struct __pyx_opt_args_13_librootnumpy_get_tree_structure *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_humanize_bytes(long, struct __pyx_opt_args_13_librootnumpy_humanize_bytes *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_handle_load(int, struct __pyx_opt_args_13_librootnumpy_handle_load *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_tree2array(TTree *, bool, PyObject *, std::string, PyObject *, PyObject *, PyObject *, bool, std::string, long); /*proto*/
static TTree *__pyx_f_13_librootnumpy_array2tree(PyArrayObject *, struct __pyx_opt_args_13_librootnumpy_array2tree *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyArrayObject *__pyx_f_13_librootnumpy_tonumpyarray(void *, int, int); /*proto*/
static PyObject *__pyx_f_13_librootnumpy__blockwise_inner_join(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_13_librootnumpy__vector_fk_inner_join(PyArrayObject *, PyObject *, PyArrayObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static PyObject *__pyx_f_13_librootnumpy__scalar_fk_inner_join(PyArrayObject *, PyObject *, PyArrayObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t = { "float32_t", NULL, sizeof(__pyx_t_5numpy_float32_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_short = { "short", NULL, sizeof(short), { 0 }, 0, IS_UNSIGNED(short) ? 'U' : 'I', IS_UNSIGNED(short), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t = { "int8_t", NULL, sizeof(__pyx_t_5numpy_int8_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int8_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int8_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int_t = { "int_t", NULL, sizeof(__pyx_t_5numpy_int_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int_t), 0 };
#define __Pyx_MODULE_NAME "_librootnumpy"
int __pyx_module_is_main__librootnumpy = 0;

/* Implementation of '_librootnumpy' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_RuntimeWarning;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_xrange;
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_L[] = "L";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_GB[] = "GB";
static const char __pyx_k_MB[] = "MB";
static const char __pyx_k_PB[] = "PB";
static const char __pyx_k_TB[] = "TB";
static const char __pyx_k__5[] = "[]";
static const char __pyx_k__7[] = "][";
static const char __pyx_k_f1[] = "f1";
static const char __pyx_k_f2[] = "f2";
static const char __pyx_k_f3[] = "f3";
static const char __pyx_k_fk[] = "fk";
static const char __pyx_k_fn[] = "fn";
static const char __pyx_k_h1[] = "h1";
static const char __pyx_k_h2[] = "h2";
static const char __pyx_k_h3[] = "h3";
static const char __pyx_k_it[] = "it";
static const char __pyx_k_kB[] = "kB";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_0_d[] = "[{0:d}]";
static const char __pyx_k__11[] = "[";
static const char __pyx_k__12[] = "]";
static const char __pyx_k__15[] = "";
static const char __pyx_k__16[] = "/";
static const char __pyx_k__17[] = ", ";
static const char __pyx_k__33[] = "_";
static const char __pyx_k_arr[] = "arr";
static const char __pyx_k_f_s[] = "%.*f %s";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_mat[] = "_mat";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_bool[] = "bool";
static const char __pyx_k_char[] = "char";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_f1_2[] = "f1_";
static const char __pyx_k_f2_2[] = "f2_";
static const char __pyx_k_f3_2[] = "f3_";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_find[] = "find";
static const char __pyx_k_fk_d[] = "fk%d";
static const char __pyx_k_func[] = "func";
static const char __pyx_k_h1_2[] = "h1_";
static const char __pyx_k_h2_2[] = "h2_";
static const char __pyx_k_h3_2[] = "h3_";
static const char __pyx_k_hist[] = "hist";
static const char __pyx_k_ibin[] = "ibin";
static const char __pyx_k_int8[] = "int8";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_kind[] = "kind";
static const char __pyx_k_left[] = "left";
static const char __pyx_k_long[] = "long";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tree[] = "tree";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_0_d_C[] = "[{0:d}]/C";
static const char __pyx_k_S_0_d[] = "S{0:d}";
static const char __pyx_k_TTree[] = "TTree";
static const char __pyx_k_TYPES[] = "TYPES";
static const char __pyx_k_arr_2[] = "_arr";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_bytes[] = "bytes";
static const char __pyx_k_chain[] = "chain";
static const char __pyx_k_coord[] = "coord";
static const char __pyx_k_ctype[] = "ctype";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_graph[] = "graph";
static const char __pyx_k_group[] = "group";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_int16[] = "int16";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_int64[] = "int64";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_match[] = "match";
static const char __pyx_k_names[] = "names";
static const char __pyx_k_nbins[] = "nbins";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ravel[] = "ravel";
static const char __pyx_k_rfile[] = "rfile";
static const char __pyx_k_right[] = "right";
static const char __pyx_k_rtree[] = "rtree";
static const char __pyx_k_s_0_9[] = "^[^\\[]+((?:\\[[^\\s\\]]+\\])(?:\\[[0-9]+\\])*)?$";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_short[] = "short";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_types[] = "types";
static const char __pyx_k_uint8[] = "uint8";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_1_byte[] = "1 byte";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_atexit[] = "atexit";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_fields[] = "fields";
static const char __pyx_k_fnames[] = "fnames";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_func_2[] = "_func";
static const char __pyx_k_hist_2[] = "_hist";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_intree[] = "intree";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_resize[] = "resize";
static const char __pyx_k_spline[] = "spline";
static const char __pyx_k_string[] = "string";
static const char __pyx_k_tclass[] = "tclass";
static const char __pyx_k_uint16[] = "uint16";
static const char __pyx_k_uint32[] = "uint32";
static const char __pyx_k_uint64[] = "uint64";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_array_c[] = "array_c";
static const char __pyx_k_array_d[] = "array_d";
static const char __pyx_k_array_f[] = "array_f";
static const char __pyx_k_array_i[] = "array_i";
static const char __pyx_k_array_l[] = "array_l";
static const char __pyx_k_array_s[] = "array_s";
static const char __pyx_k_bin_idx[] = "bin_idx";
static const char __pyx_k_classes[] = "classes";
static const char __pyx_k_cleanup[] = "cleanup";
static const char __pyx_k_clsname[] = "clsname";
static const char __pyx_k_compile[] = "compile";
static const char __pyx_k_content[] = "content";
static const char __pyx_k_fill_g1[] = "fill_g1";
static const char __pyx_k_fill_g2[] = "fill_g2";
static const char __pyx_k_fill_h1[] = "fill_h1";
static const char __pyx_k_fill_h2[] = "fill_h2";
static const char __pyx_k_fill_h3[] = "fill_h3";
static const char __pyx_k_fill_p1[] = "fill_p1";
static const char __pyx_k_fill_p2[] = "fill_p2";
static const char __pyx_k_fill_p3[] = "fill_p3";
static const char __pyx_k_fk_name[] = "fk_name";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_graph_2[] = "_graph";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_itemset[] = "itemset";
static const char __pyx_k_objects[] = "objects";
static const char __pyx_k_outtree[] = "outtree";
static const char __pyx_k_profile[] = "profile";
static const char __pyx_k_weights[] = "weights";
static const char __pyx_k_Long64_t[] = "Long64_t";
static const char __pyx_k_branches[] = "branches";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_longlong[] = "longlong";
static const char __pyx_k_matrix_d[] = "matrix_d";
static const char __pyx_k_matrix_f[] = "matrix_f";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_root_arr[] = "root_arr";
static const char __pyx_k_root_mat[] = "root_mat";
static const char __pyx_k_spline_2[] = "_spline";
static const char __pyx_k_subdtype[] = "subdtype";
static const char __pyx_k_treename[] = "treename";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_ULong64_t[] = "ULong64_t";
static const char __pyx_k_array_h1c[] = "array_h1c";
static const char __pyx_k_array_h2c[] = "array_h2c";
static const char __pyx_k_array_h3c[] = "array_h3c";
static const char __pyx_k_ctypename[] = "ctypename";
static const char __pyx_k_dtypecode[] = "dtypecode";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_h1c_array[] = "h1c_array";
static const char __pyx_k_h1d_array[] = "h1d_array";
static const char __pyx_k_h1f_array[] = "h1f_array";
static const char __pyx_k_h1i_array[] = "h1i_array";
static const char __pyx_k_h1s_array[] = "h1s_array";
static const char __pyx_k_h2c_array[] = "h2c_array";
static const char __pyx_k_h2d_array[] = "h2d_array";
static const char __pyx_k_h2f_array[] = "h2f_array";
static const char __pyx_k_h2i_array[] = "h2i_array";
static const char __pyx_k_h2s_array[] = "h2s_array";
static const char __pyx_k_h3c_array[] = "h3c_array";
static const char __pyx_k_h3d_array[] = "h3d_array";
static const char __pyx_k_h3f_array[] = "h3f_array";
static const char __pyx_k_h3i_array[] = "h3i_array";
static const char __pyx_k_h3s_array[] = "h3s_array";
static const char __pyx_k_long_long[] = "long long";
static const char __pyx_k_n_samples[] = "n_samples";
static const char __pyx_k_profile_2[] = "_profile";
static const char __pyx_k_root_hist[] = "root_hist";
static const char __pyx_k_sample_f1[] = "sample_f1";
static const char __pyx_k_sample_f2[] = "sample_f2";
static const char __pyx_k_sample_f3[] = "sample_f3";
static const char __pyx_k_sample_h1[] = "sample_h1";
static const char __pyx_k_sample_h2[] = "sample_h2";
static const char __pyx_k_sample_h3[] = "sample_h3";
static const char __pyx_k_selection[] = "selection";
static const char __pyx_k_structure[] = "structure";
static const char __pyx_k_thn2array[] = "thn2array";
static const char __pyx_k_ulonglong[] = "ulonglong";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_array2root[] = "array2root";
static const char __pyx_k_cache_size[] = "cache_size";
static const char __pyx_k_list_trees[] = "list_trees";
static const char __pyx_k_startswith[] = "startswith";
static const char __pyx_k_vector_int[] = "vector<int>";
static const char __pyx_k_warnings_2[] = "_warnings";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_evaluate_f1[] = "evaluate_f1";
static const char __pyx_k_evaluate_f2[] = "evaluate_f2";
static const char __pyx_k_evaluate_f3[] = "evaluate_f3";
static const char __pyx_k_evaluate_h1[] = "evaluate_h1";
static const char __pyx_k_evaluate_h2[] = "evaluate_h2";
static const char __pyx_k_evaluate_h3[] = "evaluate_h3";
static const char __pyx_k_flatnonzero[] = "flatnonzero";
static const char __pyx_k_vector_bool[] = "vector<bool>";
static const char __pyx_k_vector_char[] = "vector<char>";
static const char __pyx_k_vector_long[] = "vector<long>";
static const char __pyx_k_weight_name[] = "weight_name";
static const char __pyx_k_LEAF_PATTERN[] = "LEAF_PATTERN";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_force_repeat[] = "force_repeat";
static const char __pyx_k_librootnumpy[] = "_librootnumpy";
static const char __pyx_k_list_objects[] = "list_objects";
static const char __pyx_k_unsigned_int[] = "unsigned int";
static const char __pyx_k_vector_float[] = "vector<float>";
static const char __pyx_k_vector_short[] = "vector<short>";
static const char __pyx_k_cannot_read_0[] = "cannot read {0}";
static const char __pyx_k_count_nonzero[] = "count_nonzero";
static const char __pyx_k_list_branches[] = "list_branches";
static const char __pyx_k_unsigned_char[] = "unsigned char";
static const char __pyx_k_unsigned_long[] = "unsigned long";
static const char __pyx_k_vector_double[] = "vector<double>";
static const char __pyx_k_vector_string[] = "vector<string>";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_RuntimeWarning[] = "RuntimeWarning";
static const char __pyx_k_TDirectoryFile[] = "TDirectoryFile";
static const char __pyx_k_chain_is_empty[] = "chain is empty";
static const char __pyx_k_evaluate_graph[] = "evaluate_graph";
static const char __pyx_k_include_weight[] = "include_weight";
static const char __pyx_k_return_indices[] = "return_indices";
static const char __pyx_k_unsigned_short[] = "unsigned short";
static const char __pyx_k_evaluate_spline[] = "evaluate_spline";
static const char __pyx_k_list_structures[] = "list_structures";
static const char __pyx_k_thnsparse2array[] = "thnsparse2array";
static const char __pyx_k_SPECIAL_TYPEDEFS[] = "SPECIAL_TYPEDEFS";
static const char __pyx_k_TYPES_NUMPY2ROOT[] = "TYPES_NUMPY2ROOT";
static const char __pyx_k_array_ravel_view[] = "array_ravel_view";
static const char __pyx_k_list_directories[] = "list_directories";
static const char __pyx_k_vector_long_long[] = "vector<long long>";
static const char __pyx_k_array2tree_toCObj[] = "array2tree_toCObj";
static const char __pyx_k_vector_vector_int[] = "vector<vector<int> >";
static const char __pyx_k_warn_missing_tree[] = "warn_missing_tree";
static const char __pyx_k_cannot_open_file_0[] = "cannot open file {0}";
static const char __pyx_k_extern_ordereddict[] = "extern.ordereddict";
static const char __pyx_k_unsigned_long_long[] = "unsigned long long";
static const char __pyx_k_vector_vector_bool[] = "vector<vector<bool> >";
static const char __pyx_k_vector_vector_char[] = "vector<vector<char> >";
static const char __pyx_k_vector_vector_long[] = "vector<vector<long> >";
static const char __pyx_k_evaluate_formula_1d[] = "evaluate_formula_1d";
static const char __pyx_k_evaluate_formula_2d[] = "evaluate_formula_2d";
static const char __pyx_k_evaluate_formula_3d[] = "evaluate_formula_3d";
static const char __pyx_k_evaluate_formula_4d[] = "evaluate_formula_4d";
static const char __pyx_k_root2array_fromfile[] = "root2array_fromfile";
static const char __pyx_k_root2array_fromtree[] = "root2array_fromtree";
static const char __pyx_k_vector_unsigned_int[] = "vector<unsigned int>";
static const char __pyx_k_vector_vector_float[] = "vector<vector<float> >";
static const char __pyx_k_vector_vector_short[] = "vector<vector<short> >";
static const char __pyx_k_tree_has_no_branches[] = "tree has no branches";
static const char __pyx_k_vector_unsigned_char[] = "vector<unsigned char>";
static const char __pyx_k_vector_unsigned_long[] = "vector<unsigned long>";
static const char __pyx_k_vector_vector_double[] = "vector<vector<double> >";
static const char __pyx_k_vector_vector_string[] = "vector<vector<string> >";
static const char __pyx_k_0_is_not_a_ROOT_class[] = "'{0}' is not a ROOT class";
static const char __pyx_k_tree_0_not_found_in_1[] = "tree '{0}' not found in {1}";
static const char __pyx_k_vector_unsigned_short[] = "vector<unsigned short>";
static const char __pyx_k_branch_0_has_no_leaves[] = "branch '{0}' has no leaves";
static const char __pyx_k_file_0_is_not_writable[] = "file {0} is not writable";
static const char __pyx_k_multiple_trees_found_0[] = "multiple trees found: {0}";
static const char __pyx_k_unable_to_get_keys_in_0[] = "unable to get keys in {0}";
static const char __pyx_k_vector_vector_long_long[] = "vector<vector<long long> >";
static const char __pyx_k_cannot_open_current_file[] = "cannot open current file";
static const char __pyx_k_branches_is_an_empty_list[] = "branches is an empty list";
static const char __pyx_k_vector_unsigned_long_long[] = "vector<unsigned long long>";
static const char __pyx_k_could_not_allocate_d_bytes[] = "could not allocate %d bytes";
static const char __pyx_k_vector_vector_unsigned_int[] = "vector<vector<unsigned int> >";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_vector_vector_unsigned_char[] = "vector<vector<unsigned char> >";
static const char __pyx_k_vector_vector_unsigned_long[] = "vector<vector<unsigned long> >";
static const char __pyx_k_duplicate_branches_requested[] = "duplicate branches requested";
static const char __pyx_k_the_chain_is_not_initialized[] = "the chain is not initialized";
static const char __pyx_k_unable_to_access_tree_0_in_1[] = "unable to access tree '{0}' in {1}";
static const char __pyx_k_vector_vector_unsigned_short[] = "vector<vector<unsigned short> >";
static const char __pyx_k_RootNumpyUnconvertibleWarning[] = "RootNumpyUnconvertibleWarning";
static const char __pyx_k_home_endw_workspace_root_numpy[] = "/home/endw/workspace/root_numpy/root_numpy/src/converters.pyx";
static const char __pyx_k_cannot_convert_leaf_0_of_branch[] = "cannot convert leaf '{0}' of branch '{1}' with type '{2}'";
static const char __pyx_k_failed_to_allocate_memory_for_0[] = "failed to allocate memory for {0} array of {1} records with {2} fields";
static const char __pyx_k_ignoring_duplicate_branch_named[] = "ignoring duplicate branch named '{0}'";
static const char __pyx_k_leaf_list_for_branch_0_is_empty[] = "leaf list for branch '{0}' is empty";
static const char __pyx_k_none_of_the_input_files_contain[] = "none of the input files contain the requested tree '{0}'";
static const char __pyx_k_read_failure_in_current_tree_or[] = "read failure in current tree or requested entry does not exist (branches have different lengths?)";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_cannot_access_tree_in_current_fi[] = "cannot access tree in current file";
static const char __pyx_k_converter_for_r_is_not_implement[] = "converter for {!r} is not implemented (skipping)";
static const char __pyx_k_could_not_compile_selection_expr[] = "could not compile selection expression '{0}'";
static const char __pyx_k_could_not_find_formula_converter[] = "could not find formula converter";
static const char __pyx_k_field_0_of_type_1_is_not_compati[] = "field '{0}' of type '{1}' is not compatible with existing branch of type '{2}'";
static const char __pyx_k_home_endw_workspace_root_numpy_2[] = "/home/endw/workspace/root_numpy/root_numpy/src/tree.pyx";
static const char __pyx_k_home_endw_workspace_root_numpy_3[] = "/home/endw/workspace/root_numpy/root_numpy/src/array.pyx";
static const char __pyx_k_home_endw_workspace_root_numpy_4[] = "/home/endw/workspace/root_numpy/root_numpy/src/matrix.pyx";
static const char __pyx_k_home_endw_workspace_root_numpy_5[] = "/home/endw/workspace/root_numpy/root_numpy/src/sample.pyx";
static const char __pyx_k_home_endw_workspace_root_numpy_6[] = "/home/endw/workspace/root_numpy/root_numpy/src/hist.pyx";
static const char __pyx_k_home_endw_workspace_root_numpy_7[] = "/home/endw/workspace/root_numpy/root_numpy/src/graph.pyx";
static const char __pyx_k_home_endw_workspace_root_numpy_8[] = "/home/endw/workspace/root_numpy/root_numpy/src/evaluate.pyx";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_the_branch_or_expression_0_is_no[] = "the branch or expression '{0}' is not present or valid";
static const char __pyx_k_tree_index_in_chain_is_out_of_bo[] = "tree index in chain is out of bounds";
static const char __pyx_k_unable_to_convert_any_branches_i[] = "unable to convert any branches in this tree";
static const char __pyx_k_vector_vector_unsigned_long_long[] = "vector<vector<unsigned long long> >";
static const char __pyx_k_cannot_convert_leaf_0_of_branch_2[] = "cannot convert leaf '{0}' of branch '{1}' with type '{2}' (skipping)";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_0_d;
static PyObject *__pyx_kp_s_0_d_C;
static PyObject *__pyx_kp_s_0_is_not_a_ROOT_class;
static PyObject *__pyx_kp_s_1_byte;
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_b_C;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_GB;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_LEAF_PATTERN;
static PyObject *__pyx_n_s_Long64_t;
static PyObject *__pyx_n_s_MB;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_O;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_n_s_PB;
static PyObject *__pyx_n_s_RootNumpyUnconvertibleWarning;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_RuntimeWarning;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_n_s_SPECIAL_TYPEDEFS;
static PyObject *__pyx_kp_s_S_0_d;
static PyObject *__pyx_n_s_TB;
static PyObject *__pyx_n_s_TDirectoryFile;
static PyObject *__pyx_n_s_TTree;
static PyObject *__pyx_n_s_TYPES;
static PyObject *__pyx_n_s_TYPES_NUMPY2ROOT;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ULong64_t;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__11;
static PyObject *__pyx_kp_s__12;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_s__16;
static PyObject *__pyx_kp_s__17;
static PyObject *__pyx_n_b__33;
static PyObject *__pyx_kp_s__5;
static PyObject *__pyx_kp_s__7;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arr;
static PyObject *__pyx_n_s_arr_2;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_array2root;
static PyObject *__pyx_n_s_array2tree_toCObj;
static PyObject *__pyx_n_s_array_c;
static PyObject *__pyx_n_s_array_d;
static PyObject *__pyx_n_s_array_f;
static PyObject *__pyx_n_s_array_h1c;
static PyObject *__pyx_n_s_array_h2c;
static PyObject *__pyx_n_s_array_h3c;
static PyObject *__pyx_n_s_array_i;
static PyObject *__pyx_n_s_array_l;
static PyObject *__pyx_n_s_array_ravel_view;
static PyObject *__pyx_n_s_array_s;
static PyObject *__pyx_n_s_atexit;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_bin_idx;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_kp_s_branch_0_has_no_leaves;
static PyObject *__pyx_n_s_branches;
static PyObject *__pyx_kp_s_branches_is_an_empty_list;
static PyObject *__pyx_n_s_bytes;
static PyObject *__pyx_n_s_cache_size;
static PyObject *__pyx_kp_s_cannot_access_tree_in_current_fi;
static PyObject *__pyx_kp_s_cannot_convert_leaf_0_of_branch;
static PyObject *__pyx_kp_s_cannot_convert_leaf_0_of_branch_2;
static PyObject *__pyx_kp_s_cannot_open_current_file;
static PyObject *__pyx_kp_s_cannot_open_file_0;
static PyObject *__pyx_kp_s_cannot_read_0;
static PyObject *__pyx_n_s_chain;
static PyObject *__pyx_kp_s_chain_is_empty;
static PyObject *__pyx_n_b_char;
static PyObject *__pyx_n_s_char;
static PyObject *__pyx_n_s_classes;
static PyObject *__pyx_n_s_cleanup;
static PyObject *__pyx_n_s_clsname;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_compile;
static PyObject *__pyx_n_s_content;
static PyObject *__pyx_kp_s_converter_for_r_is_not_implement;
static PyObject *__pyx_n_s_coord;
static PyObject *__pyx_kp_s_could_not_allocate_d_bytes;
static PyObject *__pyx_kp_s_could_not_compile_selection_expr;
static PyObject *__pyx_kp_s_could_not_find_formula_converter;
static PyObject *__pyx_n_s_count_nonzero;
static PyObject *__pyx_n_s_ctype;
static PyObject *__pyx_n_s_ctypename;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_b_double;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtypecode;
static PyObject *__pyx_kp_s_duplicate_branches_requested;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_evaluate_f1;
static PyObject *__pyx_n_s_evaluate_f2;
static PyObject *__pyx_n_s_evaluate_f3;
static PyObject *__pyx_n_s_evaluate_formula_1d;
static PyObject *__pyx_n_s_evaluate_formula_2d;
static PyObject *__pyx_n_s_evaluate_formula_3d;
static PyObject *__pyx_n_s_evaluate_formula_4d;
static PyObject *__pyx_n_s_evaluate_graph;
static PyObject *__pyx_n_s_evaluate_h1;
static PyObject *__pyx_n_s_evaluate_h2;
static PyObject *__pyx_n_s_evaluate_h3;
static PyObject *__pyx_n_s_evaluate_spline;
static PyObject *__pyx_n_s_extern_ordereddict;
static PyObject *__pyx_n_s_f1;
static PyObject *__pyx_n_s_f1_2;
static PyObject *__pyx_n_s_f2;
static PyObject *__pyx_n_s_f2_2;
static PyObject *__pyx_n_s_f3;
static PyObject *__pyx_n_s_f3_2;
static PyObject *__pyx_kp_s_f_s;
static PyObject *__pyx_kp_s_failed_to_allocate_memory_for_0;
static PyObject *__pyx_kp_s_field_0_of_type_1_is_not_compati;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_kp_s_file_0_is_not_writable;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_fill_g1;
static PyObject *__pyx_n_s_fill_g2;
static PyObject *__pyx_n_s_fill_h1;
static PyObject *__pyx_n_s_fill_h2;
static PyObject *__pyx_n_s_fill_h3;
static PyObject *__pyx_n_s_fill_p1;
static PyObject *__pyx_n_s_fill_p2;
static PyObject *__pyx_n_s_fill_p3;
static PyObject *__pyx_n_s_find;
static PyObject *__pyx_n_s_fk;
static PyObject *__pyx_kp_s_fk_d;
static PyObject *__pyx_n_s_fk_name;
static PyObject *__pyx_n_s_flatnonzero;
static PyObject *__pyx_n_s_float;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_fn;
static PyObject *__pyx_n_s_fname;
static PyObject *__pyx_n_s_fnames;
static PyObject *__pyx_n_s_force_repeat;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_func;
static PyObject *__pyx_n_s_func_2;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_graph;
static PyObject *__pyx_n_s_graph_2;
static PyObject *__pyx_n_s_group;
static PyObject *__pyx_n_s_h1;
static PyObject *__pyx_n_s_h1_2;
static PyObject *__pyx_n_s_h1c_array;
static PyObject *__pyx_n_s_h1d_array;
static PyObject *__pyx_n_s_h1f_array;
static PyObject *__pyx_n_s_h1i_array;
static PyObject *__pyx_n_s_h1s_array;
static PyObject *__pyx_n_s_h2;
static PyObject *__pyx_n_s_h2_2;
static PyObject *__pyx_n_s_h2c_array;
static PyObject *__pyx_n_s_h2d_array;
static PyObject *__pyx_n_s_h2f_array;
static PyObject *__pyx_n_s_h2i_array;
static PyObject *__pyx_n_s_h2s_array;
static PyObject *__pyx_n_s_h3;
static PyObject *__pyx_n_s_h3_2;
static PyObject *__pyx_n_s_h3c_array;
static PyObject *__pyx_n_s_h3d_array;
static PyObject *__pyx_n_s_h3f_array;
static PyObject *__pyx_n_s_h3i_array;
static PyObject *__pyx_n_s_h3s_array;
static PyObject *__pyx_n_s_hist;
static PyObject *__pyx_n_s_hist_2;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_2;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_3;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_4;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_5;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_6;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_7;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_8;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_ibin;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_kp_s_ignoring_duplicate_branch_named;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_include_weight;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_int16;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int64;
static PyObject *__pyx_n_s_int8;
static PyObject *__pyx_n_s_intree;
static PyObject *__pyx_n_s_it;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itemset;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_kB;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_kind;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_kp_s_leaf_list_for_branch_0_is_empty;
static PyObject *__pyx_n_s_left;
static PyObject *__pyx_n_s_librootnumpy;
static PyObject *__pyx_n_s_list_branches;
static PyObject *__pyx_n_s_list_directories;
static PyObject *__pyx_n_s_list_objects;
static PyObject *__pyx_n_s_list_structures;
static PyObject *__pyx_n_s_list_trees;
static PyObject *__pyx_n_s_long;
static PyObject *__pyx_kp_s_long_long;
static PyObject *__pyx_n_s_longlong;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mat;
static PyObject *__pyx_n_s_match;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_matrix_d;
static PyObject *__pyx_n_s_matrix_f;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_kp_s_multiple_trees_found_0;
static PyObject *__pyx_n_s_n_samples;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_names;
static PyObject *__pyx_n_s_nbins;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_kp_s_none_of_the_input_files_contain;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_objects;
static PyObject *__pyx_n_s_outtree;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_profile;
static PyObject *__pyx_n_s_profile_2;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ravel;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_kp_s_read_failure_in_current_tree_or;
static PyObject *__pyx_n_s_register;
static PyObject *__pyx_n_s_resize;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_return_indices;
static PyObject *__pyx_n_s_rfile;
static PyObject *__pyx_n_s_right;
static PyObject *__pyx_n_s_root2array_fromfile;
static PyObject *__pyx_n_s_root2array_fromtree;
static PyObject *__pyx_n_s_root_arr;
static PyObject *__pyx_n_s_root_hist;
static PyObject *__pyx_n_s_root_mat;
static PyObject *__pyx_n_s_rtree;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_s_s_0_9;
static PyObject *__pyx_n_s_sample_f1;
static PyObject *__pyx_n_s_sample_f2;
static PyObject *__pyx_n_s_sample_f3;
static PyObject *__pyx_n_s_sample_h1;
static PyObject *__pyx_n_s_sample_h2;
static PyObject *__pyx_n_s_sample_h3;
static PyObject *__pyx_n_s_selection;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_short;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_spline;
static PyObject *__pyx_n_s_spline_2;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_startswith;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_b_string;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_structure;
static PyObject *__pyx_n_s_subdtype;
static PyObject *__pyx_n_s_tclass;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_the_branch_or_expression_0_is_no;
static PyObject *__pyx_kp_s_the_chain_is_not_initialized;
static PyObject *__pyx_n_s_thn2array;
static PyObject *__pyx_n_s_thnsparse2array;
static PyObject *__pyx_n_b_tree;
static PyObject *__pyx_n_s_tree;
static PyObject *__pyx_kp_s_tree_0_not_found_in_1;
static PyObject *__pyx_kp_s_tree_has_no_branches;
static PyObject *__pyx_kp_s_tree_index_in_chain_is_out_of_bo;
static PyObject *__pyx_n_s_treename;
static PyObject *__pyx_n_s_types;
static PyObject *__pyx_n_s_uint16;
static PyObject *__pyx_n_s_uint32;
static PyObject *__pyx_n_s_uint64;
static PyObject *__pyx_n_s_uint8;
static PyObject *__pyx_n_s_ulonglong;
static PyObject *__pyx_kp_s_unable_to_access_tree_0_in_1;
static PyObject *__pyx_kp_s_unable_to_convert_any_branches_i;
static PyObject *__pyx_kp_s_unable_to_get_keys_in_0;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_kp_s_unsigned_char;
static PyObject *__pyx_kp_s_unsigned_int;
static PyObject *__pyx_kp_s_unsigned_long;
static PyObject *__pyx_kp_s_unsigned_long_long;
static PyObject *__pyx_kp_s_unsigned_short;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_kp_b_vector_bool;
static PyObject *__pyx_kp_b_vector_char;
static PyObject *__pyx_kp_b_vector_double;
static PyObject *__pyx_kp_b_vector_float;
static PyObject *__pyx_kp_b_vector_int;
static PyObject *__pyx_kp_b_vector_long;
static PyObject *__pyx_kp_b_vector_long_long;
static PyObject *__pyx_kp_b_vector_short;
static PyObject *__pyx_kp_b_vector_string;
static PyObject *__pyx_kp_b_vector_unsigned_char;
static PyObject *__pyx_kp_b_vector_unsigned_int;
static PyObject *__pyx_kp_b_vector_unsigned_long;
static PyObject *__pyx_kp_b_vector_unsigned_long_long;
static PyObject *__pyx_kp_b_vector_unsigned_short;
static PyObject *__pyx_kp_b_vector_vector_bool;
static PyObject *__pyx_kp_b_vector_vector_char;
static PyObject *__pyx_kp_b_vector_vector_double;
static PyObject *__pyx_kp_b_vector_vector_float;
static PyObject *__pyx_kp_b_vector_vector_int;
static PyObject *__pyx_kp_b_vector_vector_long;
static PyObject *__pyx_kp_b_vector_vector_long_long;
static PyObject *__pyx_kp_b_vector_vector_short;
static PyObject *__pyx_kp_b_vector_vector_string;
static PyObject *__pyx_kp_b_vector_vector_unsigned_char;
static PyObject *__pyx_kp_b_vector_vector_unsigned_int;
static PyObject *__pyx_kp_b_vector_vector_unsigned_long;
static PyObject *__pyx_kp_b_vector_vector_unsigned_long_long;
static PyObject *__pyx_kp_b_vector_vector_unsigned_short;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warn_missing_tree;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_warnings_2;
static PyObject *__pyx_n_s_weight_name;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_13_librootnumpy_cleanup(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_2list_objects(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_types); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_4list_trees(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_6list_directories(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_8list_structures(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_10list_branches(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_12root2array_fromfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnames, std::string __pyx_v_treename, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, bool __pyx_v_include_weight, std::string __pyx_v_weight_name, long __pyx_v_cache_size, bool __pyx_v_warn_missing_tree); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_14root2array_fromtree(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, bool __pyx_v_include_weight, std::string __pyx_v_weight_name, long __pyx_v_cache_size); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_16array2tree_toCObj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_name, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_18array2root(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_filename, PyObject *__pyx_v_treename, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_20array_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_22array_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_24array_l(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_26array_i(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_28array_s(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_30array_c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_32array_h1c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_34array_h2c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_36array_h3c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_38h1d_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_40h2d_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_42h3d_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_44h1f_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_46h2f_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_48h3f_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_50h1i_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_52h2i_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_54h3i_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_56h1s_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_58h2s_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_60h3s_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_62h1c_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_64h2c_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_66h3c_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_68matrix_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_70matrix_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_72sample_f1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f1, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_74sample_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h1, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_76sample_f2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f2, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_78sample_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h2, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_80sample_f3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f3, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_82sample_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h3, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_84fill_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_86fill_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_88fill_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_90fill_p1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_92fill_p2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_94fill_p3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_96thn2array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyObject *__pyx_v_shape, PyObject *__pyx_v_dtype); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_98thnsparse2array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyObject *__pyx_v_shape, PyObject *__pyx_v_dtype); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_100fill_g1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_102fill_g2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_104evaluate_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_106evaluate_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_108evaluate_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_110evaluate_f1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_112evaluate_f2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_114evaluate_f3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_116evaluate_formula_1d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_118evaluate_formula_2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_120evaluate_formula_3d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_122evaluate_formula_4d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_124evaluate_graph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_126evaluate_spline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_spline, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_128_blockwise_inner_join(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_left, PyObject *__pyx_v_fk, PyObject *__pyx_v_right, PyObject *__pyx_v_force_repeat, PyObject *__pyx_v_fk_name); /* proto */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_1024;
static PyObject *__pyx_int_1048576;
static PyObject *__pyx_int_1073741824;
static PyObject *__pyx_int_1099511627776;
static PyObject *__pyx_int_1125899906842624;
static PyObject *__pyx_int_neg_1;
static std::string __pyx_k__38;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__168;
static PyObject *__pyx_tuple__170;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__153;
static PyObject *__pyx_codeobj__155;
static PyObject *__pyx_codeobj__157;
static PyObject *__pyx_codeobj__159;
static PyObject *__pyx_codeobj__161;
static PyObject *__pyx_codeobj__163;
static PyObject *__pyx_codeobj__165;
static PyObject *__pyx_codeobj__167;
static PyObject *__pyx_codeobj__169;
static PyObject *__pyx_codeobj__171;
static PyObject *__pyx_codeobj__173;
static PyObject *__pyx_codeobj__175;
static PyObject *__pyx_codeobj__177;
static PyObject *__pyx_codeobj__179;
static PyObject *__pyx_codeobj__181;
static PyObject *__pyx_codeobj__183;
static PyObject *__pyx_codeobj__185;
static PyObject *__pyx_codeobj__187;
static PyObject *__pyx_codeobj__189;
static PyObject *__pyx_codeobj__191;

/* "root_numpy/src/converters.pyx":43
 * 
 * 
 * cdef inline unicode resolve_type(const char* typename):             # <<<<<<<<<<<<<<
 *     # resolve Float_t -> float, vector<Float_t> -> vector<float>, ...
 *     resolvedtype = <unicode>ResolveTypedef(typename, True).c_str()
 */

#line 43 "root_numpy/src/converters.pyx"


#line 43 "root_numpy/src/converters.pyx"
static CYTHON_INLINE PyObject *__pyx_f_13_librootnumpy_resolve_type(char const *__pyx_v_typename) {
  PyObject *__pyx_v_resolvedtype = NULL
#line 43 "root_numpy/src/converters.pyx"
;

#line 43 "root_numpy/src/converters.pyx"
  PyObject *__pyx_r = NULL;

#line 43 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 43 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 43 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 43 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 43 "root_numpy/src/converters.pyx"
  Py_ssize_t __pyx_t_4;

#line 43 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 43 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("resolve_type", 0);

  /* "root_numpy/src/converters.pyx":45
 * cdef inline unicode resolve_type(const char* typename):
 *     # resolve Float_t -> float, vector<Float_t> -> vector<float>, ...
 *     resolvedtype = <unicode>ResolveTypedef(typename, True).c_str()             # <<<<<<<<<<<<<<
 *     resolvedtype = <unicode>SPECIAL_TYPEDEFS.get(resolvedtype, resolvedtype)
 *     return resolvedtype
 */

#line 45 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyUnicode_FromString(TClassEdit::ResolveTypedef(__pyx_v_typename, 1).c_str()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 45, __pyx_L1_error)

#line 45 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 45 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __pyx_t_1;

#line 45 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_t_2);

#line 45 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 45 "root_numpy/src/converters.pyx"
  __pyx_v_resolvedtype = ((PyObject*)__pyx_t_2);

#line 45 "root_numpy/src/converters.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/converters.pyx":46
 *     # resolve Float_t -> float, vector<Float_t> -> vector<float>, ...
 *     resolvedtype = <unicode>ResolveTypedef(typename, True).c_str()
 *     resolvedtype = <unicode>SPECIAL_TYPEDEFS.get(resolvedtype, resolvedtype)             # <<<<<<<<<<<<<<
 *     return resolvedtype
 * 
 */

#line 46 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_SPECIAL_TYPEDEFS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 46, __pyx_L1_error)

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 46 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 46, __pyx_L1_error)

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 46 "root_numpy/src/converters.pyx"
  __pyx_t_1 = NULL;

#line 46 "root_numpy/src/converters.pyx"
  __pyx_t_4 = 0;

#line 46 "root_numpy/src/converters.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 46 "root_numpy/src/converters.pyx"
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);

#line 46 "root_numpy/src/converters.pyx"
    if (likely(__pyx_t_1)) {

#line 46 "root_numpy/src/converters.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 46 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_1);

#line 46 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(function);

#line 46 "root_numpy/src/converters.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 46 "root_numpy/src/converters.pyx"
      __pyx_t_4 = 1;

#line 46 "root_numpy/src/converters.pyx"
    }

#line 46 "root_numpy/src/converters.pyx"
  }

#line 46 "root_numpy/src/converters.pyx"
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 46, __pyx_L1_error)

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 46 "root_numpy/src/converters.pyx"
  if (__pyx_t_1) {

#line 46 "root_numpy/src/converters.pyx"
    __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;

#line 46 "root_numpy/src/converters.pyx"
  }

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_v_resolvedtype);

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_v_resolvedtype);

#line 46 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_resolvedtype);

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_v_resolvedtype);

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_v_resolvedtype);

#line 46 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_resolvedtype);

#line 46 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 46, __pyx_L1_error)

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 46 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __pyx_t_2;

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_t_3);

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 46 "root_numpy/src/converters.pyx"
  __Pyx_DECREF_SET(__pyx_v_resolvedtype, ((PyObject*)__pyx_t_3));

#line 46 "root_numpy/src/converters.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/converters.pyx":47
 *     resolvedtype = <unicode>ResolveTypedef(typename, True).c_str()
 *     resolvedtype = <unicode>SPECIAL_TYPEDEFS.get(resolvedtype, resolvedtype)
 *     return resolvedtype             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 47 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 47 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_v_resolvedtype);

#line 47 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_v_resolvedtype;

#line 47 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":43
 * 
 * 
 * cdef inline unicode resolve_type(const char* typename):             # <<<<<<<<<<<<<<
 *     # resolve Float_t -> float, vector<Float_t> -> vector<float>, ...
 *     resolvedtype = <unicode>ResolveTypedef(typename, True).c_str()
 */

#line 43 "root_numpy/src/converters.pyx"


#line 43 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 43 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 43 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 43 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 43 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 43 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 43 "root_numpy/src/converters.pyx"
  __Pyx_AddTraceback("_librootnumpy.resolve_type", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 43 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 43 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 43 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_resolvedtype);

#line 43 "root_numpy/src/converters.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 43 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 43 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 43 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":53
 * # given numelement and size of each element
 * # and write it to buffer
 * cdef inline int create_numpyarray(void* buffer, void* src, int typecode,             # <<<<<<<<<<<<<<
 *                                   unsigned long numele, int elesize,
 *                                   int ndim=1, SIZE_t* dims=NULL):
 */

#line 53 "root_numpy/src/converters.pyx"


#line 53 "root_numpy/src/converters.pyx"
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray(void *__pyx_v_buffer, void *__pyx_v_src, int __pyx_v_typecode, unsigned long __pyx_v_numele, int __pyx_v_elesize, struct __pyx_opt_args_13_librootnumpy_create_numpyarray *__pyx_optional_args) {

#line 53 "root_numpy/src/converters.pyx"
  int __pyx_v_ndim = ((int)1);

  /* "root_numpy/src/converters.pyx":55
 * cdef inline int create_numpyarray(void* buffer, void* src, int typecode,
 *                                   unsigned long numele, int elesize,
 *                                   int ndim=1, SIZE_t* dims=NULL):             # <<<<<<<<<<<<<<
 *     cdef SIZE_t* _dims = dims
 *     cdef SIZE_t default_dims[1]
 */

#line 55 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_SIZE_t *__pyx_v_dims = ((__pyx_t_13_librootnumpy_SIZE_t *)NULL);
  __pyx_t_13_librootnumpy_SIZE_t *__pyx_v__dims
#line 55 "root_numpy/src/converters.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_default_dims[1]
#line 55 "root_numpy/src/converters.pyx"
;
  PyArrayObject *__pyx_v_tmp = 0
#line 55 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_tmpobj
#line 55 "root_numpy/src/converters.pyx"
;
  unsigned long __pyx_v_nbytes
#line 55 "root_numpy/src/converters.pyx"
;

#line 55 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 55 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 55 "root_numpy/src/converters.pyx"
  int __pyx_t_1;

#line 55 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 55 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("create_numpyarray", 0);

#line 55 "root_numpy/src/converters.pyx"
  if (__pyx_optional_args) {

#line 55 "root_numpy/src/converters.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 55 "root_numpy/src/converters.pyx"
      __pyx_v_ndim = __pyx_optional_args->ndim;

#line 55 "root_numpy/src/converters.pyx"
      if (__pyx_optional_args->__pyx_n > 1) {

#line 55 "root_numpy/src/converters.pyx"
        __pyx_v_dims = __pyx_optional_args->dims;

#line 55 "root_numpy/src/converters.pyx"
      }

#line 55 "root_numpy/src/converters.pyx"
    }

#line 55 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":56
 *                                   unsigned long numele, int elesize,
 *                                   int ndim=1, SIZE_t* dims=NULL):
 *     cdef SIZE_t* _dims = dims             # <<<<<<<<<<<<<<
 *     cdef SIZE_t default_dims[1]
 *     if dims == NULL:
 */

#line 56 "root_numpy/src/converters.pyx"
  __pyx_v__dims = __pyx_v_dims;

  /* "root_numpy/src/converters.pyx":58
 *     cdef SIZE_t* _dims = dims
 *     cdef SIZE_t default_dims[1]
 *     if dims == NULL:             # <<<<<<<<<<<<<<
 *         _dims = default_dims
 *         _dims[0] = numele;
 */

#line 58 "root_numpy/src/converters.pyx"
  __pyx_t_1 = ((__pyx_v_dims == NULL) != 0);

#line 58 "root_numpy/src/converters.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/converters.pyx":59
 *     cdef SIZE_t default_dims[1]
 *     if dims == NULL:
 *         _dims = default_dims             # <<<<<<<<<<<<<<
 *         _dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(ndim, _dims, typecode, 0)
 */

#line 59 "root_numpy/src/converters.pyx"
    __pyx_v__dims = __pyx_v_default_dims;

    /* "root_numpy/src/converters.pyx":60
 *     if dims == NULL:
 *         _dims = default_dims
 *         _dims[0] = numele;             # <<<<<<<<<<<<<<
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(ndim, _dims, typecode, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 */

#line 60 "root_numpy/src/converters.pyx"
    (__pyx_v__dims[0]) = __pyx_v_numele;

    /* "root_numpy/src/converters.pyx":58
 *     cdef SIZE_t* _dims = dims
 *     cdef SIZE_t default_dims[1]
 *     if dims == NULL:             # <<<<<<<<<<<<<<
 *         _dims = default_dims
 *         _dims[0] = numele;
 */

#line 58 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":61
 *         _dims = default_dims
 *         _dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(ndim, _dims, typecode, 0)             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # incref since we are placing in buffer directly
 */

#line 61 "root_numpy/src/converters.pyx"
  __pyx_t_2 = PyArray_EMPTY(__pyx_v_ndim, __pyx_v__dims, __pyx_v_typecode, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 61, __pyx_L1_error)

#line 61 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 61 "root_numpy/src/converters.pyx"
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 61, __pyx_L1_error)

#line 61 "root_numpy/src/converters.pyx"
  __pyx_v_tmp = ((PyArrayObject *)__pyx_t_2);

#line 61 "root_numpy/src/converters.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/converters.pyx":62
 *         _dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(ndim, _dims, typecode, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref             # <<<<<<<<<<<<<<
 *     # incref since we are placing in buffer directly
 *     Py_INCREF(tmp)
 */

#line 62 "root_numpy/src/converters.pyx"
  __pyx_v_tmpobj = ((PyObject *)__pyx_v_tmp);

  /* "root_numpy/src/converters.pyx":64
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # incref since we are placing in buffer directly
 *     Py_INCREF(tmp)             # <<<<<<<<<<<<<<
 *     # copy to tmp.data
 *     cdef unsigned long nbytes = numele * elesize
 */

#line 64 "root_numpy/src/converters.pyx"
  Py_INCREF(((PyObject *)__pyx_v_tmp));

  /* "root_numpy/src/converters.pyx":66
 *     Py_INCREF(tmp)
 *     # copy to tmp.data
 *     cdef unsigned long nbytes = numele * elesize             # <<<<<<<<<<<<<<
 *     memcpy(tmp.data, src, nbytes)
 *     # now write PyObject* to buffer
 */

#line 66 "root_numpy/src/converters.pyx"
  __pyx_v_nbytes = (__pyx_v_numele * __pyx_v_elesize);

  /* "root_numpy/src/converters.pyx":67
 *     # copy to tmp.data
 *     cdef unsigned long nbytes = numele * elesize
 *     memcpy(tmp.data, src, nbytes)             # <<<<<<<<<<<<<<
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 */

#line 67 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_tmp->data, __pyx_v_src, __pyx_v_nbytes);

  /* "root_numpy/src/converters.pyx":69
 *     memcpy(tmp.data, src, nbytes)
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *     return sizeof(tmpobj)
 * 
 */

#line 69 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_tmpobj), (sizeof(PyObject *)));

  /* "root_numpy/src/converters.pyx":70
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 *     return sizeof(tmpobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 70 "root_numpy/src/converters.pyx"
  __pyx_r = (sizeof(__pyx_v_tmpobj));

#line 70 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":53
 * # given numelement and size of each element
 * # and write it to buffer
 * cdef inline int create_numpyarray(void* buffer, void* src, int typecode,             # <<<<<<<<<<<<<<
 *                                   unsigned long numele, int elesize,
 *                                   int ndim=1, SIZE_t* dims=NULL):
 */

#line 53 "root_numpy/src/converters.pyx"


#line 53 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 53 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 53 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 53 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.create_numpyarray", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 53 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 53 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 53 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);

#line 53 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 53 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 53 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":74
 * 
 * # special treatment for vector<bool>
 * cdef inline int create_numpyarray_vectorbool(void* buffer, vector[bool]* src):             # <<<<<<<<<<<<<<
 *     cdef unsigned long numele = src.size()
 *     cdef SIZE_t dims[1]
 */

#line 74 "root_numpy/src/converters.pyx"


#line 74 "root_numpy/src/converters.pyx"
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray_vectorbool(void *__pyx_v_buffer, std::vector<bool>  *__pyx_v_src) {
  unsigned long __pyx_v_numele
#line 74 "root_numpy/src/converters.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_dims[1]
#line 74 "root_numpy/src/converters.pyx"
;
  PyArrayObject *__pyx_v_tmp = 0
#line 74 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_tmpobj
#line 74 "root_numpy/src/converters.pyx"
;
  unsigned long __pyx_v_i
#line 74 "root_numpy/src/converters.pyx"
;

#line 74 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 74 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 74 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 74 "root_numpy/src/converters.pyx"
  unsigned long __pyx_t_2;

#line 74 "root_numpy/src/converters.pyx"
  unsigned long __pyx_t_3;

#line 74 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("create_numpyarray_vectorbool", 0);

  /* "root_numpy/src/converters.pyx":75
 * # special treatment for vector<bool>
 * cdef inline int create_numpyarray_vectorbool(void* buffer, vector[bool]* src):
 *     cdef unsigned long numele = src.size()             # <<<<<<<<<<<<<<
 *     cdef SIZE_t dims[1]
 *     dims[0] = numele;
 */

#line 75 "root_numpy/src/converters.pyx"
  __pyx_v_numele = __pyx_v_src->size();

  /* "root_numpy/src/converters.pyx":77
 *     cdef unsigned long numele = src.size()
 *     cdef SIZE_t dims[1]
 *     dims[0] = numele;             # <<<<<<<<<<<<<<
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_BOOL, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 */

#line 77 "root_numpy/src/converters.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/converters.pyx":78
 *     cdef SIZE_t dims[1]
 *     dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_BOOL, 0)             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # incref since we are placing in buffer directly
 */

#line 78 "root_numpy/src/converters.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, NPY_BOOL, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 78, __pyx_L1_error)

#line 78 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 78 "root_numpy/src/converters.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 78, __pyx_L1_error)

#line 78 "root_numpy/src/converters.pyx"
  __pyx_v_tmp = ((PyArrayObject *)__pyx_t_1);

#line 78 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":79
 *     dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_BOOL, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref             # <<<<<<<<<<<<<<
 *     # incref since we are placing in buffer directly
 *     Py_INCREF(tmp)
 */

#line 79 "root_numpy/src/converters.pyx"
  __pyx_v_tmpobj = ((PyObject *)__pyx_v_tmp);

  /* "root_numpy/src/converters.pyx":81
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # incref since we are placing in buffer directly
 *     Py_INCREF(tmp)             # <<<<<<<<<<<<<<
 *     # can't use memcpy here...
 *     cdef unsigned long i
 */

#line 81 "root_numpy/src/converters.pyx"
  Py_INCREF(((PyObject *)__pyx_v_tmp));

  /* "root_numpy/src/converters.pyx":84
 *     # can't use memcpy here...
 *     cdef unsigned long i
 *     for i in range(numele):             # <<<<<<<<<<<<<<
 *         tmp[i] = deref(src)[i]
 *     # now write PyObject* to buffer
 */

#line 84 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __pyx_v_numele;

#line 84 "root_numpy/src/converters.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 84 "root_numpy/src/converters.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "root_numpy/src/converters.pyx":85
 *     cdef unsigned long i
 *     for i in range(numele):
 *         tmp[i] = deref(src)[i]             # <<<<<<<<<<<<<<
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 */

#line 85 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_PyBool_FromLong(((*__pyx_v_src)[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 85, __pyx_L1_error)

#line 85 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 85 "root_numpy/src/converters.pyx"
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_tmp), __pyx_v_i, __pyx_t_1, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 1) < 0)) __PYX_ERR(1, 85, __pyx_L1_error)

#line 85 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 85 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":87
 *         tmp[i] = deref(src)[i]
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *     return sizeof(tmpobj)
 * 
 */

#line 87 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_tmpobj), (sizeof(PyObject *)));

  /* "root_numpy/src/converters.pyx":88
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 *     return sizeof(tmpobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 88 "root_numpy/src/converters.pyx"
  __pyx_r = (sizeof(__pyx_v_tmpobj));

#line 88 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":74
 * 
 * # special treatment for vector<bool>
 * cdef inline int create_numpyarray_vectorbool(void* buffer, vector[bool]* src):             # <<<<<<<<<<<<<<
 *     cdef unsigned long numele = src.size()
 *     cdef SIZE_t dims[1]
 */

#line 74 "root_numpy/src/converters.pyx"


#line 74 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 74 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 74 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 74 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.create_numpyarray_vectorbool", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 74 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 74 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 74 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);

#line 74 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 74 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 74 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":91
 * 
 * 
 * cdef inline int create_numpyarray_vectorstring(void* buffer, vector[string]* src):             # <<<<<<<<<<<<<<
 *     cdef unsigned long numele = src.size()
 *     cdef SIZE_t dims[1]
 */

#line 91 "root_numpy/src/converters.pyx"


#line 91 "root_numpy/src/converters.pyx"
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray_vectorstring(void *__pyx_v_buffer, std::vector<std::string>  *__pyx_v_src) {
  unsigned long __pyx_v_numele
#line 91 "root_numpy/src/converters.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_dims[1]
#line 91 "root_numpy/src/converters.pyx"
;
  int __pyx_v_objsize
#line 91 "root_numpy/src/converters.pyx"
;
  PyArrayObject *__pyx_v_tmp = 0
#line 91 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_tmpobj
#line 91 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_tmpstrobj
#line 91 "root_numpy/src/converters.pyx"
;
  char *__pyx_v_dataptr
#line 91 "root_numpy/src/converters.pyx"
;
  unsigned long __pyx_v_i
#line 91 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_py_bytes = NULL
#line 91 "root_numpy/src/converters.pyx"
;

#line 91 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 91 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 91 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 91 "root_numpy/src/converters.pyx"
  int __pyx_t_2;

#line 91 "root_numpy/src/converters.pyx"
  unsigned long __pyx_t_3;

#line 91 "root_numpy/src/converters.pyx"
  unsigned long __pyx_t_4;

#line 91 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 91 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("create_numpyarray_vectorstring", 0);

  /* "root_numpy/src/converters.pyx":92
 * 
 * cdef inline int create_numpyarray_vectorstring(void* buffer, vector[string]* src):
 *     cdef unsigned long numele = src.size()             # <<<<<<<<<<<<<<
 *     cdef SIZE_t dims[1]
 *     dims[0] = numele;
 */

#line 92 "root_numpy/src/converters.pyx"
  __pyx_v_numele = __pyx_v_src->size();

  /* "root_numpy/src/converters.pyx":94
 *     cdef unsigned long numele = src.size()
 *     cdef SIZE_t dims[1]
 *     dims[0] = numele;             # <<<<<<<<<<<<<<
 *     cdef int objsize = np.dtype('O').itemsize
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_OBJECT, 0)
 */

#line 94 "root_numpy/src/converters.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/converters.pyx":95
 *     cdef SIZE_t dims[1]
 *     dims[0] = numele;
 *     cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_OBJECT, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 */

#line 95 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 95, __pyx_L1_error)

#line 95 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 95 "root_numpy/src/converters.pyx"
  __pyx_t_2 = ((PyArray_Descr *)__pyx_t_1)->elsize;

#line 95 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 95 "root_numpy/src/converters.pyx"
  __pyx_v_objsize = __pyx_t_2;

  /* "root_numpy/src/converters.pyx":96
 *     dims[0] = numele;
 *     cdef int objsize = np.dtype('O').itemsize
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_OBJECT, 0)             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # incref since we are placing in buffer directly
 */

#line 96 "root_numpy/src/converters.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, NPY_OBJECT, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)

#line 96 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 96 "root_numpy/src/converters.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 96, __pyx_L1_error)

#line 96 "root_numpy/src/converters.pyx"
  __pyx_v_tmp = ((PyArrayObject *)__pyx_t_1);

#line 96 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":97
 *     cdef int objsize = np.dtype('O').itemsize
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_OBJECT, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref             # <<<<<<<<<<<<<<
 *     # incref since we are placing in buffer directly
 *     Py_INCREF(tmp)
 */

#line 97 "root_numpy/src/converters.pyx"
  __pyx_v_tmpobj = ((PyObject *)__pyx_v_tmp);

  /* "root_numpy/src/converters.pyx":99
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # incref since we are placing in buffer directly
 *     Py_INCREF(tmp)             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmpstrobj
 *     cdef char* dataptr = <char*> tmp.data
 */

#line 99 "root_numpy/src/converters.pyx"
  Py_INCREF(((PyObject *)__pyx_v_tmp));

  /* "root_numpy/src/converters.pyx":101
 *     Py_INCREF(tmp)
 *     cdef PyObject* tmpstrobj
 *     cdef char* dataptr = <char*> tmp.data             # <<<<<<<<<<<<<<
 *     # can't use memcpy here...
 *     cdef unsigned long i
 */

#line 101 "root_numpy/src/converters.pyx"
  __pyx_v_dataptr = ((char *)__pyx_v_tmp->data);

  /* "root_numpy/src/converters.pyx":104
 *     # can't use memcpy here...
 *     cdef unsigned long i
 *     for i in range(numele):             # <<<<<<<<<<<<<<
 *         py_bytes = str(deref(src)[i])
 *         Py_INCREF(py_bytes)
 */

#line 104 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __pyx_v_numele;

#line 104 "root_numpy/src/converters.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 104 "root_numpy/src/converters.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "root_numpy/src/converters.pyx":105
 *     cdef unsigned long i
 *     for i in range(numele):
 *         py_bytes = str(deref(src)[i])             # <<<<<<<<<<<<<<
 *         Py_INCREF(py_bytes)
 *         tmpstrobj = <PyObject*> py_bytes
 */

#line 105 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(((*__pyx_v_src)[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 105, __pyx_L1_error)

#line 105 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 105 "root_numpy/src/converters.pyx"
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 105, __pyx_L1_error)

#line 105 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 105 "root_numpy/src/converters.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 105 "root_numpy/src/converters.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);

#line 105 "root_numpy/src/converters.pyx"
    __pyx_t_1 = 0;

#line 105 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 105, __pyx_L1_error)

#line 105 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 105 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 105 "root_numpy/src/converters.pyx"
    __Pyx_XDECREF_SET(__pyx_v_py_bytes, __pyx_t_1);

#line 105 "root_numpy/src/converters.pyx"
    __pyx_t_1 = 0;

    /* "root_numpy/src/converters.pyx":106
 *     for i in range(numele):
 *         py_bytes = str(deref(src)[i])
 *         Py_INCREF(py_bytes)             # <<<<<<<<<<<<<<
 *         tmpstrobj = <PyObject*> py_bytes
 *         memcpy(&dataptr[i*objsize], &tmpstrobj, sizeof(PyObject*))
 */

#line 106 "root_numpy/src/converters.pyx"
    Py_INCREF(__pyx_v_py_bytes);

    /* "root_numpy/src/converters.pyx":107
 *         py_bytes = str(deref(src)[i])
 *         Py_INCREF(py_bytes)
 *         tmpstrobj = <PyObject*> py_bytes             # <<<<<<<<<<<<<<
 *         memcpy(&dataptr[i*objsize], &tmpstrobj, sizeof(PyObject*))
 *     # now write PyObject* to buffer
 */

#line 107 "root_numpy/src/converters.pyx"
    __pyx_v_tmpstrobj = ((PyObject *)__pyx_v_py_bytes);

    /* "root_numpy/src/converters.pyx":108
 *         Py_INCREF(py_bytes)
 *         tmpstrobj = <PyObject*> py_bytes
 *         memcpy(&dataptr[i*objsize], &tmpstrobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 */

#line 108 "root_numpy/src/converters.pyx"
    memcpy((&(__pyx_v_dataptr[(__pyx_v_i * __pyx_v_objsize)])), (&__pyx_v_tmpstrobj), (sizeof(PyObject *)));

#line 108 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":110
 *         memcpy(&dataptr[i*objsize], &tmpstrobj, sizeof(PyObject*))
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *     return sizeof(tmpobj)
 * 
 */

#line 110 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_tmpobj), (sizeof(PyObject *)));

  /* "root_numpy/src/converters.pyx":111
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 *     return sizeof(tmpobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 111 "root_numpy/src/converters.pyx"
  __pyx_r = (sizeof(__pyx_v_tmpobj));

#line 111 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":91
 * 
 * 
 * cdef inline int create_numpyarray_vectorstring(void* buffer, vector[string]* src):             # <<<<<<<<<<<<<<
 *     cdef unsigned long numele = src.size()
 *     cdef SIZE_t dims[1]
 */

#line 91 "root_numpy/src/converters.pyx"


#line 91 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 91 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 91 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 91 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 91 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.create_numpyarray_vectorstring", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 91 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 91 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 91 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);

#line 91 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_py_bytes);

#line 91 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 91 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 91 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":116
 * cdef cppclass Converter:
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 116 "root_numpy/src/converters.pyx"


#line 116 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_Converter::write(CYTHON_UNUSED Column *__pyx_v_col, CYTHON_UNUSED void *__pyx_v_buffer) {

#line 116 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 116 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 116 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

#line 116 "root_numpy/src/converters.pyx"


#line 116 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 116 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 116 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 116 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 116 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":119
 *         pass
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 119 "root_numpy/src/converters.pyx"


#line 119 "root_numpy/src/converters.pyx"
PyObject *__pyx_t_13_librootnumpy_Converter::get_nptype(void) {

#line 119 "root_numpy/src/converters.pyx"
  PyObject *__pyx_r = NULL;

#line 119 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 119 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_nptype", 0);

#line 119 "root_numpy/src/converters.pyx"


#line 119 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 119 "root_numpy/src/converters.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 119 "root_numpy/src/converters.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 119 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 119 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 119 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":128
 *     string nptype
 * 
 *     __init__(int size, string nptype, int nptypecode):             # <<<<<<<<<<<<<<
 *         this.size = size
 *         this.nptypecode = nptypecode
 */

#line 128 "root_numpy/src/converters.pyx"


#line 128 "root_numpy/src/converters.pyx"
 __pyx_t_13_librootnumpy_BasicConverter::__pyx_t_13_librootnumpy_BasicConverter(int __pyx_v_size, std::string __pyx_v_nptype, int __pyx_v_nptypecode) {

#line 128 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 128 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/converters.pyx":129
 * 
 *     __init__(int size, string nptype, int nptypecode):
 *         this.size = size             # <<<<<<<<<<<<<<
 *         this.nptypecode = nptypecode
 *         this.nptype = nptype
 */

#line 129 "root_numpy/src/converters.pyx"
  this->size = __pyx_v_size;

  /* "root_numpy/src/converters.pyx":130
 *     __init__(int size, string nptype, int nptypecode):
 *         this.size = size
 *         this.nptypecode = nptypecode             # <<<<<<<<<<<<<<
 *         this.nptype = nptype
 * 
 */

#line 130 "root_numpy/src/converters.pyx"
  this->nptypecode = __pyx_v_nptypecode;

  /* "root_numpy/src/converters.pyx":131
 *         this.size = size
 *         this.nptypecode = nptypecode
 *         this.nptype = nptype             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 131 "root_numpy/src/converters.pyx"
  this->nptype = __pyx_v_nptype;

  /* "root_numpy/src/converters.pyx":128
 *     string nptype
 * 
 *     __init__(int size, string nptype, int nptypecode):             # <<<<<<<<<<<<<<
 *         this.size = size
 *         this.nptypecode = nptypecode
 */

#line 128 "root_numpy/src/converters.pyx"


#line 128 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 128 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 128 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":133
 *         this.nptype = nptype
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)
 */

#line 133 "root_numpy/src/converters.pyx"


#line 133 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_BasicConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  void *__pyx_v_src
#line 133 "root_numpy/src/converters.pyx"
;

#line 133 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 133 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 133 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":134
 * 
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         memcpy(buffer, src, this.size)
 *         return this.size
 */

#line 134 "root_numpy/src/converters.pyx"
  __pyx_v_src = __pyx_v_col->GetValuePointer();

  /* "root_numpy/src/converters.pyx":135
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)             # <<<<<<<<<<<<<<
 *         return this.size
 * 
 */

#line 135 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_buffer, __pyx_v_src, this->size);

  /* "root_numpy/src/converters.pyx":136
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)
 *         return this.size             # <<<<<<<<<<<<<<
 * 
 *     object get_nptype():
 */

#line 136 "root_numpy/src/converters.pyx"
  __pyx_r = this->size;

#line 136 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":133
 *         this.nptype = nptype
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)
 */

#line 133 "root_numpy/src/converters.pyx"


#line 133 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 133 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 133 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 133 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 133 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":138
 *         return this.size
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.dtype(this.nptype)
 * 
 */

#line 138 "root_numpy/src/converters.pyx"


#line 138 "root_numpy/src/converters.pyx"
PyObject *__pyx_t_13_librootnumpy_BasicConverter::get_nptype(void) {

#line 138 "root_numpy/src/converters.pyx"
  PyObject *__pyx_r = NULL;

#line 138 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 138 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 138 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 138 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "root_numpy/src/converters.pyx":139
 * 
 *     object get_nptype():
 *         return np.dtype(this.nptype)             # <<<<<<<<<<<<<<
 * 
 *     int get_nptypecode():
 */

#line 139 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 139 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(this->nptype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 139, __pyx_L1_error)

#line 139 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 139 "root_numpy/src/converters.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 139, __pyx_L1_error)

#line 139 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 139 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 139 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 139 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

#line 139 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 139, __pyx_L1_error)

#line 139 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 139 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 139 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_t_1;

#line 139 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

#line 139 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":138
 *         return this.size
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.dtype(this.nptype)
 * 
 */

#line 138 "root_numpy/src/converters.pyx"


#line 138 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 138 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 138 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 138 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 138 "root_numpy/src/converters.pyx"
  __Pyx_AddTraceback("BasicConverter.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 138 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 138 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 138 "root_numpy/src/converters.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 138 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 138 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 138 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":141
 *         return np.dtype(this.nptype)
 * 
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.nptypecode
 * 
 */

#line 141 "root_numpy/src/converters.pyx"


#line 141 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_BasicConverter::get_nptypecode(void) {

#line 141 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 141 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 141 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "root_numpy/src/converters.pyx":142
 * 
 *     int get_nptypecode():
 *         return this.nptypecode             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 142 "root_numpy/src/converters.pyx"
  __pyx_r = this->nptypecode;

#line 142 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":141
 *         return np.dtype(this.nptype)
 * 
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.nptypecode
 * 
 */

#line 141 "root_numpy/src/converters.pyx"


#line 141 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 141 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 141 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 141 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 141 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":147
 * cdef cppclass ObjectConverterBase(Converter):
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.object
 * 
 */

#line 147 "root_numpy/src/converters.pyx"


#line 147 "root_numpy/src/converters.pyx"
PyObject *__pyx_t_13_librootnumpy_ObjectConverterBase::get_nptype(void) {

#line 147 "root_numpy/src/converters.pyx"
  PyObject *__pyx_r = NULL;

#line 147 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 147 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 147 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 147 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "root_numpy/src/converters.pyx":148
 * 
 *     object get_nptype():
 *         return np.object             # <<<<<<<<<<<<<<
 * 
 *     object get_nptypecode():
 */

#line 148 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 148 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 148, __pyx_L1_error)

#line 148 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 148 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 148, __pyx_L1_error)

#line 148 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 148 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 148 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_t_2;

#line 148 "root_numpy/src/converters.pyx"
  __pyx_t_2 = 0;

#line 148 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":147
 * cdef cppclass ObjectConverterBase(Converter):
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.object
 * 
 */

#line 147 "root_numpy/src/converters.pyx"


#line 147 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 147 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 147 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 147 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 147 "root_numpy/src/converters.pyx"
  __Pyx_AddTraceback("ObjectConverterBase.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 147 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 147 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 147 "root_numpy/src/converters.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 147 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 147 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 147 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":150
 *         return np.object
 * 
 *     object get_nptypecode():             # <<<<<<<<<<<<<<
 *         return np.NPY_OBJECT
 * 
 */

#line 150 "root_numpy/src/converters.pyx"


#line 150 "root_numpy/src/converters.pyx"
PyObject *__pyx_t_13_librootnumpy_ObjectConverterBase::get_nptypecode(void) {

#line 150 "root_numpy/src/converters.pyx"
  PyObject *__pyx_r = NULL;

#line 150 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 150 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 150 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "root_numpy/src/converters.pyx":151
 * 
 *     object get_nptypecode():
 *         return np.NPY_OBJECT             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 151 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 151 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)

#line 151 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 151 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_t_1;

#line 151 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

#line 151 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":150
 *         return np.object
 * 
 *     object get_nptypecode():             # <<<<<<<<<<<<<<
 *         return np.NPY_OBJECT
 * 
 */

#line 150 "root_numpy/src/converters.pyx"


#line 150 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 150 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 150 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 150 "root_numpy/src/converters.pyx"
  __Pyx_AddTraceback("ObjectConverterBase.get_nptypecode", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 150 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 150 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 150 "root_numpy/src/converters.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 150 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 150 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 150 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":161
 *     int elesize
 * 
 *     __init__(BasicConverter* conv, int ndim, SIZE_t* dims):             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.dims = dims
 */

#line 161 "root_numpy/src/converters.pyx"


#line 161 "root_numpy/src/converters.pyx"
 __pyx_t_13_librootnumpy_VaryArrayConverter::__pyx_t_13_librootnumpy_VaryArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *__pyx_v_conv, int __pyx_v_ndim, __pyx_t_13_librootnumpy_SIZE_t *__pyx_v_dims) {

#line 161 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 161 "root_numpy/src/converters.pyx"
  int __pyx_t_1;

#line 161 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/converters.pyx":162
 * 
 *     __init__(BasicConverter* conv, int ndim, SIZE_t* dims):
 *         this.conv = conv             # <<<<<<<<<<<<<<
 *         this.dims = dims
 *         this.ndim = ndim
 */

#line 162 "root_numpy/src/converters.pyx"
  this->conv = __pyx_v_conv;

  /* "root_numpy/src/converters.pyx":163
 *     __init__(BasicConverter* conv, int ndim, SIZE_t* dims):
 *         this.conv = conv
 *         this.dims = dims             # <<<<<<<<<<<<<<
 *         this.ndim = ndim
 *         this.typecode = conv.get_nptypecode()
 */

#line 163 "root_numpy/src/converters.pyx"
  this->dims = __pyx_v_dims;

  /* "root_numpy/src/converters.pyx":164
 *         this.conv = conv
 *         this.dims = dims
 *         this.ndim = ndim             # <<<<<<<<<<<<<<
 *         this.typecode = conv.get_nptypecode()
 *         this.elesize = conv.size
 */

#line 164 "root_numpy/src/converters.pyx"
  this->ndim = __pyx_v_ndim;

  /* "root_numpy/src/converters.pyx":165
 *         this.dims = dims
 *         this.ndim = ndim
 *         this.typecode = conv.get_nptypecode()             # <<<<<<<<<<<<<<
 *         this.elesize = conv.size
 * 
 */

#line 165 "root_numpy/src/converters.pyx"
  this->typecode = __pyx_v_conv->get_nptypecode();

  /* "root_numpy/src/converters.pyx":166
 *         this.ndim = ndim
 *         this.typecode = conv.get_nptypecode()
 *         this.elesize = conv.size             # <<<<<<<<<<<<<<
 * 
 *     __dealloc__():
 */

#line 166 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __pyx_v_conv->size;

#line 166 "root_numpy/src/converters.pyx"
  this->elesize = __pyx_t_1;

  /* "root_numpy/src/converters.pyx":161
 *     int elesize
 * 
 *     __init__(BasicConverter* conv, int ndim, SIZE_t* dims):             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.dims = dims
 */

#line 161 "root_numpy/src/converters.pyx"


#line 161 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 161 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 161 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":168
 *         this.elesize = conv.size
 * 
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         free(this.dims)
 * 
 */

#line 168 "root_numpy/src/converters.pyx"


#line 168 "root_numpy/src/converters.pyx"
 __pyx_t_13_librootnumpy_VaryArrayConverter::~__pyx_t_13_librootnumpy_VaryArrayConverter(void) {

#line 168 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 168 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("<del>", 0);

  /* "root_numpy/src/converters.pyx":169
 * 
 *     __dealloc__():
 *         free(this.dims)             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 169 "root_numpy/src/converters.pyx"
  free(this->dims);

  /* "root_numpy/src/converters.pyx":168
 *         this.elesize = conv.size
 * 
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         free(this.dims)
 * 
 */

#line 168 "root_numpy/src/converters.pyx"


#line 168 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 168 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 168 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":171
 *         free(this.dims)
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         # only the first dimension can vary in length
 *         this.dims[0] = col.GetCountLen()
 */

#line 171 "root_numpy/src/converters.pyx"


#line 171 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_VaryArrayConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {

#line 171 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 171 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 171 "root_numpy/src/converters.pyx"
  int __pyx_t_1;

#line 171 "root_numpy/src/converters.pyx"
  struct __pyx_opt_args_13_librootnumpy_create_numpyarray __pyx_t_2;

#line 171 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":173
 *     int write(Column* col, void* buffer):
 *         # only the first dimension can vary in length
 *         this.dims[0] = col.GetCountLen()             # <<<<<<<<<<<<<<
 *         return create_numpyarray(buffer, col.GetValuePointer(),
 *                                  this.typecode, col.GetLen(), this.elesize,
 */

#line 173 "root_numpy/src/converters.pyx"
  (this->dims[0]) = __pyx_v_col->GetCountLen();

  /* "root_numpy/src/converters.pyx":174
 *         # only the first dimension can vary in length
 *         this.dims[0] = col.GetCountLen()
 *         return create_numpyarray(buffer, col.GetValuePointer(),             # <<<<<<<<<<<<<<
 *                                  this.typecode, col.GetLen(), this.elesize,
 *                                  this.ndim, this.dims)
 */

#line 174 "root_numpy/src/converters.pyx"
  __pyx_t_2.__pyx_n = 2;

#line 174 "root_numpy/src/converters.pyx"
  __pyx_t_2.ndim = this->ndim;

#line 174 "root_numpy/src/converters.pyx"
  __pyx_t_2.dims = this->dims;

#line 174 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __pyx_f_13_librootnumpy_create_numpyarray(__pyx_v_buffer, __pyx_v_col->GetValuePointer(), this->typecode, __pyx_v_col->GetLen(), this->elesize, &__pyx_t_2); 

#line 174 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_t_1;

#line 174 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":171
 *         free(this.dims)
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         # only the first dimension can vary in length
 *         this.dims[0] = col.GetCountLen()
 */

#line 171 "root_numpy/src/converters.pyx"


#line 171 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 171 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 171 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 171 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 171 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":183
 *     PyObject* shape
 * 
 *     __init__(BasicConverter* conv, PyObject* shape):             # <<<<<<<<<<<<<<
 *         Py_INCREF(<object> shape)
 *         this.conv = conv
 */

#line 183 "root_numpy/src/converters.pyx"


#line 183 "root_numpy/src/converters.pyx"
 __pyx_t_13_librootnumpy_FixedArrayConverter::__pyx_t_13_librootnumpy_FixedArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *__pyx_v_conv, PyObject *__pyx_v_shape) {

#line 183 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 183 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/converters.pyx":184
 * 
 *     __init__(BasicConverter* conv, PyObject* shape):
 *         Py_INCREF(<object> shape)             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.shape = shape
 */

#line 184 "root_numpy/src/converters.pyx"
  Py_INCREF(((PyObject *)__pyx_v_shape));

  /* "root_numpy/src/converters.pyx":185
 *     __init__(BasicConverter* conv, PyObject* shape):
 *         Py_INCREF(<object> shape)
 *         this.conv = conv             # <<<<<<<<<<<<<<
 *         this.shape = shape
 * 
 */

#line 185 "root_numpy/src/converters.pyx"
  this->conv = __pyx_v_conv;

  /* "root_numpy/src/converters.pyx":186
 *         Py_INCREF(<object> shape)
 *         this.conv = conv
 *         this.shape = shape             # <<<<<<<<<<<<<<
 * 
 *     __dealloc__():
 */

#line 186 "root_numpy/src/converters.pyx"
  this->shape = __pyx_v_shape;

  /* "root_numpy/src/converters.pyx":183
 *     PyObject* shape
 * 
 *     __init__(BasicConverter* conv, PyObject* shape):             # <<<<<<<<<<<<<<
 *         Py_INCREF(<object> shape)
 *         this.conv = conv
 */

#line 183 "root_numpy/src/converters.pyx"


#line 183 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 183 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 183 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":188
 *         this.shape = shape
 * 
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         Py_XDECREF(this.shape)
 * 
 */

#line 188 "root_numpy/src/converters.pyx"


#line 188 "root_numpy/src/converters.pyx"
 __pyx_t_13_librootnumpy_FixedArrayConverter::~__pyx_t_13_librootnumpy_FixedArrayConverter(void) {

#line 188 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 188 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("<del>", 0);

  /* "root_numpy/src/converters.pyx":189
 * 
 *     __dealloc__():
 *         Py_XDECREF(this.shape)             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 189 "root_numpy/src/converters.pyx"
  Py_XDECREF(this->shape);

  /* "root_numpy/src/converters.pyx":188
 *         this.shape = shape
 * 
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         Py_XDECREF(this.shape)
 * 
 */

#line 188 "root_numpy/src/converters.pyx"


#line 188 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 188 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 188 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":191
 *         Py_XDECREF(this.shape)
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef int nbytes = col.GetSize()
 *         memcpy(buffer, col.GetValuePointer(), nbytes)
 */

#line 191 "root_numpy/src/converters.pyx"


#line 191 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_FixedArrayConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  int __pyx_v_nbytes
#line 191 "root_numpy/src/converters.pyx"
;

#line 191 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 191 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 191 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":192
 * 
 *     int write(Column* col, void* buffer):
 *         cdef int nbytes = col.GetSize()             # <<<<<<<<<<<<<<
 *         memcpy(buffer, col.GetValuePointer(), nbytes)
 *         return nbytes
 */

#line 192 "root_numpy/src/converters.pyx"
  __pyx_v_nbytes = __pyx_v_col->GetSize();

  /* "root_numpy/src/converters.pyx":193
 *     int write(Column* col, void* buffer):
 *         cdef int nbytes = col.GetSize()
 *         memcpy(buffer, col.GetValuePointer(), nbytes)             # <<<<<<<<<<<<<<
 *         return nbytes
 * 
 */

#line 193 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_buffer, __pyx_v_col->GetValuePointer(), __pyx_v_nbytes);

  /* "root_numpy/src/converters.pyx":194
 *         cdef int nbytes = col.GetSize()
 *         memcpy(buffer, col.GetValuePointer(), nbytes)
 *         return nbytes             # <<<<<<<<<<<<<<
 * 
 *     object get_nptype():
 */

#line 194 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_v_nbytes;

#line 194 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":191
 *         Py_XDECREF(this.shape)
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef int nbytes = col.GetSize()
 *         memcpy(buffer, col.GetValuePointer(), nbytes)
 */

#line 191 "root_numpy/src/converters.pyx"


#line 191 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 191 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 191 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 191 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 191 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":196
 *         return nbytes
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return (np.dtype(this.conv.nptype), <object> this.shape)
 * 
 */

#line 196 "root_numpy/src/converters.pyx"


#line 196 "root_numpy/src/converters.pyx"
PyObject *__pyx_t_13_librootnumpy_FixedArrayConverter::get_nptype(void) {

#line 196 "root_numpy/src/converters.pyx"
  PyObject *__pyx_r = NULL;

#line 196 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 196 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 196 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 196 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "root_numpy/src/converters.pyx":197
 * 
 *     object get_nptype():
 *         return (np.dtype(this.conv.nptype), <object> this.shape)             # <<<<<<<<<<<<<<
 * 
 *     int get_nptypecode():
 */

#line 197 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 197 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(this->conv->nptype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 197, __pyx_L1_error)

#line 197 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 197 "root_numpy/src/converters.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 197, __pyx_L1_error)

#line 197 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 197 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 197 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 197 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

#line 197 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 197, __pyx_L1_error)

#line 197 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 197 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 197 "root_numpy/src/converters.pyx"
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 197, __pyx_L1_error)

#line 197 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 197 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 197 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 197 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(((PyObject *)this->shape));

#line 197 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(((PyObject *)this->shape));

#line 197 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)this->shape));

#line 197 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

#line 197 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_t_2;

#line 197 "root_numpy/src/converters.pyx"
  __pyx_t_2 = 0;

#line 197 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":196
 *         return nbytes
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return (np.dtype(this.conv.nptype), <object> this.shape)
 * 
 */

#line 196 "root_numpy/src/converters.pyx"


#line 196 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 196 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 196 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 196 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 196 "root_numpy/src/converters.pyx"
  __Pyx_AddTraceback("FixedArrayConverter.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 196 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 196 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 196 "root_numpy/src/converters.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 196 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 196 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 196 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":199
 *         return (np.dtype(this.conv.nptype), <object> this.shape)
 * 
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.conv.nptypecode
 * 
 */

#line 199 "root_numpy/src/converters.pyx"


#line 199 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_FixedArrayConverter::get_nptypecode(void) {

#line 199 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 199 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 199 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "root_numpy/src/converters.pyx":200
 * 
 *     int get_nptypecode():
 *         return this.conv.nptypecode             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 200 "root_numpy/src/converters.pyx"
  __pyx_r = this->conv->nptypecode;

#line 200 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":199
 *         return (np.dtype(this.conv.nptype), <object> this.shape)
 * 
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.conv.nptypecode
 * 
 */

#line 199 "root_numpy/src/converters.pyx"


#line 199 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 199 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 199 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 199 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 199 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":207
 *     int size
 * 
 *     __init__(int size):             # <<<<<<<<<<<<<<
 *         this.conv = <BasicConverter*> CONVERTERS['char']
 *         this.size = size
 */

#line 207 "root_numpy/src/converters.pyx"


#line 207 "root_numpy/src/converters.pyx"
 __pyx_t_13_librootnumpy_CharArrayConverter::__pyx_t_13_librootnumpy_CharArrayConverter(int __pyx_v_size) {

#line 207 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 207 "root_numpy/src/converters.pyx"
  std::string __pyx_t_1;

#line 207 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/converters.pyx":208
 * 
 *     __init__(int size):
 *         this.conv = <BasicConverter*> CONVERTERS['char']             # <<<<<<<<<<<<<<
 *         this.size = size
 * 
 */

#line 208 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_char); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 208, __pyx_L1_error)

#line 208 "root_numpy/src/converters.pyx"
  this->conv = ((__pyx_t_13_librootnumpy_BasicConverter *)(__pyx_v_13_librootnumpy_CONVERTERS[__pyx_t_1]));

  /* "root_numpy/src/converters.pyx":209
 *     __init__(int size):
 *         this.conv = <BasicConverter*> CONVERTERS['char']
 *         this.size = size             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 209 "root_numpy/src/converters.pyx"
  this->size = __pyx_v_size;

  /* "root_numpy/src/converters.pyx":207
 *     int size
 * 
 *     __init__(int size):             # <<<<<<<<<<<<<<
 *         this.conv = <BasicConverter*> CONVERTERS['char']
 *         this.size = size
 */

#line 207 "root_numpy/src/converters.pyx"


#line 207 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 207 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

#line 207 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 207 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("CharArrayConverter.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 207 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 207 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 207 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":211
 *         this.size = size
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef int nbytes = col.GetSize() - sizeof(char)  # exclude null-termination
 *         cdef int length = strlen(<char*> col.GetValuePointer())
 */

#line 211 "root_numpy/src/converters.pyx"


#line 211 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_CharArrayConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  int __pyx_v_nbytes
#line 211 "root_numpy/src/converters.pyx"
;
  int __pyx_v_length
#line 211 "root_numpy/src/converters.pyx"
;

#line 211 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 211 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 211 "root_numpy/src/converters.pyx"
  int __pyx_t_1;

#line 211 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":212
 * 
 *     int write(Column* col, void* buffer):
 *         cdef int nbytes = col.GetSize() - sizeof(char)  # exclude null-termination             # <<<<<<<<<<<<<<
 *         cdef int length = strlen(<char*> col.GetValuePointer())
 *         memcpy(buffer, col.GetValuePointer(), nbytes)
 */

#line 212 "root_numpy/src/converters.pyx"
  __pyx_v_nbytes = (__pyx_v_col->GetSize() - (sizeof(char)));

  /* "root_numpy/src/converters.pyx":213
 *     int write(Column* col, void* buffer):
 *         cdef int nbytes = col.GetSize() - sizeof(char)  # exclude null-termination
 *         cdef int length = strlen(<char*> col.GetValuePointer())             # <<<<<<<<<<<<<<
 *         memcpy(buffer, col.GetValuePointer(), nbytes)
 *         if length < nbytes:
 */

#line 213 "root_numpy/src/converters.pyx"
  __pyx_v_length = strlen(((char *)__pyx_v_col->GetValuePointer()));

  /* "root_numpy/src/converters.pyx":214
 *         cdef int nbytes = col.GetSize() - sizeof(char)  # exclude null-termination
 *         cdef int length = strlen(<char*> col.GetValuePointer())
 *         memcpy(buffer, col.GetValuePointer(), nbytes)             # <<<<<<<<<<<<<<
 *         if length < nbytes:
 *             memset((<char*> buffer) + length, '\0', nbytes - length)
 */

#line 214 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_buffer, __pyx_v_col->GetValuePointer(), __pyx_v_nbytes);

  /* "root_numpy/src/converters.pyx":215
 *         cdef int length = strlen(<char*> col.GetValuePointer())
 *         memcpy(buffer, col.GetValuePointer(), nbytes)
 *         if length < nbytes:             # <<<<<<<<<<<<<<
 *             memset((<char*> buffer) + length, '\0', nbytes - length)
 *         return nbytes
 */

#line 215 "root_numpy/src/converters.pyx"
  __pyx_t_1 = ((__pyx_v_length < __pyx_v_nbytes) != 0);

#line 215 "root_numpy/src/converters.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/converters.pyx":216
 *         memcpy(buffer, col.GetValuePointer(), nbytes)
 *         if length < nbytes:
 *             memset((<char*> buffer) + length, '\0', nbytes - length)             # <<<<<<<<<<<<<<
 *         return nbytes
 * 
 */

#line 216 "root_numpy/src/converters.pyx"
    memset((((char *)__pyx_v_buffer) + __pyx_v_length), '\x00', (__pyx_v_nbytes - __pyx_v_length));

    /* "root_numpy/src/converters.pyx":215
 *         cdef int length = strlen(<char*> col.GetValuePointer())
 *         memcpy(buffer, col.GetValuePointer(), nbytes)
 *         if length < nbytes:             # <<<<<<<<<<<<<<
 *             memset((<char*> buffer) + length, '\0', nbytes - length)
 *         return nbytes
 */

#line 215 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":217
 *         if length < nbytes:
 *             memset((<char*> buffer) + length, '\0', nbytes - length)
 *         return nbytes             # <<<<<<<<<<<<<<
 * 
 *     object get_nptype():
 */

#line 217 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_v_nbytes;

#line 217 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":211
 *         this.size = size
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef int nbytes = col.GetSize() - sizeof(char)  # exclude null-termination
 *         cdef int length = strlen(<char*> col.GetValuePointer())
 */

#line 211 "root_numpy/src/converters.pyx"


#line 211 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 211 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 211 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 211 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 211 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":219
 *         return nbytes
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return 'S{0:d}'.format(this.size)
 * 
 */

#line 219 "root_numpy/src/converters.pyx"


#line 219 "root_numpy/src/converters.pyx"
PyObject *__pyx_t_13_librootnumpy_CharArrayConverter::get_nptype(void) {

#line 219 "root_numpy/src/converters.pyx"
  PyObject *__pyx_r = NULL;

#line 219 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 219 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 219 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 219 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 219 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 219 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 219 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "root_numpy/src/converters.pyx":220
 * 
 *     object get_nptype():
 *         return 'S{0:d}'.format(this.size)             # <<<<<<<<<<<<<<
 * 
 *     int get_nptypecode():
 */

#line 220 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 220 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_S_0_d, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 220, __pyx_L1_error)

#line 220 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 220 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __Pyx_PyInt_From_int(this->size); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 220, __pyx_L1_error)

#line 220 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 220 "root_numpy/src/converters.pyx"
  __pyx_t_4 = NULL;

#line 220 "root_numpy/src/converters.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {

#line 220 "root_numpy/src/converters.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);

#line 220 "root_numpy/src/converters.pyx"
    if (likely(__pyx_t_4)) {

#line 220 "root_numpy/src/converters.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 220 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 220 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(function);

#line 220 "root_numpy/src/converters.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 220 "root_numpy/src/converters.pyx"
    }

#line 220 "root_numpy/src/converters.pyx"
  }

#line 220 "root_numpy/src/converters.pyx"
  if (!__pyx_t_4) {

#line 220 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 220, __pyx_L1_error)

#line 220 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 220 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 220 "root_numpy/src/converters.pyx"
  } else {

#line 220 "root_numpy/src/converters.pyx"
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 220, __pyx_L1_error)

#line 220 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 220 "root_numpy/src/converters.pyx"
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 220 "root_numpy/src/converters.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 220 "root_numpy/src/converters.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);

#line 220 "root_numpy/src/converters.pyx"
    __pyx_t_3 = 0;

#line 220 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 220, __pyx_L1_error)

#line 220 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 220 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 220 "root_numpy/src/converters.pyx"
  }

#line 220 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 220 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_t_1;

#line 220 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

#line 220 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":219
 *         return nbytes
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return 'S{0:d}'.format(this.size)
 * 
 */

#line 219 "root_numpy/src/converters.pyx"


#line 219 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 219 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 219 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 219 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 219 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 219 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 219 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 219 "root_numpy/src/converters.pyx"
  __Pyx_AddTraceback("CharArrayConverter.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 219 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 219 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 219 "root_numpy/src/converters.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 219 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 219 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 219 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":222
 *         return 'S{0:d}'.format(this.size)
 * 
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.conv.nptypecode
 * 
 */

#line 222 "root_numpy/src/converters.pyx"


#line 222 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_CharArrayConverter::get_nptypecode(void) {

#line 222 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 222 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 222 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "root_numpy/src/converters.pyx":223
 * 
 *     int get_nptypecode():
 *         return this.conv.nptypecode             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 223 "root_numpy/src/converters.pyx"
  __pyx_r = this->conv->nptypecode;

#line 223 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":222
 *         return 'S{0:d}'.format(this.size)
 * 
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.conv.nptypecode
 * 
 */

#line 222 "root_numpy/src/converters.pyx"


#line 222 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 222 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 222 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 222 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 222 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":231
 *     Vector2Array[T] v2a
 * 
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

#line 231 "root_numpy/src/converters.pyx"


#line 231 "root_numpy/src/converters.pyx"
template <typename T>

#line 231 "root_numpy/src/converters.pyx"
 __pyx_t_13_librootnumpy_VectorConverter<T> ::__pyx_t_13_librootnumpy_VectorConverter(void) {
  TypeName<T>  __pyx_v_ast
#line 231 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_info = NULL
#line 231 "root_numpy/src/converters.pyx"
;

#line 231 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 231 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 231 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 231 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 231 "root_numpy/src/converters.pyx"
  int __pyx_t_4;

#line 231 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/converters.pyx":232
 * 
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()             # <<<<<<<<<<<<<<
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 */

#line 232 "root_numpy/src/converters.pyx"
  __pyx_v_ast = TypeName<T> ();

  /* "root_numpy/src/converters.pyx":233
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]             # <<<<<<<<<<<<<<
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]
 */

#line 233 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)

#line 233 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 233 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_ast.name); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 233, __pyx_L1_error)

#line 233 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 233 "root_numpy/src/converters.pyx"
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 233, __pyx_L1_error)

#line 233 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 233 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 233 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 233 "root_numpy/src/converters.pyx"
  __pyx_v_info = __pyx_t_3;

#line 233 "root_numpy/src/converters.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/converters.pyx":234
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize             # <<<<<<<<<<<<<<
 *         this.nptypecode = info[2]
 * 
 */

#line 234 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_info, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 234, __pyx_L1_error)

#line 234 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 234 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)

#line 234 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 234 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 234 "root_numpy/src/converters.pyx"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 234, __pyx_L1_error)

#line 234 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 234 "root_numpy/src/converters.pyx"
  this->elesize = __pyx_t_4;

  /* "root_numpy/src/converters.pyx":235
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 235 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_info, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 235, __pyx_L1_error)

#line 235 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 235 "root_numpy/src/converters.pyx"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 235, __pyx_L1_error)

#line 235 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 235 "root_numpy/src/converters.pyx"
  this->nptypecode = __pyx_t_4;

  /* "root_numpy/src/converters.pyx":231
 *     Vector2Array[T] v2a
 * 
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

#line 231 "root_numpy/src/converters.pyx"


#line 231 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 231 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

#line 231 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 231 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 231 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 231 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 231 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("VectorConverter.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 231 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 231 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_info);

#line 231 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 231 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":237
 *         this.nptypecode = info[2]
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()
 *         cdef unsigned long numele = tmp.size()
 */

#line 237 "root_numpy/src/converters.pyx"


#line 237 "root_numpy/src/converters.pyx"
template <typename T>

#line 237 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_VectorConverter<T> ::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<T>  *__pyx_v_tmp
#line 237 "root_numpy/src/converters.pyx"
;
  unsigned long __pyx_v_numele
#line 237 "root_numpy/src/converters.pyx"
;
  T *__pyx_v_fa
#line 237 "root_numpy/src/converters.pyx"
;

#line 237 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 237 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 237 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":238
 * 
 *     int write(Column* col, void* buffer):
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         cdef unsigned long numele = tmp.size()
 *         # check cython auto-generated code
 */

#line 238 "root_numpy/src/converters.pyx"
  __pyx_v_tmp = ((std::vector<T>  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/converters.pyx":239
 *     int write(Column* col, void* buffer):
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()
 *         cdef unsigned long numele = tmp.size()             # <<<<<<<<<<<<<<
 *         # check cython auto-generated code
 *         # if it really does &((*tmp)[0])
 */

#line 239 "root_numpy/src/converters.pyx"
  __pyx_v_numele = __pyx_v_tmp->size();

  /* "root_numpy/src/converters.pyx":242
 *         # check cython auto-generated code
 *         # if it really does &((*tmp)[0])
 *         cdef T* fa = this.v2a.convert(tmp)             # <<<<<<<<<<<<<<
 *         return create_numpyarray(buffer, fa, this.nptypecode, numele, this.elesize)
 * 
 */

#line 242 "root_numpy/src/converters.pyx"
  __pyx_v_fa = this->v2a.convert(__pyx_v_tmp);

  /* "root_numpy/src/converters.pyx":243
 *         # if it really does &((*tmp)[0])
 *         cdef T* fa = this.v2a.convert(tmp)
 *         return create_numpyarray(buffer, fa, this.nptypecode, numele, this.elesize)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 243 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_f_13_librootnumpy_create_numpyarray(__pyx_v_buffer, __pyx_v_fa, this->nptypecode, __pyx_v_numele, this->elesize, NULL);

#line 243 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":237
 *         this.nptypecode = info[2]
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()
 *         cdef unsigned long numele = tmp.size()
 */

#line 237 "root_numpy/src/converters.pyx"


#line 237 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 237 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 237 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 237 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 237 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":251
 *     Vector2Array[T] v2a
 * 
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

#line 251 "root_numpy/src/converters.pyx"


#line 251 "root_numpy/src/converters.pyx"
template <typename T>

#line 251 "root_numpy/src/converters.pyx"
 __pyx_t_13_librootnumpy_VectorVectorConverter<T> ::__pyx_t_13_librootnumpy_VectorVectorConverter(void) {
  TypeName<T>  __pyx_v_ast
#line 251 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_info = NULL
#line 251 "root_numpy/src/converters.pyx"
;

#line 251 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 251 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 251 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 251 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 251 "root_numpy/src/converters.pyx"
  int __pyx_t_4;

#line 251 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/converters.pyx":252
 * 
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()             # <<<<<<<<<<<<<<
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 */

#line 252 "root_numpy/src/converters.pyx"
  __pyx_v_ast = TypeName<T> ();

  /* "root_numpy/src/converters.pyx":253
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]             # <<<<<<<<<<<<<<
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]
 */

#line 253 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 253, __pyx_L1_error)

#line 253 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 253 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_ast.name); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 253, __pyx_L1_error)

#line 253 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 253 "root_numpy/src/converters.pyx"
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 253, __pyx_L1_error)

#line 253 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 253 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 253 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 253 "root_numpy/src/converters.pyx"
  __pyx_v_info = __pyx_t_3;

#line 253 "root_numpy/src/converters.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/converters.pyx":254
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize             # <<<<<<<<<<<<<<
 *         this.nptypecode = info[2]
 * 
 */

#line 254 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_info, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 254, __pyx_L1_error)

#line 254 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 254 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 254, __pyx_L1_error)

#line 254 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 254 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 254 "root_numpy/src/converters.pyx"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 254, __pyx_L1_error)

#line 254 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 254 "root_numpy/src/converters.pyx"
  this->elesize = __pyx_t_4;

  /* "root_numpy/src/converters.pyx":255
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 255 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_info, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 255, __pyx_L1_error)

#line 255 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 255 "root_numpy/src/converters.pyx"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 255, __pyx_L1_error)

#line 255 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 255 "root_numpy/src/converters.pyx"
  this->nptypecode = __pyx_t_4;

  /* "root_numpy/src/converters.pyx":251
 *     Vector2Array[T] v2a
 * 
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

#line 251 "root_numpy/src/converters.pyx"


#line 251 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 251 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

#line 251 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 251 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 251 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 251 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 251 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("VectorVectorConverter.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 251 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 251 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_info);

#line 251 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 251 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":257
 *         this.nptypecode = info[2]
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[T]]* tmp = <vector[vector[T]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 257 "root_numpy/src/converters.pyx"


#line 257 "root_numpy/src/converters.pyx"
template <typename T>

#line 257 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_VectorVectorConverter<T> ::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<std::vector<T> >  *__pyx_v_tmp
#line 257 "root_numpy/src/converters.pyx"
;
  unsigned long __pyx_v_numele
#line 257 "root_numpy/src/converters.pyx"
;
  T *__pyx_v_fa
#line 257 "root_numpy/src/converters.pyx"
;
  int __pyx_v_objsize
#line 257 "root_numpy/src/converters.pyx"
;
  int __pyx_v_objtypecode
#line 257 "root_numpy/src/converters.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_dims[1]
#line 257 "root_numpy/src/converters.pyx"
;
  PyArrayObject *__pyx_v_outer = 0
#line 257 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_outerobj
#line 257 "root_numpy/src/converters.pyx"
;
  char *__pyx_v_dataptr
#line 257 "root_numpy/src/converters.pyx"
;
  unsigned long __pyx_v_i
#line 257 "root_numpy/src/converters.pyx"
;

#line 257 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 257 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 257 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 257 "root_numpy/src/converters.pyx"
  int __pyx_t_2;

#line 257 "root_numpy/src/converters.pyx"
  unsigned long __pyx_t_3;

#line 257 "root_numpy/src/converters.pyx"
  unsigned long __pyx_t_4;

#line 257 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":258
 * 
 *     int write(Column* col, void* buffer):
 *         cdef vector[vector[T]]* tmp = <vector[vector[T]]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         # this will hold number of subvectors
 *         cdef unsigned long numele
 */

#line 258 "root_numpy/src/converters.pyx"
  __pyx_v_tmp = ((std::vector<std::vector<T> >  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/converters.pyx":263
 *         cdef T* fa
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 263 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 263, __pyx_L1_error)

#line 263 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 263 "root_numpy/src/converters.pyx"
  __pyx_t_2 = ((PyArray_Descr *)__pyx_t_1)->elsize;

#line 263 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 263 "root_numpy/src/converters.pyx"
  __pyx_v_objsize = __pyx_t_2;

  /* "root_numpy/src/converters.pyx":264
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT             # <<<<<<<<<<<<<<
 *         numele = tmp[0].size()
 *         # create an outer array container that dataptr points to,
 */

#line 264 "root_numpy/src/converters.pyx"
  __pyx_v_objtypecode = NPY_OBJECT;

  /* "root_numpy/src/converters.pyx":265
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()             # <<<<<<<<<<<<<<
 *         # create an outer array container that dataptr points to,
 *         # containing pointers from create_numpyarray().
 */

#line 265 "root_numpy/src/converters.pyx"
  __pyx_v_numele = (__pyx_v_tmp[0]).size();

  /* "root_numpy/src/converters.pyx":270
 *         # define an (numele)-dimensional outer array to hold our subvectors fa
 *         cdef SIZE_t dims[1]
 *         dims[0] = numele             # <<<<<<<<<<<<<<
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 */

#line 270 "root_numpy/src/converters.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/converters.pyx":271
 *         cdef SIZE_t dims[1]
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)             # <<<<<<<<<<<<<<
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 */

#line 271 "root_numpy/src/converters.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, __pyx_v_objtypecode, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 271, __pyx_L1_error)

#line 271 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 271 "root_numpy/src/converters.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 271, __pyx_L1_error)

#line 271 "root_numpy/src/converters.pyx"
  __pyx_v_outer = ((PyArrayObject *)__pyx_t_1);

#line 271 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":272
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref             # <<<<<<<<<<<<<<
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)
 */

#line 272 "root_numpy/src/converters.pyx"
  __pyx_v_outerobj = ((PyObject *)__pyx_v_outer);

  /* "root_numpy/src/converters.pyx":274
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)             # <<<<<<<<<<<<<<
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))
 */

#line 274 "root_numpy/src/converters.pyx"
  Py_INCREF(((PyObject *)__pyx_v_outer));

  /* "root_numpy/src/converters.pyx":276
 *         Py_INCREF(outer)
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 */

#line 276 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_outerobj), (sizeof(PyObject *)));

  /* "root_numpy/src/converters.pyx":279
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 *         cdef char* dataptr = <char*> outer.data             # <<<<<<<<<<<<<<
 *         # loop through all subvectors
 *         cdef unsigned long i
 */

#line 279 "root_numpy/src/converters.pyx"
  __pyx_v_dataptr = ((char *)__pyx_v_outer->data);

  /* "root_numpy/src/converters.pyx":282
 *         # loop through all subvectors
 *         cdef unsigned long i
 *         for i in range(numele):             # <<<<<<<<<<<<<<
 *             fa = this.v2a.convert(&tmp[0][i])
 *             create_numpyarray(&dataptr[i*objsize], fa, this.nptypecode,
 */

#line 282 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __pyx_v_numele;

#line 282 "root_numpy/src/converters.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 282 "root_numpy/src/converters.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "root_numpy/src/converters.pyx":283
 *         cdef unsigned long i
 *         for i in range(numele):
 *             fa = this.v2a.convert(&tmp[0][i])             # <<<<<<<<<<<<<<
 *             create_numpyarray(&dataptr[i*objsize], fa, this.nptypecode,
 *                               tmp[0][i].size(), this.elesize)
 */

#line 283 "root_numpy/src/converters.pyx"
    __pyx_v_fa = this->v2a.convert((&((__pyx_v_tmp[0])[__pyx_v_i])));

    /* "root_numpy/src/converters.pyx":284
 *         for i in range(numele):
 *             fa = this.v2a.convert(&tmp[0][i])
 *             create_numpyarray(&dataptr[i*objsize], fa, this.nptypecode,             # <<<<<<<<<<<<<<
 *                               tmp[0][i].size(), this.elesize)
 *         return sizeof(outerobj)
 */

#line 284 "root_numpy/src/converters.pyx"
    __pyx_f_13_librootnumpy_create_numpyarray((&(__pyx_v_dataptr[(__pyx_v_i * __pyx_v_objsize)])), __pyx_v_fa, this->nptypecode, ((__pyx_v_tmp[0])[__pyx_v_i]).size(), this->elesize, NULL);

#line 284 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":286
 *             create_numpyarray(&dataptr[i*objsize], fa, this.nptypecode,
 *                               tmp[0][i].size(), this.elesize)
 *         return sizeof(outerobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 286 "root_numpy/src/converters.pyx"
  __pyx_r = (sizeof(__pyx_v_outerobj));

#line 286 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":257
 *         this.nptypecode = info[2]
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[T]]* tmp = <vector[vector[T]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 257 "root_numpy/src/converters.pyx"


#line 257 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 257 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 257 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 257 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("VectorVectorConverter.write", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 257 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 257 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 257 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_outer);

#line 257 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 257 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 257 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":291
 * cdef cppclass VectorBoolConverter(ObjectConverterBase):
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()
 *         return create_numpyarray_vectorbool(buffer, tmp)
 */

#line 291 "root_numpy/src/converters.pyx"


#line 291 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_VectorBoolConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<bool>  *__pyx_v_tmp
#line 291 "root_numpy/src/converters.pyx"
;

#line 291 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 291 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 291 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":292
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         return create_numpyarray_vectorbool(buffer, tmp)
 * 
 */

#line 292 "root_numpy/src/converters.pyx"
  __pyx_v_tmp = ((std::vector<bool>  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/converters.pyx":293
 *     int write(Column* col, void* buffer):
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()
 *         return create_numpyarray_vectorbool(buffer, tmp)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 293 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_f_13_librootnumpy_create_numpyarray_vectorbool(__pyx_v_buffer, __pyx_v_tmp);

#line 293 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":291
 * cdef cppclass VectorBoolConverter(ObjectConverterBase):
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()
 *         return create_numpyarray_vectorbool(buffer, tmp)
 */

#line 291 "root_numpy/src/converters.pyx"


#line 291 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 291 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 291 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 291 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 291 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":298
 * cdef cppclass VectorVectorBoolConverter(ObjectConverterBase):
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[bool]]* tmp = <vector[vector[bool]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 298 "root_numpy/src/converters.pyx"


#line 298 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_VectorVectorBoolConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<std::vector<bool> >  *__pyx_v_tmp
#line 298 "root_numpy/src/converters.pyx"
;
  unsigned long __pyx_v_numele
#line 298 "root_numpy/src/converters.pyx"
;
  int __pyx_v_objsize
#line 298 "root_numpy/src/converters.pyx"
;
  int __pyx_v_objtypecode
#line 298 "root_numpy/src/converters.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_dims[1]
#line 298 "root_numpy/src/converters.pyx"
;
  PyArrayObject *__pyx_v_outer = 0
#line 298 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_outerobj
#line 298 "root_numpy/src/converters.pyx"
;
  char *__pyx_v_dataptr
#line 298 "root_numpy/src/converters.pyx"
;
  unsigned long __pyx_v_i
#line 298 "root_numpy/src/converters.pyx"
;

#line 298 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 298 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 298 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 298 "root_numpy/src/converters.pyx"
  int __pyx_t_2;

#line 298 "root_numpy/src/converters.pyx"
  unsigned long __pyx_t_3;

#line 298 "root_numpy/src/converters.pyx"
  unsigned long __pyx_t_4;

#line 298 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":299
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):
 *         cdef vector[vector[bool]]* tmp = <vector[vector[bool]]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         # this will hold number of subvectors
 *         cdef unsigned long numele
 */

#line 299 "root_numpy/src/converters.pyx"
  __pyx_v_tmp = ((std::vector<std::vector<bool> >  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/converters.pyx":303
 *         cdef unsigned long numele
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 303 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 303, __pyx_L1_error)

#line 303 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 303 "root_numpy/src/converters.pyx"
  __pyx_t_2 = ((PyArray_Descr *)__pyx_t_1)->elsize;

#line 303 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 303 "root_numpy/src/converters.pyx"
  __pyx_v_objsize = __pyx_t_2;

  /* "root_numpy/src/converters.pyx":304
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT             # <<<<<<<<<<<<<<
 *         numele = tmp[0].size()
 *         # create an outer array container that dataptr points to,
 */

#line 304 "root_numpy/src/converters.pyx"
  __pyx_v_objtypecode = NPY_OBJECT;

  /* "root_numpy/src/converters.pyx":305
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()             # <<<<<<<<<<<<<<
 *         # create an outer array container that dataptr points to,
 *         # containing pointers from create_numpyarray().
 */

#line 305 "root_numpy/src/converters.pyx"
  __pyx_v_numele = (__pyx_v_tmp[0]).size();

  /* "root_numpy/src/converters.pyx":310
 *         # define an (numele)-dimensional outer array to hold our subvectors fa
 *         cdef SIZE_t dims[1]
 *         dims[0] = numele             # <<<<<<<<<<<<<<
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 */

#line 310 "root_numpy/src/converters.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/converters.pyx":311
 *         cdef SIZE_t dims[1]
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)             # <<<<<<<<<<<<<<
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 */

#line 311 "root_numpy/src/converters.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, __pyx_v_objtypecode, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 311, __pyx_L1_error)

#line 311 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 311 "root_numpy/src/converters.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 311, __pyx_L1_error)

#line 311 "root_numpy/src/converters.pyx"
  __pyx_v_outer = ((PyArrayObject *)__pyx_t_1);

#line 311 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":312
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref             # <<<<<<<<<<<<<<
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)
 */

#line 312 "root_numpy/src/converters.pyx"
  __pyx_v_outerobj = ((PyObject *)__pyx_v_outer);

  /* "root_numpy/src/converters.pyx":314
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)             # <<<<<<<<<<<<<<
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))
 */

#line 314 "root_numpy/src/converters.pyx"
  Py_INCREF(((PyObject *)__pyx_v_outer));

  /* "root_numpy/src/converters.pyx":316
 *         Py_INCREF(outer)
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 */

#line 316 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_outerobj), (sizeof(PyObject *)));

  /* "root_numpy/src/converters.pyx":319
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 *         cdef char* dataptr = <char*> outer.data             # <<<<<<<<<<<<<<
 *         # loop through all subvectors
 *         cdef unsigned long i
 */

#line 319 "root_numpy/src/converters.pyx"
  __pyx_v_dataptr = ((char *)__pyx_v_outer->data);

  /* "root_numpy/src/converters.pyx":322
 *         # loop through all subvectors
 *         cdef unsigned long i
 *         for i in range(numele):             # <<<<<<<<<<<<<<
 *             create_numpyarray_vectorbool(&dataptr[i*objsize], &tmp[0][i])
 *         return sizeof(outerobj)
 */

#line 322 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __pyx_v_numele;

#line 322 "root_numpy/src/converters.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 322 "root_numpy/src/converters.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "root_numpy/src/converters.pyx":323
 *         cdef unsigned long i
 *         for i in range(numele):
 *             create_numpyarray_vectorbool(&dataptr[i*objsize], &tmp[0][i])             # <<<<<<<<<<<<<<
 *         return sizeof(outerobj)
 * 
 */

#line 323 "root_numpy/src/converters.pyx"
    __pyx_f_13_librootnumpy_create_numpyarray_vectorbool((&(__pyx_v_dataptr[(__pyx_v_i * __pyx_v_objsize)])), (&((__pyx_v_tmp[0])[__pyx_v_i])));

#line 323 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":324
 *         for i in range(numele):
 *             create_numpyarray_vectorbool(&dataptr[i*objsize], &tmp[0][i])
 *         return sizeof(outerobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 324 "root_numpy/src/converters.pyx"
  __pyx_r = (sizeof(__pyx_v_outerobj));

#line 324 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":298
 * cdef cppclass VectorVectorBoolConverter(ObjectConverterBase):
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[bool]]* tmp = <vector[vector[bool]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 298 "root_numpy/src/converters.pyx"


#line 298 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 298 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 298 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 298 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("VectorVectorBoolConverter.write", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 298 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 298 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 298 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_outer);

#line 298 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 298 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 298 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":328
 * 
 * cdef cppclass StringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef string* s = <string*> col.GetValuePointer()
 *         py_bytes = str(s[0])
 */

#line 328 "root_numpy/src/converters.pyx"


#line 328 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_StringConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::string *__pyx_v_s
#line 328 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_py_bytes = NULL
#line 328 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_tmpobj
#line 328 "root_numpy/src/converters.pyx"
;

#line 328 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 328 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 328 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 328 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 328 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":329
 * cdef cppclass StringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):
 *         cdef string* s = <string*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         py_bytes = str(s[0])
 *         cdef PyObject* tmpobj = <PyObject*> py_bytes # borrow ref
 */

#line 329 "root_numpy/src/converters.pyx"
  __pyx_v_s = ((std::string *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/converters.pyx":330
 *     int write(Column* col, void* buffer):
 *         cdef string* s = <string*> col.GetValuePointer()
 *         py_bytes = str(s[0])             # <<<<<<<<<<<<<<
 *         cdef PyObject* tmpobj = <PyObject*> py_bytes # borrow ref
 *         # increase one since we are putting in buffer directly
 */

#line 330 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_s[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 330, __pyx_L1_error)

#line 330 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 330 "root_numpy/src/converters.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 330, __pyx_L1_error)

#line 330 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 330 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 330 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 330 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

#line 330 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 330, __pyx_L1_error)

#line 330 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 330 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 330 "root_numpy/src/converters.pyx"
  __pyx_v_py_bytes = __pyx_t_1;

#line 330 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":331
 *         cdef string* s = <string*> col.GetValuePointer()
 *         py_bytes = str(s[0])
 *         cdef PyObject* tmpobj = <PyObject*> py_bytes # borrow ref             # <<<<<<<<<<<<<<
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(py_bytes)
 */

#line 331 "root_numpy/src/converters.pyx"
  __pyx_v_tmpobj = ((PyObject *)__pyx_v_py_bytes);

  /* "root_numpy/src/converters.pyx":333
 *         cdef PyObject* tmpobj = <PyObject*> py_bytes # borrow ref
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(py_bytes)             # <<<<<<<<<<<<<<
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &tmpobj, sizeof(PyObject*))
 */

#line 333 "root_numpy/src/converters.pyx"
  Py_INCREF(__pyx_v_py_bytes);

  /* "root_numpy/src/converters.pyx":335
 *         Py_INCREF(py_bytes)
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &tmpobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *         return sizeof(tmpobj)
 * 
 */

#line 335 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_tmpobj), (sizeof(PyObject *)));

  /* "root_numpy/src/converters.pyx":336
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &tmpobj, sizeof(PyObject*))
 *         return sizeof(tmpobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 336 "root_numpy/src/converters.pyx"
  __pyx_r = (sizeof(__pyx_v_tmpobj));

#line 336 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":328
 * 
 * cdef cppclass StringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef string* s = <string*> col.GetValuePointer()
 *         py_bytes = str(s[0])
 */

#line 328 "root_numpy/src/converters.pyx"


#line 328 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 328 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 328 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 328 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 328 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("StringConverter.write", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 328 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 328 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 328 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_py_bytes);

#line 328 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 328 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 328 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":340
 * 
 * cdef cppclass VectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[string]* tmp = <vector[string]*> col.GetValuePointer()
 *         return create_numpyarray_vectorstring(buffer, tmp)
 */

#line 340 "root_numpy/src/converters.pyx"


#line 340 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_VectorStringConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<std::string>  *__pyx_v_tmp
#line 340 "root_numpy/src/converters.pyx"
;

#line 340 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 340 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 340 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":341
 * cdef cppclass VectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):
 *         cdef vector[string]* tmp = <vector[string]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         return create_numpyarray_vectorstring(buffer, tmp)
 * 
 */

#line 341 "root_numpy/src/converters.pyx"
  __pyx_v_tmp = ((std::vector<std::string>  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/converters.pyx":342
 *     int write(Column* col, void* buffer):
 *         cdef vector[string]* tmp = <vector[string]*> col.GetValuePointer()
 *         return create_numpyarray_vectorstring(buffer, tmp)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 342 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_f_13_librootnumpy_create_numpyarray_vectorstring(__pyx_v_buffer, __pyx_v_tmp);

#line 342 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":340
 * 
 * cdef cppclass VectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[string]* tmp = <vector[string]*> col.GetValuePointer()
 *         return create_numpyarray_vectorstring(buffer, tmp)
 */

#line 340 "root_numpy/src/converters.pyx"


#line 340 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 340 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 340 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 340 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 340 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":346
 * 
 * cdef cppclass VectorVectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[string]]* tmp = <vector[vector[string]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 346 "root_numpy/src/converters.pyx"


#line 346 "root_numpy/src/converters.pyx"
int __pyx_t_13_librootnumpy_VectorVectorStringConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<std::vector<std::string> >  *__pyx_v_tmp
#line 346 "root_numpy/src/converters.pyx"
;
  unsigned long __pyx_v_numele
#line 346 "root_numpy/src/converters.pyx"
;
  int __pyx_v_objsize
#line 346 "root_numpy/src/converters.pyx"
;
  int __pyx_v_objtypecode
#line 346 "root_numpy/src/converters.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_dims[1]
#line 346 "root_numpy/src/converters.pyx"
;
  PyArrayObject *__pyx_v_outer = 0
#line 346 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_outerobj
#line 346 "root_numpy/src/converters.pyx"
;
  char *__pyx_v_dataptr
#line 346 "root_numpy/src/converters.pyx"
;
  unsigned long __pyx_v_i
#line 346 "root_numpy/src/converters.pyx"
;

#line 346 "root_numpy/src/converters.pyx"
  int __pyx_r;

#line 346 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 346 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 346 "root_numpy/src/converters.pyx"
  int __pyx_t_2;

#line 346 "root_numpy/src/converters.pyx"
  unsigned long __pyx_t_3;

#line 346 "root_numpy/src/converters.pyx"
  unsigned long __pyx_t_4;

#line 346 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/converters.pyx":347
 * cdef cppclass VectorVectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):
 *         cdef vector[vector[string]]* tmp = <vector[vector[string]]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         # this will hold number of subvectors
 *         cdef unsigned long numele
 */

#line 347 "root_numpy/src/converters.pyx"
  __pyx_v_tmp = ((std::vector<std::vector<std::string> >  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/converters.pyx":351
 *         cdef unsigned long numele
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 351 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 351, __pyx_L1_error)

#line 351 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 351 "root_numpy/src/converters.pyx"
  __pyx_t_2 = ((PyArray_Descr *)__pyx_t_1)->elsize;

#line 351 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 351 "root_numpy/src/converters.pyx"
  __pyx_v_objsize = __pyx_t_2;

  /* "root_numpy/src/converters.pyx":352
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT             # <<<<<<<<<<<<<<
 *         numele = tmp[0].size()
 *         # create an outer array container that dataptr points to,
 */

#line 352 "root_numpy/src/converters.pyx"
  __pyx_v_objtypecode = NPY_OBJECT;

  /* "root_numpy/src/converters.pyx":353
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()             # <<<<<<<<<<<<<<
 *         # create an outer array container that dataptr points to,
 *         # containing pointers from create_numpyarray().
 */

#line 353 "root_numpy/src/converters.pyx"
  __pyx_v_numele = (__pyx_v_tmp[0]).size();

  /* "root_numpy/src/converters.pyx":358
 *         # define an (numele)-dimensional outer array to hold our subvectors fa
 *         cdef SIZE_t dims[1]
 *         dims[0] = numele             # <<<<<<<<<<<<<<
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 */

#line 358 "root_numpy/src/converters.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/converters.pyx":359
 *         cdef SIZE_t dims[1]
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)             # <<<<<<<<<<<<<<
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 */

#line 359 "root_numpy/src/converters.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, __pyx_v_objtypecode, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 359, __pyx_L1_error)

#line 359 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 359 "root_numpy/src/converters.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 359, __pyx_L1_error)

#line 359 "root_numpy/src/converters.pyx"
  __pyx_v_outer = ((PyArrayObject *)__pyx_t_1);

#line 359 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":360
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref             # <<<<<<<<<<<<<<
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)
 */

#line 360 "root_numpy/src/converters.pyx"
  __pyx_v_outerobj = ((PyObject *)__pyx_v_outer);

  /* "root_numpy/src/converters.pyx":362
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)             # <<<<<<<<<<<<<<
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))
 */

#line 362 "root_numpy/src/converters.pyx"
  Py_INCREF(((PyObject *)__pyx_v_outer));

  /* "root_numpy/src/converters.pyx":364
 *         Py_INCREF(outer)
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 */

#line 364 "root_numpy/src/converters.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_outerobj), (sizeof(PyObject *)));

  /* "root_numpy/src/converters.pyx":367
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 *         cdef char* dataptr = <char*> outer.data             # <<<<<<<<<<<<<<
 *         # loop through all subvectors
 *         cdef unsigned long i
 */

#line 367 "root_numpy/src/converters.pyx"
  __pyx_v_dataptr = ((char *)__pyx_v_outer->data);

  /* "root_numpy/src/converters.pyx":370
 *         # loop through all subvectors
 *         cdef unsigned long i
 *         for i in range(numele):             # <<<<<<<<<<<<<<
 *             create_numpyarray_vectorstring(&dataptr[i*objsize], &tmp[0][i])
 *         return sizeof(outerobj)
 */

#line 370 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __pyx_v_numele;

#line 370 "root_numpy/src/converters.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 370 "root_numpy/src/converters.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "root_numpy/src/converters.pyx":371
 *         cdef unsigned long i
 *         for i in range(numele):
 *             create_numpyarray_vectorstring(&dataptr[i*objsize], &tmp[0][i])             # <<<<<<<<<<<<<<
 *         return sizeof(outerobj)
 * 
 */

#line 371 "root_numpy/src/converters.pyx"
    __pyx_f_13_librootnumpy_create_numpyarray_vectorstring((&(__pyx_v_dataptr[(__pyx_v_i * __pyx_v_objsize)])), (&((__pyx_v_tmp[0])[__pyx_v_i])));

#line 371 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":372
 *         for i in range(numele):
 *             create_numpyarray_vectorstring(&dataptr[i*objsize], &tmp[0][i])
 *         return sizeof(outerobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 372 "root_numpy/src/converters.pyx"
  __pyx_r = (sizeof(__pyx_v_outerobj));

#line 372 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":346
 * 
 * cdef cppclass VectorVectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[string]]* tmp = <vector[vector[string]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 346 "root_numpy/src/converters.pyx"


#line 346 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 346 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 346 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 346 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("VectorVectorStringConverter.write", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 346 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 346 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 346 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_outer);

#line 346 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 346 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 346 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":449
 * 
 * 
 * cdef Converter* find_converter_by_typename(string typename):             # <<<<<<<<<<<<<<
 *     it = CONVERTERS.find(typename)
 *     if it == CONVERTERS.end():
 */

#line 449 "root_numpy/src/converters.pyx"


#line 449 "root_numpy/src/converters.pyx"
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_find_converter_by_typename(std::string __pyx_v_typename) {
  std::map<std::string,__pyx_t_13_librootnumpy_Converter *> ::iterator __pyx_v_it
#line 449 "root_numpy/src/converters.pyx"
;

#line 449 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_Converter *__pyx_r;

#line 449 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 449 "root_numpy/src/converters.pyx"
  int __pyx_t_1;

#line 449 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("find_converter_by_typename", 0);

  /* "root_numpy/src/converters.pyx":450
 * 
 * cdef Converter* find_converter_by_typename(string typename):
 *     it = CONVERTERS.find(typename)             # <<<<<<<<<<<<<<
 *     if it == CONVERTERS.end():
 *         return NULL
 */

#line 450 "root_numpy/src/converters.pyx"
  __pyx_v_it = __pyx_v_13_librootnumpy_CONVERTERS.find(__pyx_v_typename);

  /* "root_numpy/src/converters.pyx":451
 * cdef Converter* find_converter_by_typename(string typename):
 *     it = CONVERTERS.find(typename)
 *     if it == CONVERTERS.end():             # <<<<<<<<<<<<<<
 *         return NULL
 *     return deref(it).second
 */

#line 451 "root_numpy/src/converters.pyx"
  __pyx_t_1 = ((__pyx_v_it == __pyx_v_13_librootnumpy_CONVERTERS.end()) != 0);

#line 451 "root_numpy/src/converters.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/converters.pyx":452
 *     it = CONVERTERS.find(typename)
 *     if it == CONVERTERS.end():
 *         return NULL             # <<<<<<<<<<<<<<
 *     return deref(it).second
 * 
 */

#line 452 "root_numpy/src/converters.pyx"
    __pyx_r = NULL;

#line 452 "root_numpy/src/converters.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/converters.pyx":451
 * cdef Converter* find_converter_by_typename(string typename):
 *     it = CONVERTERS.find(typename)
 *     if it == CONVERTERS.end():             # <<<<<<<<<<<<<<
 *         return NULL
 *     return deref(it).second
 */

#line 451 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":453
 *     if it == CONVERTERS.end():
 *         return NULL
 *     return deref(it).second             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 453 "root_numpy/src/converters.pyx"
  __pyx_r = (*__pyx_v_it).second;

#line 453 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":449
 * 
 * 
 * cdef Converter* find_converter_by_typename(string typename):             # <<<<<<<<<<<<<<
 *     it = CONVERTERS.find(typename)
 *     if it == CONVERTERS.end():
 */

#line 449 "root_numpy/src/converters.pyx"


#line 449 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 449 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 449 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 449 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 449 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":456
 * 
 * 
 * cdef Converter* get_array_converter(string typename, arraydef):             # <<<<<<<<<<<<<<
 *     # Determine shape ignoring possible variable first dimension
 *     arraytokens = arraydef.strip('[]')
 */

#line 456 "root_numpy/src/converters.pyx"


#line 456 "root_numpy/src/converters.pyx"
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_get_array_converter(std::string __pyx_v_typename, PyObject *__pyx_v_arraydef) {
  PyObject *__pyx_v_arraytokens = NULL
#line 456 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_shape = NULL
#line 456 "root_numpy/src/converters.pyx"
;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_conv
#line 456 "root_numpy/src/converters.pyx"
;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_basic_conv
#line 456 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_ndim = NULL
#line 456 "root_numpy/src/converters.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t *__pyx_v_dims
#line 456 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_idim = NULL
#line 456 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_token = NULL
#line 456 "root_numpy/src/converters.pyx"
;

#line 456 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_Converter *__pyx_r;

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 456 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 456 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 456 "root_numpy/src/converters.pyx"
  int __pyx_t_3;

#line 456 "root_numpy/src/converters.pyx"
  Py_ssize_t __pyx_t_4;

#line 456 "root_numpy/src/converters.pyx"
  PyObject *(*__pyx_t_5)(PyObject *);

#line 456 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 456 "root_numpy/src/converters.pyx"
  std::string __pyx_t_7;

#line 456 "root_numpy/src/converters.pyx"
  size_t __pyx_t_8;

#line 456 "root_numpy/src/converters.pyx"
  long __pyx_t_9;

#line 456 "root_numpy/src/converters.pyx"
  long __pyx_t_10;

#line 456 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_11;

#line 456 "root_numpy/src/converters.pyx"
  int __pyx_t_12;

#line 456 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_CONVERTERS_ITEM __pyx_t_13;

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_array_converter", 0);

  /* "root_numpy/src/converters.pyx":458
 * cdef Converter* get_array_converter(string typename, arraydef):
 *     # Determine shape ignoring possible variable first dimension
 *     arraytokens = arraydef.strip('[]')             # <<<<<<<<<<<<<<
 *     if arraytokens:
 *         arraytokens = arraytokens.split('][')
 */

#line 458 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arraydef, __pyx_n_s_strip); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 458, __pyx_L1_error)

#line 458 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 458 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 458, __pyx_L1_error)

#line 458 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 458 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 458 "root_numpy/src/converters.pyx"
  __pyx_v_arraytokens = __pyx_t_2;

#line 458 "root_numpy/src/converters.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/converters.pyx":459
 *     # Determine shape ignoring possible variable first dimension
 *     arraytokens = arraydef.strip('[]')
 *     if arraytokens:             # <<<<<<<<<<<<<<
 *         arraytokens = arraytokens.split('][')
 *     shape = tuple([int(token) for token in arraytokens])
 */

#line 459 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_arraytokens); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 459, __pyx_L1_error)

#line 459 "root_numpy/src/converters.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/converters.pyx":460
 *     arraytokens = arraydef.strip('[]')
 *     if arraytokens:
 *         arraytokens = arraytokens.split('][')             # <<<<<<<<<<<<<<
 *     shape = tuple([int(token) for token in arraytokens])
 * 
 */

#line 460 "root_numpy/src/converters.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_arraytokens, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 460, __pyx_L1_error)

#line 460 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 460 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 460, __pyx_L1_error)

#line 460 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 460 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 460 "root_numpy/src/converters.pyx"
    __Pyx_DECREF_SET(__pyx_v_arraytokens, __pyx_t_1);

#line 460 "root_numpy/src/converters.pyx"
    __pyx_t_1 = 0;

    /* "root_numpy/src/converters.pyx":459
 *     # Determine shape ignoring possible variable first dimension
 *     arraytokens = arraydef.strip('[]')
 *     if arraytokens:             # <<<<<<<<<<<<<<
 *         arraytokens = arraytokens.split('][')
 *     shape = tuple([int(token) for token in arraytokens])
 */

#line 459 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":461
 *     if arraytokens:
 *         arraytokens = arraytokens.split('][')
 *     shape = tuple([int(token) for token in arraytokens])             # <<<<<<<<<<<<<<
 * 
 *     # Variable-length array
 */

#line 461 "root_numpy/src/converters.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 461 "root_numpy/src/converters.pyx"
  if (likely(PyList_CheckExact(__pyx_v_arraytokens)) || PyTuple_CheckExact(__pyx_v_arraytokens)) {

#line 461 "root_numpy/src/converters.pyx"
    __pyx_t_2 = __pyx_v_arraytokens; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;

#line 461 "root_numpy/src/converters.pyx"
    __pyx_t_5 = NULL;

#line 461 "root_numpy/src/converters.pyx"
  } else {
    __pyx_t_4 = -1; 
#line 461 "root_numpy/src/converters.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_arraytokens); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 461 "root_numpy/src/converters.pyx"
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
  }

#line 461 "root_numpy/src/converters.pyx"
  for (;;) {

#line 461 "root_numpy/src/converters.pyx"
    if (likely(!__pyx_t_5)) {

#line 461 "root_numpy/src/converters.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 461 "root_numpy/src/converters.pyx"
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 461 "root_numpy/src/converters.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 461 "root_numpy/src/converters.pyx"
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
        #else

#line 461 "root_numpy/src/converters.pyx"
        __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 461 "root_numpy/src/converters.pyx"
        #endif

#line 461 "root_numpy/src/converters.pyx"
      } else {

#line 461 "root_numpy/src/converters.pyx"
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 461 "root_numpy/src/converters.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 461 "root_numpy/src/converters.pyx"
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
        #else

#line 461 "root_numpy/src/converters.pyx"
        __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 461 "root_numpy/src/converters.pyx"
        #endif

#line 461 "root_numpy/src/converters.pyx"
      }
    } else 
#line 461 "root_numpy/src/converters.pyx"
{

#line 461 "root_numpy/src/converters.pyx"
      __pyx_t_6 = __pyx_t_5(__pyx_t_2);

#line 461 "root_numpy/src/converters.pyx"
      if (unlikely(!__pyx_t_6)) {

#line 461 "root_numpy/src/converters.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 461 "root_numpy/src/converters.pyx"
        if (exc_type) {

#line 461 "root_numpy/src/converters.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 461 "root_numpy/src/converters.pyx"
          else __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
        }

#line 461 "root_numpy/src/converters.pyx"
        break;

#line 461 "root_numpy/src/converters.pyx"
      }

#line 461 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 461 "root_numpy/src/converters.pyx"
    }

#line 461 "root_numpy/src/converters.pyx"
    __Pyx_XDECREF_SET(__pyx_v_token, __pyx_t_6);

#line 461 "root_numpy/src/converters.pyx"
    __pyx_t_6 = 0;

#line 461 "root_numpy/src/converters.pyx"
    __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_v_token); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 461 "root_numpy/src/converters.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 461 "root_numpy/src/converters.pyx"
  }

#line 461 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 461 "root_numpy/src/converters.pyx"
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 461, __pyx_L1_error)

#line 461 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 461 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 461 "root_numpy/src/converters.pyx"
  __pyx_v_shape = ((PyObject*)__pyx_t_2);

#line 461 "root_numpy/src/converters.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/converters.pyx":464
 * 
 *     # Variable-length array
 *     if arraydef.startswith('[]'):             # <<<<<<<<<<<<<<
 *         conv = find_converter_by_typename(typename + arraydef)
 *         if conv == NULL:
 */

#line 464 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_arraydef, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 464, __pyx_L1_error)

#line 464 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 464 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 464, __pyx_L1_error)

#line 464 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 464 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 464 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 464, __pyx_L1_error)

#line 464 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 464 "root_numpy/src/converters.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/converters.pyx":465
 *     # Variable-length array
 *     if arraydef.startswith('[]'):
 *         conv = find_converter_by_typename(typename + arraydef)             # <<<<<<<<<<<<<<
 *         if conv == NULL:
 *             # Create new converter on demand
 */

#line 465 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_typename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 465, __pyx_L1_error)

#line 465 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 465 "root_numpy/src/converters.pyx"
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_arraydef); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 465, __pyx_L1_error)

#line 465 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 465 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 465 "root_numpy/src/converters.pyx"
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 465, __pyx_L1_error)

#line 465 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 465 "root_numpy/src/converters.pyx"
    __pyx_v_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_t_7);

    /* "root_numpy/src/converters.pyx":466
 *     if arraydef.startswith('[]'):
 *         conv = find_converter_by_typename(typename + arraydef)
 *         if conv == NULL:             # <<<<<<<<<<<<<<
 *             # Create new converter on demand
 *             basic_conv = find_converter_by_typename(typename)
 */

#line 466 "root_numpy/src/converters.pyx"
    __pyx_t_3 = ((__pyx_v_conv == NULL) != 0);

#line 466 "root_numpy/src/converters.pyx"
    if (__pyx_t_3) {

      /* "root_numpy/src/converters.pyx":468
 *         if conv == NULL:
 *             # Create new converter on demand
 *             basic_conv = find_converter_by_typename(typename)             # <<<<<<<<<<<<<<
 *             if basic_conv == NULL:
 *                 return NULL
 */

#line 468 "root_numpy/src/converters.pyx"
      __pyx_v_basic_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_v_typename);

      /* "root_numpy/src/converters.pyx":469
 *             # Create new converter on demand
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:             # <<<<<<<<<<<<<<
 *                 return NULL
 *             # the variable-length dimension is excluded from leaf_shape above
 */

#line 469 "root_numpy/src/converters.pyx"
      __pyx_t_3 = ((__pyx_v_basic_conv == NULL) != 0);

#line 469 "root_numpy/src/converters.pyx"
      if (__pyx_t_3) {

        /* "root_numpy/src/converters.pyx":470
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:
 *                 return NULL             # <<<<<<<<<<<<<<
 *             # the variable-length dimension is excluded from leaf_shape above
 *             # so add 1 here:
 */

#line 470 "root_numpy/src/converters.pyx"
        __pyx_r = NULL;

#line 470 "root_numpy/src/converters.pyx"
        goto __pyx_L0;

        /* "root_numpy/src/converters.pyx":469
 *             # Create new converter on demand
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:             # <<<<<<<<<<<<<<
 *                 return NULL
 *             # the variable-length dimension is excluded from leaf_shape above
 */

#line 469 "root_numpy/src/converters.pyx"
      }

      /* "root_numpy/src/converters.pyx":473
 *             # the variable-length dimension is excluded from leaf_shape above
 *             # so add 1 here:
 *             ndim = len(shape) + 1             # <<<<<<<<<<<<<<
 *             dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))
 *             if dims == NULL:
 */

#line 473 "root_numpy/src/converters.pyx"
      __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 473, __pyx_L1_error)

#line 473 "root_numpy/src/converters.pyx"
      __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_4 + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 473, __pyx_L1_error)

#line 473 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 473 "root_numpy/src/converters.pyx"
      __pyx_v_ndim = __pyx_t_2;

#line 473 "root_numpy/src/converters.pyx"
      __pyx_t_2 = 0;

      /* "root_numpy/src/converters.pyx":474
 *             # so add 1 here:
 *             ndim = len(shape) + 1
 *             dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))             # <<<<<<<<<<<<<<
 *             if dims == NULL:
 *                 raise MemoryError("could not allocate %d bytes" % (ndim * sizeof(SIZE_t)))
 */

#line 474 "root_numpy/src/converters.pyx"
      __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_13_librootnumpy_SIZE_t))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 474, __pyx_L1_error)

#line 474 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 474 "root_numpy/src/converters.pyx"
      __pyx_t_1 = PyNumber_Multiply(__pyx_v_ndim, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 474, __pyx_L1_error)

#line 474 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 474 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 474 "root_numpy/src/converters.pyx"
      __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 474, __pyx_L1_error)

#line 474 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 474 "root_numpy/src/converters.pyx"
      __pyx_v_dims = ((__pyx_t_13_librootnumpy_SIZE_t *)malloc(__pyx_t_8));

      /* "root_numpy/src/converters.pyx":475
 *             ndim = len(shape) + 1
 *             dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))
 *             if dims == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("could not allocate %d bytes" % (ndim * sizeof(SIZE_t)))
 *             # only the first dimension can vary in length
 */

#line 475 "root_numpy/src/converters.pyx"
      __pyx_t_3 = ((__pyx_v_dims == NULL) != 0);

#line 475 "root_numpy/src/converters.pyx"
      if (__pyx_t_3) {

        /* "root_numpy/src/converters.pyx":476
 *             dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))
 *             if dims == NULL:
 *                 raise MemoryError("could not allocate %d bytes" % (ndim * sizeof(SIZE_t)))             # <<<<<<<<<<<<<<
 *             # only the first dimension can vary in length
 *             # so dims[0] is set dynamically for each entry
 */

#line 476 "root_numpy/src/converters.pyx"
        __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_13_librootnumpy_SIZE_t))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 476, __pyx_L1_error)

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 476 "root_numpy/src/converters.pyx"
        __pyx_t_2 = PyNumber_Multiply(__pyx_v_ndim, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 476, __pyx_L1_error)

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 476 "root_numpy/src/converters.pyx"
        __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_could_not_allocate_d_bytes, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 476, __pyx_L1_error)

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 476 "root_numpy/src/converters.pyx"
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 476, __pyx_L1_error)

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_GIVEREF(__pyx_t_1);

#line 476 "root_numpy/src/converters.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 476 "root_numpy/src/converters.pyx"
        __pyx_t_1 = 0;

#line 476 "root_numpy/src/converters.pyx"
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 476, __pyx_L1_error)

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 476 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 476 "root_numpy/src/converters.pyx"
        __PYX_ERR(1, 476, __pyx_L1_error)

        /* "root_numpy/src/converters.pyx":475
 *             ndim = len(shape) + 1
 *             dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))
 *             if dims == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("could not allocate %d bytes" % (ndim * sizeof(SIZE_t)))
 *             # only the first dimension can vary in length
 */

#line 475 "root_numpy/src/converters.pyx"
      }

      /* "root_numpy/src/converters.pyx":479
 *             # only the first dimension can vary in length
 *             # so dims[0] is set dynamically for each entry
 *             for idim from 1 <= idim < ndim:             # <<<<<<<<<<<<<<
 *                 dims[idim] = shape[idim - 1]
 *             conv = new VaryArrayConverter(
 */

#line 479 "root_numpy/src/converters.pyx"
      __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_v_ndim); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 479, __pyx_L1_error)

#line 479 "root_numpy/src/converters.pyx"
      for (__pyx_t_10 = 1; __pyx_t_10 < __pyx_t_9; __pyx_t_10++) {

#line 479 "root_numpy/src/converters.pyx"
        __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 479, __pyx_L1_error)

#line 479 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 479 "root_numpy/src/converters.pyx"
        __Pyx_XDECREF_SET(__pyx_v_idim, __pyx_t_1);

#line 479 "root_numpy/src/converters.pyx"
        __pyx_t_1 = 0;

        /* "root_numpy/src/converters.pyx":480
 *             # so dims[0] is set dynamically for each entry
 *             for idim from 1 <= idim < ndim:
 *                 dims[idim] = shape[idim - 1]             # <<<<<<<<<<<<<<
 *             conv = new VaryArrayConverter(
 *                 <BasicConverter*> basic_conv, ndim, dims)
 */

#line 480 "root_numpy/src/converters.pyx"
        __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_idim, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 480, __pyx_L1_error)

#line 480 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 480 "root_numpy/src/converters.pyx"
        __pyx_t_2 = PyObject_GetItem(__pyx_v_shape, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 480, __pyx_L1_error)

#line 480 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 480 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 480 "root_numpy/src/converters.pyx"
        __pyx_t_11 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_11 == (npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(1, 480, __pyx_L1_error)

#line 480 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 480 "root_numpy/src/converters.pyx"
        __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idim); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 480, __pyx_L1_error)

#line 480 "root_numpy/src/converters.pyx"
        (__pyx_v_dims[__pyx_t_4]) = __pyx_t_11;

#line 480 "root_numpy/src/converters.pyx"
        __pyx_t_10 = __Pyx_PyInt_As_long(__pyx_v_idim); if (unlikely((__pyx_t_10 == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 479, __pyx_L1_error)

#line 480 "root_numpy/src/converters.pyx"
      }

      /* "root_numpy/src/converters.pyx":479
 *             # only the first dimension can vary in length
 *             # so dims[0] is set dynamically for each entry
 *             for idim from 1 <= idim < ndim:             # <<<<<<<<<<<<<<
 *                 dims[idim] = shape[idim - 1]
 *             conv = new VaryArrayConverter(
 */

#line 479 "root_numpy/src/converters.pyx"
      __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 479, __pyx_L1_error)

#line 479 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 479 "root_numpy/src/converters.pyx"
      __Pyx_XDECREF_SET(__pyx_v_idim, __pyx_t_2);

#line 479 "root_numpy/src/converters.pyx"
      __pyx_t_2 = 0;

      /* "root_numpy/src/converters.pyx":482
 *                 dims[idim] = shape[idim - 1]
 *             conv = new VaryArrayConverter(
 *                 <BasicConverter*> basic_conv, ndim, dims)             # <<<<<<<<<<<<<<
 *             CONVERTERS.insert(CONVERTERS_ITEM(typename + arraydef, conv))
 *         return conv
 */

#line 482 "root_numpy/src/converters.pyx"
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_ndim); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 482, __pyx_L1_error)

      /* "root_numpy/src/converters.pyx":481
 *             for idim from 1 <= idim < ndim:
 *                 dims[idim] = shape[idim - 1]
 *             conv = new VaryArrayConverter(             # <<<<<<<<<<<<<<
 *                 <BasicConverter*> basic_conv, ndim, dims)
 *             CONVERTERS.insert(CONVERTERS_ITEM(typename + arraydef, conv))
 */

#line 481 "root_numpy/src/converters.pyx"
      __pyx_v_conv = new __pyx_t_13_librootnumpy_VaryArrayConverter(((__pyx_t_13_librootnumpy_BasicConverter *)__pyx_v_basic_conv), __pyx_t_12, __pyx_v_dims);

      /* "root_numpy/src/converters.pyx":483
 *             conv = new VaryArrayConverter(
 *                 <BasicConverter*> basic_conv, ndim, dims)
 *             CONVERTERS.insert(CONVERTERS_ITEM(typename + arraydef, conv))             # <<<<<<<<<<<<<<
 *         return conv
 * 
 */

#line 483 "root_numpy/src/converters.pyx"
      __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_typename); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 483, __pyx_L1_error)

#line 483 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 483 "root_numpy/src/converters.pyx"
      __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_v_arraydef); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 483, __pyx_L1_error)

#line 483 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 483 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 483 "root_numpy/src/converters.pyx"
      __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 483, __pyx_L1_error)

#line 483 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 483 "root_numpy/src/converters.pyx"
      try {

#line 483 "root_numpy/src/converters.pyx"
        __pyx_t_13 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_7, __pyx_v_conv);

#line 483 "root_numpy/src/converters.pyx"
      } catch(...) {

#line 483 "root_numpy/src/converters.pyx"
        __Pyx_CppExn2PyErr();

#line 483 "root_numpy/src/converters.pyx"
        __PYX_ERR(1, 483, __pyx_L1_error)

#line 483 "root_numpy/src/converters.pyx"
      }

#line 483 "root_numpy/src/converters.pyx"
      try {

#line 483 "root_numpy/src/converters.pyx"
        __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_13);

#line 483 "root_numpy/src/converters.pyx"
      } catch(...) {

#line 483 "root_numpy/src/converters.pyx"
        __Pyx_CppExn2PyErr();

#line 483 "root_numpy/src/converters.pyx"
        __PYX_ERR(1, 483, __pyx_L1_error)

#line 483 "root_numpy/src/converters.pyx"
      }

      /* "root_numpy/src/converters.pyx":466
 *     if arraydef.startswith('[]'):
 *         conv = find_converter_by_typename(typename + arraydef)
 *         if conv == NULL:             # <<<<<<<<<<<<<<
 *             # Create new converter on demand
 *             basic_conv = find_converter_by_typename(typename)
 */

#line 466 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":484
 *                 <BasicConverter*> basic_conv, ndim, dims)
 *             CONVERTERS.insert(CONVERTERS_ITEM(typename + arraydef, conv))
 *         return conv             # <<<<<<<<<<<<<<
 * 
 *     # Fixed-length array
 */

#line 484 "root_numpy/src/converters.pyx"
    __pyx_r = __pyx_v_conv;

#line 484 "root_numpy/src/converters.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/converters.pyx":464
 * 
 *     # Variable-length array
 *     if arraydef.startswith('[]'):             # <<<<<<<<<<<<<<
 *         conv = find_converter_by_typename(typename + arraydef)
 *         if conv == NULL:
 */

#line 464 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":487
 * 
 *     # Fixed-length array
 *     conv = find_converter_by_typename(typename + arraydef)             # <<<<<<<<<<<<<<
 *     if conv == NULL:
 *         # Create new converter on demand
 */

#line 487 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_typename); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 487, __pyx_L1_error)

#line 487 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 487 "root_numpy/src/converters.pyx"
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_arraydef); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 487, __pyx_L1_error)

#line 487 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 487 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 487 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 487, __pyx_L1_error)

#line 487 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 487 "root_numpy/src/converters.pyx"
  __pyx_v_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_t_7);

  /* "root_numpy/src/converters.pyx":488
 *     # Fixed-length array
 *     conv = find_converter_by_typename(typename + arraydef)
 *     if conv == NULL:             # <<<<<<<<<<<<<<
 *         # Create new converter on demand
 *         basic_conv = find_converter_by_typename(typename)
 */

#line 488 "root_numpy/src/converters.pyx"
  __pyx_t_3 = ((__pyx_v_conv == NULL) != 0);

#line 488 "root_numpy/src/converters.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/converters.pyx":490
 *     if conv == NULL:
 *         # Create new converter on demand
 *         basic_conv = find_converter_by_typename(typename)             # <<<<<<<<<<<<<<
 *         if basic_conv == NULL:
 *             return NULL
 */

#line 490 "root_numpy/src/converters.pyx"
    __pyx_v_basic_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_v_typename);

    /* "root_numpy/src/converters.pyx":491
 *         # Create new converter on demand
 *         basic_conv = find_converter_by_typename(typename)
 *         if basic_conv == NULL:             # <<<<<<<<<<<<<<
 *             return NULL
 *         conv = new FixedArrayConverter(
 */

#line 491 "root_numpy/src/converters.pyx"
    __pyx_t_3 = ((__pyx_v_basic_conv == NULL) != 0);

#line 491 "root_numpy/src/converters.pyx"
    if (__pyx_t_3) {

      /* "root_numpy/src/converters.pyx":492
 *         basic_conv = find_converter_by_typename(typename)
 *         if basic_conv == NULL:
 *             return NULL             # <<<<<<<<<<<<<<
 *         conv = new FixedArrayConverter(
 *             <BasicConverter*> basic_conv, <PyObject*> shape)
 */

#line 492 "root_numpy/src/converters.pyx"
      __pyx_r = NULL;

#line 492 "root_numpy/src/converters.pyx"
      goto __pyx_L0;

      /* "root_numpy/src/converters.pyx":491
 *         # Create new converter on demand
 *         basic_conv = find_converter_by_typename(typename)
 *         if basic_conv == NULL:             # <<<<<<<<<<<<<<
 *             return NULL
 *         conv = new FixedArrayConverter(
 */

#line 491 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":493
 *         if basic_conv == NULL:
 *             return NULL
 *         conv = new FixedArrayConverter(             # <<<<<<<<<<<<<<
 *             <BasicConverter*> basic_conv, <PyObject*> shape)
 *         CONVERTERS.insert(CONVERTERS_ITEM(typename + arraydef, conv))
 */

#line 493 "root_numpy/src/converters.pyx"
    __pyx_v_conv = new __pyx_t_13_librootnumpy_FixedArrayConverter(((__pyx_t_13_librootnumpy_BasicConverter *)__pyx_v_basic_conv), ((PyObject *)__pyx_v_shape));

    /* "root_numpy/src/converters.pyx":495
 *         conv = new FixedArrayConverter(
 *             <BasicConverter*> basic_conv, <PyObject*> shape)
 *         CONVERTERS.insert(CONVERTERS_ITEM(typename + arraydef, conv))             # <<<<<<<<<<<<<<
 *     return conv
 * 
 */

#line 495 "root_numpy/src/converters.pyx"
    __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_typename); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 495, __pyx_L1_error)

#line 495 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 495 "root_numpy/src/converters.pyx"
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_v_arraydef); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L1_error)

#line 495 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 495 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 495 "root_numpy/src/converters.pyx"
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 495, __pyx_L1_error)

#line 495 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 495 "root_numpy/src/converters.pyx"
    try {

#line 495 "root_numpy/src/converters.pyx"
      __pyx_t_13 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_7, __pyx_v_conv);

#line 495 "root_numpy/src/converters.pyx"
    } catch(...) {

#line 495 "root_numpy/src/converters.pyx"
      __Pyx_CppExn2PyErr();

#line 495 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 495, __pyx_L1_error)

#line 495 "root_numpy/src/converters.pyx"
    }

#line 495 "root_numpy/src/converters.pyx"
    try {

#line 495 "root_numpy/src/converters.pyx"
      __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_13);

#line 495 "root_numpy/src/converters.pyx"
    } catch(...) {

#line 495 "root_numpy/src/converters.pyx"
      __Pyx_CppExn2PyErr();

#line 495 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 495, __pyx_L1_error)

#line 495 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":488
 *     # Fixed-length array
 *     conv = find_converter_by_typename(typename + arraydef)
 *     if conv == NULL:             # <<<<<<<<<<<<<<
 *         # Create new converter on demand
 *         basic_conv = find_converter_by_typename(typename)
 */

#line 488 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":496
 *             <BasicConverter*> basic_conv, <PyObject*> shape)
 *         CONVERTERS.insert(CONVERTERS_ITEM(typename + arraydef, conv))
 *     return conv             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 496 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_v_conv;

#line 496 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":456
 * 
 * 
 * cdef Converter* get_array_converter(string typename, arraydef):             # <<<<<<<<<<<<<<
 *     # Determine shape ignoring possible variable first dimension
 *     arraytokens = arraydef.strip('[]')
 */

#line 456 "root_numpy/src/converters.pyx"


#line 456 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 456 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.get_array_converter", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 456 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 456 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_arraytokens);

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_shape);

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_ndim);

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_idim);

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_token);

#line 456 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 456 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 456 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":499
 * 
 * 
 * cdef Converter* get_converter(TLeaf* leaf, char type_code='\0'):             # <<<<<<<<<<<<<<
 *     # Find existing converter or attempt to create a new one
 *     cdef Converter* conv
 */

#line 499 "root_numpy/src/converters.pyx"


#line 499 "root_numpy/src/converters.pyx"
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_get_converter(TLeaf *__pyx_v_leaf, struct __pyx_opt_args_13_librootnumpy_get_converter *__pyx_optional_args) {

#line 499 "root_numpy/src/converters.pyx"
  char __pyx_v_type_code = ((char)'\x00');
  __pyx_t_13_librootnumpy_Converter *__pyx_v_conv
#line 499 "root_numpy/src/converters.pyx"
;
  TLeaf *__pyx_v_leaf_count
#line 499 "root_numpy/src/converters.pyx"
;
  int __pyx_v_leaf_length
#line 499 "root_numpy/src/converters.pyx"
;
  CYTHON_UNUSED const char *__pyx_v_leaf_name
#line 499 "root_numpy/src/converters.pyx"
;
  const char *__pyx_v_leaf_title
#line 499 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_leaf_type = NULL
#line 499 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_match = NULL
#line 499 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_arraydef = NULL
#line 499 "root_numpy/src/converters.pyx"
;

#line 499 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_Converter *__pyx_r;

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 499 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 499 "root_numpy/src/converters.pyx"
  int __pyx_t_2;

#line 499 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 499 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 499 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 499 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 499 "root_numpy/src/converters.pyx"
  std::string __pyx_t_7;

#line 499 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_CONVERTERS_ITEM __pyx_t_8;

#line 499 "root_numpy/src/converters.pyx"
  Py_ssize_t __pyx_t_9;

#line 499 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 499 "root_numpy/src/converters.pyx"
  int __pyx_t_11;

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("get_converter", 0);

#line 499 "root_numpy/src/converters.pyx"
  if (__pyx_optional_args) {

#line 499 "root_numpy/src/converters.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 499 "root_numpy/src/converters.pyx"
      __pyx_v_type_code = __pyx_optional_args->type_code;

#line 499 "root_numpy/src/converters.pyx"
    }

#line 499 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":503
 *     cdef Converter* conv
 *     cdef Converter* basic_conv
 *     cdef TLeaf* leaf_count = leaf.GetLeafCount()             # <<<<<<<<<<<<<<
 *     cdef SIZE_t* dims
 *     cdef int ndim, idim, leaf_length
 */

#line 503 "root_numpy/src/converters.pyx"
  __pyx_v_leaf_count = __pyx_v_leaf->GetLeafCount();

  /* "root_numpy/src/converters.pyx":507
 *     cdef int ndim, idim, leaf_length
 * 
 *     leaf_name = leaf.GetName()             # <<<<<<<<<<<<<<
 *     leaf_title = leaf.GetTitle()
 *     leaf_type = resolve_type(leaf.GetTypeName())
 */

#line 507 "root_numpy/src/converters.pyx"
  __pyx_v_leaf_name = __pyx_v_leaf->GetName();

  /* "root_numpy/src/converters.pyx":508
 * 
 *     leaf_name = leaf.GetName()
 *     leaf_title = leaf.GetTitle()             # <<<<<<<<<<<<<<
 *     leaf_type = resolve_type(leaf.GetTypeName())
 * 
 */

#line 508 "root_numpy/src/converters.pyx"
  __pyx_v_leaf_title = __pyx_v_leaf->GetTitle();

  /* "root_numpy/src/converters.pyx":509
 *     leaf_name = leaf.GetName()
 *     leaf_title = leaf.GetTitle()
 *     leaf_type = resolve_type(leaf.GetTypeName())             # <<<<<<<<<<<<<<
 * 
 *     # Special case for null-terminated char array string
 */

#line 509 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __pyx_f_13_librootnumpy_resolve_type(__pyx_v_leaf->GetTypeName()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 509, __pyx_L1_error)

#line 509 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 509 "root_numpy/src/converters.pyx"
  __pyx_v_leaf_type = ((PyObject*)__pyx_t_1);

#line 509 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":512
 * 
 *     # Special case for null-terminated char array string
 *     if type_code == 'C':             # <<<<<<<<<<<<<<
 *         leaf_length = leaf.GetLenStatic()
 *         conv = find_converter_by_typename(leaf_type + '[{0:d}]/C'.format(leaf_length))
 */

#line 512 "root_numpy/src/converters.pyx"
  __pyx_t_2 = ((__pyx_v_type_code == 'C') != 0);

#line 512 "root_numpy/src/converters.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/converters.pyx":513
 *     # Special case for null-terminated char array string
 *     if type_code == 'C':
 *         leaf_length = leaf.GetLenStatic()             # <<<<<<<<<<<<<<
 *         conv = find_converter_by_typename(leaf_type + '[{0:d}]/C'.format(leaf_length))
 *         if conv == NULL:
 */

#line 513 "root_numpy/src/converters.pyx"
    __pyx_v_leaf_length = __pyx_v_leaf->GetLenStatic();

    /* "root_numpy/src/converters.pyx":514
 *     if type_code == 'C':
 *         leaf_length = leaf.GetLenStatic()
 *         conv = find_converter_by_typename(leaf_type + '[{0:d}]/C'.format(leaf_length))             # <<<<<<<<<<<<<<
 *         if conv == NULL:
 *             conv = new CharArrayConverter(leaf_length - 1)  # exclude null-termination
 */

#line 514 "root_numpy/src/converters.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_0_d_C, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 514, __pyx_L1_error)

#line 514 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 514 "root_numpy/src/converters.pyx"
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_leaf_length); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)

#line 514 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 514 "root_numpy/src/converters.pyx"
    __pyx_t_5 = NULL;

#line 514 "root_numpy/src/converters.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {

#line 514 "root_numpy/src/converters.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 514 "root_numpy/src/converters.pyx"
      if (likely(__pyx_t_5)) {

#line 514 "root_numpy/src/converters.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 514 "root_numpy/src/converters.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 514 "root_numpy/src/converters.pyx"
        __Pyx_INCREF(function);

#line 514 "root_numpy/src/converters.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 514 "root_numpy/src/converters.pyx"
      }

#line 514 "root_numpy/src/converters.pyx"
    }

#line 514 "root_numpy/src/converters.pyx"
    if (!__pyx_t_5) {

#line 514 "root_numpy/src/converters.pyx"
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)

#line 514 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 514 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 514 "root_numpy/src/converters.pyx"
    } else {

#line 514 "root_numpy/src/converters.pyx"
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 514, __pyx_L1_error)

#line 514 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 514 "root_numpy/src/converters.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 514 "root_numpy/src/converters.pyx"
      __Pyx_GIVEREF(__pyx_t_4);

#line 514 "root_numpy/src/converters.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);

#line 514 "root_numpy/src/converters.pyx"
      __pyx_t_4 = 0;

#line 514 "root_numpy/src/converters.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)

#line 514 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 514 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 514 "root_numpy/src/converters.pyx"
    }

#line 514 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 514 "root_numpy/src/converters.pyx"
    __pyx_t_3 = PyNumber_Add(__pyx_v_leaf_type, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 514, __pyx_L1_error)

#line 514 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 514 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 514 "root_numpy/src/converters.pyx"
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 514, __pyx_L1_error)

#line 514 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 514 "root_numpy/src/converters.pyx"
    __pyx_v_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_t_7);

    /* "root_numpy/src/converters.pyx":515
 *         leaf_length = leaf.GetLenStatic()
 *         conv = find_converter_by_typename(leaf_type + '[{0:d}]/C'.format(leaf_length))
 *         if conv == NULL:             # <<<<<<<<<<<<<<
 *             conv = new CharArrayConverter(leaf_length - 1)  # exclude null-termination
 *             CONVERTERS.insert(CONVERTERS_ITEM(leaf_type + '[{0:d}]/C'.format(leaf_length), conv))
 */

#line 515 "root_numpy/src/converters.pyx"
    __pyx_t_2 = ((__pyx_v_conv == NULL) != 0);

#line 515 "root_numpy/src/converters.pyx"
    if (__pyx_t_2) {

      /* "root_numpy/src/converters.pyx":516
 *         conv = find_converter_by_typename(leaf_type + '[{0:d}]/C'.format(leaf_length))
 *         if conv == NULL:
 *             conv = new CharArrayConverter(leaf_length - 1)  # exclude null-termination             # <<<<<<<<<<<<<<
 *             CONVERTERS.insert(CONVERTERS_ITEM(leaf_type + '[{0:d}]/C'.format(leaf_length), conv))
 *         return conv
 */

#line 516 "root_numpy/src/converters.pyx"
      __pyx_v_conv = new __pyx_t_13_librootnumpy_CharArrayConverter((__pyx_v_leaf_length - 1));

      /* "root_numpy/src/converters.pyx":517
 *         if conv == NULL:
 *             conv = new CharArrayConverter(leaf_length - 1)  # exclude null-termination
 *             CONVERTERS.insert(CONVERTERS_ITEM(leaf_type + '[{0:d}]/C'.format(leaf_length), conv))             # <<<<<<<<<<<<<<
 *         return conv
 * 
 */

#line 517 "root_numpy/src/converters.pyx"
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_0_d_C, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 517, __pyx_L1_error)

#line 517 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 517 "root_numpy/src/converters.pyx"
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_leaf_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 517, __pyx_L1_error)

#line 517 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 517 "root_numpy/src/converters.pyx"
      __pyx_t_4 = NULL;

#line 517 "root_numpy/src/converters.pyx"
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {

#line 517 "root_numpy/src/converters.pyx"
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);

#line 517 "root_numpy/src/converters.pyx"
        if (likely(__pyx_t_4)) {

#line 517 "root_numpy/src/converters.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 517 "root_numpy/src/converters.pyx"
          __Pyx_INCREF(__pyx_t_4);

#line 517 "root_numpy/src/converters.pyx"
          __Pyx_INCREF(function);

#line 517 "root_numpy/src/converters.pyx"
          __Pyx_DECREF_SET(__pyx_t_1, function);

#line 517 "root_numpy/src/converters.pyx"
        }

#line 517 "root_numpy/src/converters.pyx"
      }

#line 517 "root_numpy/src/converters.pyx"
      if (!__pyx_t_4) {

#line 517 "root_numpy/src/converters.pyx"
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 517, __pyx_L1_error)

#line 517 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 517 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 517 "root_numpy/src/converters.pyx"
      } else {

#line 517 "root_numpy/src/converters.pyx"
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 517, __pyx_L1_error)

#line 517 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 517 "root_numpy/src/converters.pyx"
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 517 "root_numpy/src/converters.pyx"
        __Pyx_GIVEREF(__pyx_t_6);

#line 517 "root_numpy/src/converters.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);

#line 517 "root_numpy/src/converters.pyx"
        __pyx_t_6 = 0;

#line 517 "root_numpy/src/converters.pyx"
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 517, __pyx_L1_error)

#line 517 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 517 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 517 "root_numpy/src/converters.pyx"
      }

#line 517 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 517 "root_numpy/src/converters.pyx"
      __pyx_t_1 = PyNumber_Add(__pyx_v_leaf_type, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 517, __pyx_L1_error)

#line 517 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 517 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 517 "root_numpy/src/converters.pyx"
      __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 517, __pyx_L1_error)

#line 517 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 517 "root_numpy/src/converters.pyx"
      try {

#line 517 "root_numpy/src/converters.pyx"
        __pyx_t_8 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_7, __pyx_v_conv);

#line 517 "root_numpy/src/converters.pyx"
      } catch(...) {

#line 517 "root_numpy/src/converters.pyx"
        __Pyx_CppExn2PyErr();

#line 517 "root_numpy/src/converters.pyx"
        __PYX_ERR(1, 517, __pyx_L1_error)

#line 517 "root_numpy/src/converters.pyx"
      }

#line 517 "root_numpy/src/converters.pyx"
      try {

#line 517 "root_numpy/src/converters.pyx"
        __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_8);

#line 517 "root_numpy/src/converters.pyx"
      } catch(...) {

#line 517 "root_numpy/src/converters.pyx"
        __Pyx_CppExn2PyErr();

#line 517 "root_numpy/src/converters.pyx"
        __PYX_ERR(1, 517, __pyx_L1_error)

#line 517 "root_numpy/src/converters.pyx"
      }

      /* "root_numpy/src/converters.pyx":515
 *         leaf_length = leaf.GetLenStatic()
 *         conv = find_converter_by_typename(leaf_type + '[{0:d}]/C'.format(leaf_length))
 *         if conv == NULL:             # <<<<<<<<<<<<<<
 *             conv = new CharArrayConverter(leaf_length - 1)  # exclude null-termination
 *             CONVERTERS.insert(CONVERTERS_ITEM(leaf_type + '[{0:d}]/C'.format(leaf_length), conv))
 */

#line 515 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":518
 *             conv = new CharArrayConverter(leaf_length - 1)  # exclude null-termination
 *             CONVERTERS.insert(CONVERTERS_ITEM(leaf_type + '[{0:d}]/C'.format(leaf_length), conv))
 *         return conv             # <<<<<<<<<<<<<<
 * 
 *     match = re.match(LEAF_PATTERN, leaf_title)
 */

#line 518 "root_numpy/src/converters.pyx"
    __pyx_r = __pyx_v_conv;

#line 518 "root_numpy/src/converters.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/converters.pyx":512
 * 
 *     # Special case for null-terminated char array string
 *     if type_code == 'C':             # <<<<<<<<<<<<<<
 *         leaf_length = leaf.GetLenStatic()
 *         conv = find_converter_by_typename(leaf_type + '[{0:d}]/C'.format(leaf_length))
 */

#line 512 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":520
 *         return conv
 * 
 *     match = re.match(LEAF_PATTERN, leaf_title)             # <<<<<<<<<<<<<<
 *     if match is not None:
 *         arraydef = match.group(1)
 */

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 520, __pyx_L1_error)

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_match); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 520, __pyx_L1_error)

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_LEAF_PATTERN); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 520, __pyx_L1_error)

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_6 = __Pyx_PyStr_FromString(__pyx_v_leaf_title); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 520, __pyx_L1_error)

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_4 = NULL;

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 520 "root_numpy/src/converters.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 520 "root_numpy/src/converters.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 520 "root_numpy/src/converters.pyx"
    if (likely(__pyx_t_4)) {

#line 520 "root_numpy/src/converters.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 520 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 520 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(function);

#line 520 "root_numpy/src/converters.pyx"
      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 520 "root_numpy/src/converters.pyx"
      __pyx_t_9 = 1;

#line 520 "root_numpy/src/converters.pyx"
    }

#line 520 "root_numpy/src/converters.pyx"
  }

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 520, __pyx_L1_error)

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_10);

#line 520 "root_numpy/src/converters.pyx"
  if (__pyx_t_4) {

#line 520 "root_numpy/src/converters.pyx"
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 520 "root_numpy/src/converters.pyx"
  }

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 520 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_3);

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 520 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_6);

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_3 = 0;

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_6 = 0;

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 520, __pyx_L1_error)

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 520 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 520 "root_numpy/src/converters.pyx"
  __pyx_v_match = __pyx_t_1;

#line 520 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":521
 * 
 *     match = re.match(LEAF_PATTERN, leaf_title)
 *     if match is not None:             # <<<<<<<<<<<<<<
 *         arraydef = match.group(1)
 *         if arraydef is not None:
 */

#line 521 "root_numpy/src/converters.pyx"
  __pyx_t_2 = (__pyx_v_match != Py_None);

#line 521 "root_numpy/src/converters.pyx"
  __pyx_t_11 = (__pyx_t_2 != 0);

#line 521 "root_numpy/src/converters.pyx"
  if (__pyx_t_11) {

    /* "root_numpy/src/converters.pyx":522
 *     match = re.match(LEAF_PATTERN, leaf_title)
 *     if match is not None:
 *         arraydef = match.group(1)             # <<<<<<<<<<<<<<
 *         if arraydef is not None:
 *             if leaf_count != NULL:
 */

#line 522 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_match, __pyx_n_s_group); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 522, __pyx_L1_error)

#line 522 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 522 "root_numpy/src/converters.pyx"
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 522, __pyx_L1_error)

#line 522 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 522 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 522 "root_numpy/src/converters.pyx"
    __pyx_v_arraydef = __pyx_t_5;

#line 522 "root_numpy/src/converters.pyx"
    __pyx_t_5 = 0;

    /* "root_numpy/src/converters.pyx":523
 *     if match is not None:
 *         arraydef = match.group(1)
 *         if arraydef is not None:             # <<<<<<<<<<<<<<
 *             if leaf_count != NULL:
 *                 # Ignore length-leaf name and use [] to denote variable-length first dimension
 */

#line 523 "root_numpy/src/converters.pyx"
    __pyx_t_11 = (__pyx_v_arraydef != Py_None);

#line 523 "root_numpy/src/converters.pyx"
    __pyx_t_2 = (__pyx_t_11 != 0);

#line 523 "root_numpy/src/converters.pyx"
    if (__pyx_t_2) {

      /* "root_numpy/src/converters.pyx":524
 *         arraydef = match.group(1)
 *         if arraydef is not None:
 *             if leaf_count != NULL:             # <<<<<<<<<<<<<<
 *                 # Ignore length-leaf name and use [] to denote variable-length first dimension
 *                 arraydef = '[' + arraydef[arraydef.find(']'):]
 */

#line 524 "root_numpy/src/converters.pyx"
      __pyx_t_2 = ((__pyx_v_leaf_count != NULL) != 0);

#line 524 "root_numpy/src/converters.pyx"
      if (__pyx_t_2) {

        /* "root_numpy/src/converters.pyx":526
 *             if leaf_count != NULL:
 *                 # Ignore length-leaf name and use [] to denote variable-length first dimension
 *                 arraydef = '[' + arraydef[arraydef.find(']'):]             # <<<<<<<<<<<<<<
 *             return get_array_converter(leaf_type, arraydef)
 *     return find_converter_by_typename(leaf_type)
 */

#line 526 "root_numpy/src/converters.pyx"
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_arraydef, __pyx_n_s_find); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 526, __pyx_L1_error)

#line 526 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 526 "root_numpy/src/converters.pyx"
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 526, __pyx_L1_error)

#line 526 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 526 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 526 "root_numpy/src/converters.pyx"
        __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_v_arraydef, 0, 0, &__pyx_t_1, NULL, NULL, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 526, __pyx_L1_error)

#line 526 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 526 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 526 "root_numpy/src/converters.pyx"
        __pyx_t_1 = PyNumber_Add(__pyx_kp_s__11, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 526, __pyx_L1_error)

#line 526 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 526 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 526 "root_numpy/src/converters.pyx"
        __Pyx_DECREF_SET(__pyx_v_arraydef, __pyx_t_1);

#line 526 "root_numpy/src/converters.pyx"
        __pyx_t_1 = 0;

        /* "root_numpy/src/converters.pyx":524
 *         arraydef = match.group(1)
 *         if arraydef is not None:
 *             if leaf_count != NULL:             # <<<<<<<<<<<<<<
 *                 # Ignore length-leaf name and use [] to denote variable-length first dimension
 *                 arraydef = '[' + arraydef[arraydef.find(']'):]
 */

#line 524 "root_numpy/src/converters.pyx"
      }

      /* "root_numpy/src/converters.pyx":527
 *                 # Ignore length-leaf name and use [] to denote variable-length first dimension
 *                 arraydef = '[' + arraydef[arraydef.find(']'):]
 *             return get_array_converter(leaf_type, arraydef)             # <<<<<<<<<<<<<<
 *     return find_converter_by_typename(leaf_type)
 * 
 */

#line 527 "root_numpy/src/converters.pyx"
      __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_leaf_type); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 527, __pyx_L1_error)

#line 527 "root_numpy/src/converters.pyx"
      __pyx_r = __pyx_f_13_librootnumpy_get_array_converter(__pyx_t_7, __pyx_v_arraydef);

#line 527 "root_numpy/src/converters.pyx"
      goto __pyx_L0;

      /* "root_numpy/src/converters.pyx":523
 *     if match is not None:
 *         arraydef = match.group(1)
 *         if arraydef is not None:             # <<<<<<<<<<<<<<
 *             if leaf_count != NULL:
 *                 # Ignore length-leaf name and use [] to denote variable-length first dimension
 */

#line 523 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":521
 * 
 *     match = re.match(LEAF_PATTERN, leaf_title)
 *     if match is not None:             # <<<<<<<<<<<<<<
 *         arraydef = match.group(1)
 *         if arraydef is not None:
 */

#line 521 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":528
 *                 arraydef = '[' + arraydef[arraydef.find(']'):]
 *             return get_array_converter(leaf_type, arraydef)
 *     return find_converter_by_typename(leaf_type)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 528 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_leaf_type); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 528, __pyx_L1_error)

#line 528 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_t_7);

#line 528 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":499
 * 
 * 
 * cdef Converter* get_converter(TLeaf* leaf, char type_code='\0'):             # <<<<<<<<<<<<<<
 *     # Find existing converter or attempt to create a new one
 *     cdef Converter* conv
 */

#line 499 "root_numpy/src/converters.pyx"


#line 499 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 499 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.get_converter", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 499 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 499 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_leaf_type);

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_match);

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_arraydef);

#line 499 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 499 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 499 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":532
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # Delete all converters when module is town down
 *     it = CONVERTERS.begin()
 */

#line 532 "root_numpy/src/converters.pyx"


#line 532 "root_numpy/src/converters.pyx"
/* Python wrapper */

#line 532 "root_numpy/src/converters.pyx"
static PyObject *__pyx_pw_13_librootnumpy_1cleanup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_1cleanup = 
#line 532 "root_numpy/src/converters.pyx"
{"cleanup", (PyCFunction)__pyx_pw_13_librootnumpy_1cleanup, METH_NOARGS, 0};

#line 532 "root_numpy/src/converters.pyx"
static PyObject *__pyx_pw_13_librootnumpy_1cleanup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 532 "root_numpy/src/converters.pyx"
  PyObject *__pyx_r = 0;

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("cleanup (wrapper)", 0);
  __pyx_r = 
#line 532 "root_numpy/src/converters.pyx"
__pyx_pf_13_librootnumpy_cleanup(__pyx_self);

#line 532 "root_numpy/src/converters.pyx"


#line 532 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 532 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 532 "root_numpy/src/converters.pyx"
}

#line 532 "root_numpy/src/converters.pyx"


#line 532 "root_numpy/src/converters.pyx"
static PyObject *__pyx_pf_13_librootnumpy_cleanup(CYTHON_UNUSED PyObject *__pyx_self) {
  std::map<std::string,__pyx_t_13_librootnumpy_Converter *> ::iterator __pyx_v_it
#line 532 "root_numpy/src/converters.pyx"
;

#line 532 "root_numpy/src/converters.pyx"
  PyObject *__pyx_r = NULL;

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 532 "root_numpy/src/converters.pyx"
  int __pyx_t_1;

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("cleanup", 0);

  /* "root_numpy/src/converters.pyx":534
 * def cleanup():
 *     # Delete all converters when module is town down
 *     it = CONVERTERS.begin()             # <<<<<<<<<<<<<<
 *     while it != CONVERTERS.end():
 *         del deref(it).second
 */

#line 534 "root_numpy/src/converters.pyx"
  __pyx_v_it = __pyx_v_13_librootnumpy_CONVERTERS.begin();

  /* "root_numpy/src/converters.pyx":535
 *     # Delete all converters when module is town down
 *     it = CONVERTERS.begin()
 *     while it != CONVERTERS.end():             # <<<<<<<<<<<<<<
 *         del deref(it).second
 *         inc(it)
 */

#line 535 "root_numpy/src/converters.pyx"
  while (1) {

#line 535 "root_numpy/src/converters.pyx"
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_13_librootnumpy_CONVERTERS.end()) != 0);

#line 535 "root_numpy/src/converters.pyx"
    if (!__pyx_t_1) break;

    /* "root_numpy/src/converters.pyx":536
 *     it = CONVERTERS.begin()
 *     while it != CONVERTERS.end():
 *         del deref(it).second             # <<<<<<<<<<<<<<
 *         inc(it)
 * 
 */

#line 536 "root_numpy/src/converters.pyx"
    delete (*__pyx_v_it).second;

    /* "root_numpy/src/converters.pyx":537
 *     while it != CONVERTERS.end():
 *         del deref(it).second
 *         inc(it)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 537 "root_numpy/src/converters.pyx"
    (++__pyx_v_it);

#line 537 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":532
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # Delete all converters when module is town down
 *     it = CONVERTERS.begin()
 */

#line 532 "root_numpy/src/converters.pyx"


#line 532 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 532 "root_numpy/src/converters.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 532 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 532 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":546
 * cdef cppclass NP2ROOTConverter:
 * 
 *     void fill_from(void* source):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 546 "root_numpy/src/converters.pyx"


#line 546 "root_numpy/src/converters.pyx"
void __pyx_t_13_librootnumpy_NP2ROOTConverter::fill_from(CYTHON_UNUSED void *__pyx_v_source) {

#line 546 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 546 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("fill_from", 0);

#line 546 "root_numpy/src/converters.pyx"


#line 546 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 546 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 546 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":549
 *         pass
 * 
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 549 "root_numpy/src/converters.pyx"


#line 549 "root_numpy/src/converters.pyx"
 __pyx_t_13_librootnumpy_NP2ROOTConverter::~__pyx_t_13_librootnumpy_NP2ROOTConverter(void) {

#line 549 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 549 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("<del>", 0);

#line 549 "root_numpy/src/converters.pyx"


#line 549 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 549 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 549 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":558
 *     TBranch* branch
 * 
 *     __init__(TTree* tree, string name, string roottype,             # <<<<<<<<<<<<<<
 *              int length, int elembytes,
 *              int ndim=0, SIZE_t* dims=NULL):
 */

#line 558 "root_numpy/src/converters.pyx"


#line 558 "root_numpy/src/converters.pyx"
 __pyx_t_13_librootnumpy_FixedNP2ROOTConverter::__pyx_t_13_librootnumpy_FixedNP2ROOTConverter(TTree *__pyx_v_tree, std::string __pyx_v_name, std::string __pyx_v_roottype, int __pyx_v_length, int __pyx_v_elembytes, struct __pyx_opt_args_21FixedNP2ROOTConverter___init__ *__pyx_optional_args) {

#line 558 "root_numpy/src/converters.pyx"
  int __pyx_v_ndim = ((int)0);

  /* "root_numpy/src/converters.pyx":560
 *     __init__(TTree* tree, string name, string roottype,
 *              int length, int elembytes,
 *              int ndim=0, SIZE_t* dims=NULL):             # <<<<<<<<<<<<<<
 *         cdef string leaflist
 *         cdef int axis
 */

#line 560 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_SIZE_t *__pyx_v_dims = ((__pyx_t_13_librootnumpy_SIZE_t *)NULL);
  std::string __pyx_v_leaflist
#line 560 "root_numpy/src/converters.pyx"
;
  int __pyx_v_axis
#line 560 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_token = NULL
#line 560 "root_numpy/src/converters.pyx"
;

#line 560 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 560 "root_numpy/src/converters.pyx"
  std::string __pyx_t_1;

#line 560 "root_numpy/src/converters.pyx"
  int __pyx_t_2;

#line 560 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 560 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 560 "root_numpy/src/converters.pyx"
  int __pyx_t_5;

#line 560 "root_numpy/src/converters.pyx"
  int __pyx_t_6;

#line 560 "root_numpy/src/converters.pyx"
  int __pyx_t_7;

#line 560 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 560 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 560 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 560 "root_numpy/src/converters.pyx"
  char *__pyx_t_11;

#line 560 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 560 "root_numpy/src/converters.pyx"
  Py_ssize_t __pyx_t_13;

#line 560 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_14 = NULL;

#line 560 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

#line 560 "root_numpy/src/converters.pyx"
  if (__pyx_optional_args) {

#line 560 "root_numpy/src/converters.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 560 "root_numpy/src/converters.pyx"
      __pyx_v_ndim = __pyx_optional_args->ndim;

#line 560 "root_numpy/src/converters.pyx"
      if (__pyx_optional_args->__pyx_n > 1) {

#line 560 "root_numpy/src/converters.pyx"
        __pyx_v_dims = __pyx_optional_args->dims;

#line 560 "root_numpy/src/converters.pyx"
      }

#line 560 "root_numpy/src/converters.pyx"
    }

#line 560 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":563
 *         cdef string leaflist
 *         cdef int axis
 *         this.nbytes = length * elembytes             # <<<<<<<<<<<<<<
 *         if roottype.compare('C') == 0:
 *             # include null-termination
 */

#line 563 "root_numpy/src/converters.pyx"
  this->nbytes = (__pyx_v_length * __pyx_v_elembytes);

  /* "root_numpy/src/converters.pyx":564
 *         cdef int axis
 *         this.nbytes = length * elembytes
 *         if roottype.compare('C') == 0:             # <<<<<<<<<<<<<<
 *             # include null-termination
 *             this.value = malloc(nbytes + 1)
 */

#line 564 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_C); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 564, __pyx_L1_error)

#line 564 "root_numpy/src/converters.pyx"
  __pyx_t_2 = ((__pyx_v_roottype.compare(__pyx_t_1) == 0) != 0);

#line 564 "root_numpy/src/converters.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/converters.pyx":566
 *         if roottype.compare('C') == 0:
 *             # include null-termination
 *             this.value = malloc(nbytes + 1)             # <<<<<<<<<<<<<<
 *             if this.value == NULL:
 *                 raise MemoryError("could not allocate %d bytes" % (nbytes + 1))
 */

#line 566 "root_numpy/src/converters.pyx"
    this->value = malloc((nbytes + 1));

    /* "root_numpy/src/converters.pyx":567
 *             # include null-termination
 *             this.value = malloc(nbytes + 1)
 *             if this.value == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("could not allocate %d bytes" % (nbytes + 1))
 *             (<char*> this.value)[nbytes] = '\0'
 */

#line 567 "root_numpy/src/converters.pyx"
    __pyx_t_2 = ((this->value == NULL) != 0);

#line 567 "root_numpy/src/converters.pyx"
    if (__pyx_t_2) {

      /* "root_numpy/src/converters.pyx":568
 *             this.value = malloc(nbytes + 1)
 *             if this.value == NULL:
 *                 raise MemoryError("could not allocate %d bytes" % (nbytes + 1))             # <<<<<<<<<<<<<<
 *             (<char*> this.value)[nbytes] = '\0'
 *         else:
 */

#line 568 "root_numpy/src/converters.pyx"
      __pyx_t_3 = __Pyx_PyInt_From_long((nbytes + 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 568, __pyx_L1_error)

#line 568 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 568 "root_numpy/src/converters.pyx"
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_could_not_allocate_d_bytes, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 568, __pyx_L1_error)

#line 568 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 568 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 568 "root_numpy/src/converters.pyx"
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 568, __pyx_L1_error)

#line 568 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 568 "root_numpy/src/converters.pyx"
      __Pyx_GIVEREF(__pyx_t_4);

#line 568 "root_numpy/src/converters.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);

#line 568 "root_numpy/src/converters.pyx"
      __pyx_t_4 = 0;

#line 568 "root_numpy/src/converters.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 568, __pyx_L1_error)

#line 568 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 568 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 568 "root_numpy/src/converters.pyx"
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 568 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 568 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 568, __pyx_L1_error)

      /* "root_numpy/src/converters.pyx":567
 *             # include null-termination
 *             this.value = malloc(nbytes + 1)
 *             if this.value == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("could not allocate %d bytes" % (nbytes + 1))
 *             (<char*> this.value)[nbytes] = '\0'
 */

#line 567 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":569
 *             if this.value == NULL:
 *                 raise MemoryError("could not allocate %d bytes" % (nbytes + 1))
 *             (<char*> this.value)[nbytes] = '\0'             # <<<<<<<<<<<<<<
 *         else:
 *             this.value = malloc(nbytes)
 */

#line 569 "root_numpy/src/converters.pyx"
    (((char *)this->value)[nbytes]) = '\x00';

    /* "root_numpy/src/converters.pyx":564
 *         cdef int axis
 *         this.nbytes = length * elembytes
 *         if roottype.compare('C') == 0:             # <<<<<<<<<<<<<<
 *             # include null-termination
 *             this.value = malloc(nbytes + 1)
 */

#line 564 "root_numpy/src/converters.pyx"
    goto __pyx_L3;

#line 564 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":571
 *             (<char*> this.value)[nbytes] = '\0'
 *         else:
 *             this.value = malloc(nbytes)             # <<<<<<<<<<<<<<
 *             if this.value == NULL:
 *                 raise MemoryError("could not allocate %d bytes" % nbytes)
 */

#line 571 "root_numpy/src/converters.pyx"
  /*else*/ {

#line 571 "root_numpy/src/converters.pyx"
    this->value = malloc(nbytes);

    /* "root_numpy/src/converters.pyx":572
 *         else:
 *             this.value = malloc(nbytes)
 *             if this.value == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("could not allocate %d bytes" % nbytes)
 *         # Construct leaflist name
 */

#line 572 "root_numpy/src/converters.pyx"
    __pyx_t_2 = ((this->value == NULL) != 0);

#line 572 "root_numpy/src/converters.pyx"
    if (__pyx_t_2) {

      /* "root_numpy/src/converters.pyx":573
 *             this.value = malloc(nbytes)
 *             if this.value == NULL:
 *                 raise MemoryError("could not allocate %d bytes" % nbytes)             # <<<<<<<<<<<<<<
 *         # Construct leaflist name
 *         leaflist = name
 */

#line 573 "root_numpy/src/converters.pyx"
      __pyx_t_4 = __Pyx_PyInt_From_int(nbytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 573, __pyx_L1_error)

#line 573 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 573 "root_numpy/src/converters.pyx"
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_could_not_allocate_d_bytes, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 573, __pyx_L1_error)

#line 573 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 573 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 573 "root_numpy/src/converters.pyx"
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 573, __pyx_L1_error)

#line 573 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 573 "root_numpy/src/converters.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 573 "root_numpy/src/converters.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 573 "root_numpy/src/converters.pyx"
      __pyx_t_3 = 0;

#line 573 "root_numpy/src/converters.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 573, __pyx_L1_error)

#line 573 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 573 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 573 "root_numpy/src/converters.pyx"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 573 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 573 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 573, __pyx_L1_error)

      /* "root_numpy/src/converters.pyx":572
 *         else:
 *             this.value = malloc(nbytes)
 *             if this.value == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("could not allocate %d bytes" % nbytes)
 *         # Construct leaflist name
 */

#line 572 "root_numpy/src/converters.pyx"
    }

#line 572 "root_numpy/src/converters.pyx"
  }

#line 572 "root_numpy/src/converters.pyx"
  __pyx_L3:;

  /* "root_numpy/src/converters.pyx":575
 *                 raise MemoryError("could not allocate %d bytes" % nbytes)
 *         # Construct leaflist name
 *         leaflist = name             # <<<<<<<<<<<<<<
 *         if ndim > 0 and roottype.compare('C') != 0:
 *             for axis in range(ndim):
 */

#line 575 "root_numpy/src/converters.pyx"
  __pyx_v_leaflist = __pyx_v_name;

  /* "root_numpy/src/converters.pyx":576
 *         # Construct leaflist name
 *         leaflist = name
 *         if ndim > 0 and roottype.compare('C') != 0:             # <<<<<<<<<<<<<<
 *             for axis in range(ndim):
 *                 token = ('[{0:d}]'.format(dims[axis])).encode('utf-8')
 */

#line 576 "root_numpy/src/converters.pyx"
  __pyx_t_5 = ((__pyx_v_ndim > 0) != 0);

#line 576 "root_numpy/src/converters.pyx"
  if (__pyx_t_5) {

#line 576 "root_numpy/src/converters.pyx"
  } else {

#line 576 "root_numpy/src/converters.pyx"
    __pyx_t_2 = __pyx_t_5;

#line 576 "root_numpy/src/converters.pyx"
    goto __pyx_L7_bool_binop_done;

#line 576 "root_numpy/src/converters.pyx"
  }

#line 576 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_C); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 576, __pyx_L1_error)

#line 576 "root_numpy/src/converters.pyx"
  __pyx_t_5 = ((__pyx_v_roottype.compare(__pyx_t_1) != 0) != 0);

#line 576 "root_numpy/src/converters.pyx"
  __pyx_t_2 = __pyx_t_5;

#line 576 "root_numpy/src/converters.pyx"
  __pyx_L7_bool_binop_done:;

#line 576 "root_numpy/src/converters.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/converters.pyx":577
 *         leaflist = name
 *         if ndim > 0 and roottype.compare('C') != 0:
 *             for axis in range(ndim):             # <<<<<<<<<<<<<<
 *                 token = ('[{0:d}]'.format(dims[axis])).encode('utf-8')
 *                 leaflist.append(<char*> token)
 */

#line 577 "root_numpy/src/converters.pyx"
    __pyx_t_6 = __pyx_v_ndim;

#line 577 "root_numpy/src/converters.pyx"
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {

#line 577 "root_numpy/src/converters.pyx"
      __pyx_v_axis = __pyx_t_7;

      /* "root_numpy/src/converters.pyx":578
 *         if ndim > 0 and roottype.compare('C') != 0:
 *             for axis in range(ndim):
 *                 token = ('[{0:d}]'.format(dims[axis])).encode('utf-8')             # <<<<<<<<<<<<<<
 *                 leaflist.append(<char*> token)
 *         leaflist.append(b'/')
 */

#line 578 "root_numpy/src/converters.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_0_d, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 578, __pyx_L1_error)

#line 578 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 578 "root_numpy/src/converters.pyx"
      __pyx_t_8 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_dims[__pyx_v_axis])); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 578, __pyx_L1_error)

#line 578 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 578 "root_numpy/src/converters.pyx"
      __pyx_t_9 = NULL;

#line 578 "root_numpy/src/converters.pyx"
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 578 "root_numpy/src/converters.pyx"
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);

#line 578 "root_numpy/src/converters.pyx"
        if (likely(__pyx_t_9)) {

#line 578 "root_numpy/src/converters.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 578 "root_numpy/src/converters.pyx"
          __Pyx_INCREF(__pyx_t_9);

#line 578 "root_numpy/src/converters.pyx"
          __Pyx_INCREF(function);

#line 578 "root_numpy/src/converters.pyx"
          __Pyx_DECREF_SET(__pyx_t_4, function);

#line 578 "root_numpy/src/converters.pyx"
        }

#line 578 "root_numpy/src/converters.pyx"
      }

#line 578 "root_numpy/src/converters.pyx"
      if (!__pyx_t_9) {

#line 578 "root_numpy/src/converters.pyx"
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 578, __pyx_L1_error)

#line 578 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 578 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 578 "root_numpy/src/converters.pyx"
      } else {

#line 578 "root_numpy/src/converters.pyx"
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 578, __pyx_L1_error)

#line 578 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 578 "root_numpy/src/converters.pyx"
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;

#line 578 "root_numpy/src/converters.pyx"
        __Pyx_GIVEREF(__pyx_t_8);

#line 578 "root_numpy/src/converters.pyx"
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_8);

#line 578 "root_numpy/src/converters.pyx"
        __pyx_t_8 = 0;

#line 578 "root_numpy/src/converters.pyx"
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 578, __pyx_L1_error)

#line 578 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 578 "root_numpy/src/converters.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 578 "root_numpy/src/converters.pyx"
      }

#line 578 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 578 "root_numpy/src/converters.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 578, __pyx_L1_error)

#line 578 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 578 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 578 "root_numpy/src/converters.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 578, __pyx_L1_error)

#line 578 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 578 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 578 "root_numpy/src/converters.pyx"
      __Pyx_XDECREF_SET(__pyx_v_token, __pyx_t_3);

#line 578 "root_numpy/src/converters.pyx"
      __pyx_t_3 = 0;

      /* "root_numpy/src/converters.pyx":579
 *             for axis in range(ndim):
 *                 token = ('[{0:d}]'.format(dims[axis])).encode('utf-8')
 *                 leaflist.append(<char*> token)             # <<<<<<<<<<<<<<
 *         leaflist.append(b'/')
 *         leaflist.append(roottype)
 */

#line 579 "root_numpy/src/converters.pyx"
      __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_v_token); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(1, 579, __pyx_L1_error)

#line 579 "root_numpy/src/converters.pyx"
      __pyx_v_leaflist.append(((char *)__pyx_t_11));

#line 579 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":576
 *         # Construct leaflist name
 *         leaflist = name
 *         if ndim > 0 and roottype.compare('C') != 0:             # <<<<<<<<<<<<<<
 *             for axis in range(ndim):
 *                 token = ('[{0:d}]'.format(dims[axis])).encode('utf-8')
 */

#line 576 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":580
 *                 token = ('[{0:d}]'.format(dims[axis])).encode('utf-8')
 *                 leaflist.append(<char*> token)
 *         leaflist.append(b'/')             # <<<<<<<<<<<<<<
 *         leaflist.append(roottype)
 *         this.branch = tree.GetBranch(name.c_str())
 */

#line 580 "root_numpy/src/converters.pyx"
  __pyx_v_leaflist.append(((char *)"/"));

  /* "root_numpy/src/converters.pyx":581
 *                 leaflist.append(<char*> token)
 *         leaflist.append(b'/')
 *         leaflist.append(roottype)             # <<<<<<<<<<<<<<
 *         this.branch = tree.GetBranch(name.c_str())
 *         if this.branch == NULL:
 */

#line 581 "root_numpy/src/converters.pyx"
  __pyx_v_leaflist.append(__pyx_v_roottype);

  /* "root_numpy/src/converters.pyx":582
 *         leaflist.append(b'/')
 *         leaflist.append(roottype)
 *         this.branch = tree.GetBranch(name.c_str())             # <<<<<<<<<<<<<<
 *         if this.branch == NULL:
 *             this.branch = tree.Branch(name.c_str(), this.value, leaflist.c_str())
 */

#line 582 "root_numpy/src/converters.pyx"
  this->branch = __pyx_v_tree->GetBranch(__pyx_v_name.c_str());

  /* "root_numpy/src/converters.pyx":583
 *         leaflist.append(roottype)
 *         this.branch = tree.GetBranch(name.c_str())
 *         if this.branch == NULL:             # <<<<<<<<<<<<<<
 *             this.branch = tree.Branch(name.c_str(), this.value, leaflist.c_str())
 *         else:
 */

#line 583 "root_numpy/src/converters.pyx"
  __pyx_t_2 = ((this->branch == NULL) != 0);

#line 583 "root_numpy/src/converters.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/converters.pyx":584
 *         this.branch = tree.GetBranch(name.c_str())
 *         if this.branch == NULL:
 *             this.branch = tree.Branch(name.c_str(), this.value, leaflist.c_str())             # <<<<<<<<<<<<<<
 *         else:
 *             # check type compatibility of existing branch
 */

#line 584 "root_numpy/src/converters.pyx"
    this->branch = __pyx_v_tree->Branch(__pyx_v_name.c_str(), this->value, __pyx_v_leaflist.c_str());

    /* "root_numpy/src/converters.pyx":583
 *         leaflist.append(roottype)
 *         this.branch = tree.GetBranch(name.c_str())
 *         if this.branch == NULL:             # <<<<<<<<<<<<<<
 *             this.branch = tree.Branch(name.c_str(), this.value, leaflist.c_str())
 *         else:
 */

#line 583 "root_numpy/src/converters.pyx"
    goto __pyx_L11;

#line 583 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":587
 *         else:
 *             # check type compatibility of existing branch
 *             if leaflist.compare(string(this.branch.GetTitle())) != 0:             # <<<<<<<<<<<<<<
 *                 raise TypeError(
 *                     "field '{0}' of type '{1}' is not compatible "
 */

#line 587 "root_numpy/src/converters.pyx"
  /*else*/ {

#line 587 "root_numpy/src/converters.pyx"
    try {

#line 587 "root_numpy/src/converters.pyx"
      __pyx_t_1 = std::string(this->branch->GetTitle());

#line 587 "root_numpy/src/converters.pyx"
    } catch(...) {

#line 587 "root_numpy/src/converters.pyx"
      __Pyx_CppExn2PyErr();

#line 587 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 587, __pyx_L1_error)

#line 587 "root_numpy/src/converters.pyx"
    }

#line 587 "root_numpy/src/converters.pyx"
    __pyx_t_2 = ((__pyx_v_leaflist.compare(__pyx_t_1) != 0) != 0);

#line 587 "root_numpy/src/converters.pyx"
    if (__pyx_t_2) {

      /* "root_numpy/src/converters.pyx":590
 *                 raise TypeError(
 *                     "field '{0}' of type '{1}' is not compatible "
 *                     "with existing branch of type '{2}'".format(             # <<<<<<<<<<<<<<
 *                         name, leaflist, str(this.branch.GetTitle())))
 *             this.branch.SetAddress(this.value)
 */

#line 590 "root_numpy/src/converters.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_field_0_of_type_1_is_not_compati, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 590, __pyx_L1_error)

#line 590 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

      /* "root_numpy/src/converters.pyx":591
 *                     "field '{0}' of type '{1}' is not compatible "
 *                     "with existing branch of type '{2}'".format(
 *                         name, leaflist, str(this.branch.GetTitle())))             # <<<<<<<<<<<<<<
 *             this.branch.SetAddress(this.value)
 *         this.branch.SetStatus(1)
 */

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_10 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_name); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 591, __pyx_L1_error)

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_8 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_leaflist); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 591, __pyx_L1_error)

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_9 = __Pyx_PyStr_FromString(this->branch->GetTitle()); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 591, __pyx_L1_error)

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 591, __pyx_L1_error)

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GIVEREF(__pyx_t_9);

#line 591 "root_numpy/src/converters.pyx"
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9);

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_9 = 0;

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_12, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 591, __pyx_L1_error)

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_12 = NULL;

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_13 = 0;

#line 591 "root_numpy/src/converters.pyx"
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 591 "root_numpy/src/converters.pyx"
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);

#line 591 "root_numpy/src/converters.pyx"
        if (likely(__pyx_t_12)) {

#line 591 "root_numpy/src/converters.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 591 "root_numpy/src/converters.pyx"
          __Pyx_INCREF(__pyx_t_12);

#line 591 "root_numpy/src/converters.pyx"
          __Pyx_INCREF(function);

#line 591 "root_numpy/src/converters.pyx"
          __Pyx_DECREF_SET(__pyx_t_4, function);

#line 591 "root_numpy/src/converters.pyx"
          __pyx_t_13 = 1;

#line 591 "root_numpy/src/converters.pyx"
        }

#line 591 "root_numpy/src/converters.pyx"
      }

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_14 = PyTuple_New(3+__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 590, __pyx_L1_error)

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_14);

#line 591 "root_numpy/src/converters.pyx"
      if (__pyx_t_12) {

#line 591 "root_numpy/src/converters.pyx"
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12); __pyx_t_12 = NULL;

#line 591 "root_numpy/src/converters.pyx"
      }

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GIVEREF(__pyx_t_10);

#line 591 "root_numpy/src/converters.pyx"
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_13, __pyx_t_10);

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GIVEREF(__pyx_t_8);

#line 591 "root_numpy/src/converters.pyx"
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_13, __pyx_t_8);

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GIVEREF(__pyx_t_9);

#line 591 "root_numpy/src/converters.pyx"
      PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_13, __pyx_t_9);

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_10 = 0;

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_8 = 0;

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_9 = 0;

#line 591 "root_numpy/src/converters.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 590, __pyx_L1_error)

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 591 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "root_numpy/src/converters.pyx":588
 *             # check type compatibility of existing branch
 *             if leaflist.compare(string(this.branch.GetTitle())) != 0:
 *                 raise TypeError(             # <<<<<<<<<<<<<<
 *                     "field '{0}' of type '{1}' is not compatible "
 *                     "with existing branch of type '{2}'".format(
 */

#line 588 "root_numpy/src/converters.pyx"
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 588, __pyx_L1_error)

#line 588 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 588 "root_numpy/src/converters.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 588 "root_numpy/src/converters.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 588 "root_numpy/src/converters.pyx"
      __pyx_t_3 = 0;

#line 588 "root_numpy/src/converters.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 588, __pyx_L1_error)

#line 588 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 588 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 588 "root_numpy/src/converters.pyx"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 588 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 588 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 588, __pyx_L1_error)

      /* "root_numpy/src/converters.pyx":587
 *         else:
 *             # check type compatibility of existing branch
 *             if leaflist.compare(string(this.branch.GetTitle())) != 0:             # <<<<<<<<<<<<<<
 *                 raise TypeError(
 *                     "field '{0}' of type '{1}' is not compatible "
 */

#line 587 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":592
 *                     "with existing branch of type '{2}'".format(
 *                         name, leaflist, str(this.branch.GetTitle())))
 *             this.branch.SetAddress(this.value)             # <<<<<<<<<<<<<<
 *         this.branch.SetStatus(1)
 * 
 */

#line 592 "root_numpy/src/converters.pyx"
    this->branch->SetAddress(this->value);

#line 592 "root_numpy/src/converters.pyx"
  }

#line 592 "root_numpy/src/converters.pyx"
  __pyx_L11:;

  /* "root_numpy/src/converters.pyx":593
 *                         name, leaflist, str(this.branch.GetTitle())))
 *             this.branch.SetAddress(this.value)
 *         this.branch.SetStatus(1)             # <<<<<<<<<<<<<<
 * 
 *     __del__(self):
 */

#line 593 "root_numpy/src/converters.pyx"
  this->branch->SetStatus(1);

  /* "root_numpy/src/converters.pyx":558
 *     TBranch* branch
 * 
 *     __init__(TTree* tree, string name, string roottype,             # <<<<<<<<<<<<<<
 *              int length, int elembytes,
 *              int ndim=0, SIZE_t* dims=NULL):
 */

#line 558 "root_numpy/src/converters.pyx"


#line 558 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 558 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

#line 558 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 558 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 558 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 558 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 558 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 558 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 558 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_12);

#line 558 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_14);

#line 558 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("FixedNP2ROOTConverter.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 558 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 558 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_token);

#line 558 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 558 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":595
 *         this.branch.SetStatus(1)
 * 
 *     __del__(self):             # <<<<<<<<<<<<<<
 *         free(this.value)
 * 
 */

#line 595 "root_numpy/src/converters.pyx"


#line 595 "root_numpy/src/converters.pyx"
PyObject *__pyx_t_13_librootnumpy_FixedNP2ROOTConverter::__del__(CYTHON_UNUSED PyObject *__pyx_v_self) {

#line 595 "root_numpy/src/converters.pyx"
  PyObject *__pyx_r = NULL;

#line 595 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 595 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "root_numpy/src/converters.pyx":596
 * 
 *     __del__(self):
 *         free(this.value)             # <<<<<<<<<<<<<<
 * 
 *     void fill_from(void* source):
 */

#line 596 "root_numpy/src/converters.pyx"
  free(this->value);

  /* "root_numpy/src/converters.pyx":595
 *         this.branch.SetStatus(1)
 * 
 *     __del__(self):             # <<<<<<<<<<<<<<
 *         free(this.value)
 * 
 */

#line 595 "root_numpy/src/converters.pyx"


#line 595 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 595 "root_numpy/src/converters.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 595 "root_numpy/src/converters.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 595 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 595 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 595 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":598
 *         free(this.value)
 * 
 *     void fill_from(void* source):             # <<<<<<<<<<<<<<
 *         memcpy(this.value, source, this.nbytes)
 *         this.branch.Fill()
 */

#line 598 "root_numpy/src/converters.pyx"


#line 598 "root_numpy/src/converters.pyx"
void __pyx_t_13_librootnumpy_FixedNP2ROOTConverter::fill_from(void *__pyx_v_source) {

#line 598 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 598 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("fill_from", 0);

  /* "root_numpy/src/converters.pyx":599
 * 
 *     void fill_from(void* source):
 *         memcpy(this.value, source, this.nbytes)             # <<<<<<<<<<<<<<
 *         this.branch.Fill()
 * 
 */

#line 599 "root_numpy/src/converters.pyx"
  memcpy(this->value, __pyx_v_source, this->nbytes);

  /* "root_numpy/src/converters.pyx":600
 *     void fill_from(void* source):
 *         memcpy(this.value, source, this.nbytes)
 *         this.branch.Fill()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 600 "root_numpy/src/converters.pyx"
  this->branch->Fill();

  /* "root_numpy/src/converters.pyx":598
 *         free(this.value)
 * 
 *     void fill_from(void* source):             # <<<<<<<<<<<<<<
 *         memcpy(this.value, source, this.nbytes)
 *         this.branch.Fill()
 */

#line 598 "root_numpy/src/converters.pyx"


#line 598 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 598 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 598 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/converters.pyx":603
 * 
 * 
 * cdef NP2ROOTConverter* find_np2root_converter(TTree* tree, name, dtype):             # <<<<<<<<<<<<<<
 *     # TODO:
 *     # np.float16 needs special treatment. ROOT doesn't support 16-bit floats.
 */

#line 603 "root_numpy/src/converters.pyx"


#line 603 "root_numpy/src/converters.pyx"
static __pyx_t_13_librootnumpy_NP2ROOTConverter *__pyx_f_13_librootnumpy_find_np2root_converter(TTree *__pyx_v_tree, PyObject *__pyx_v_name, PyObject *__pyx_v_dtype) {
  __pyx_t_13_librootnumpy_NP2ROOTConverter *__pyx_v_conv
#line 603 "root_numpy/src/converters.pyx"
;
  int __pyx_v_axis
#line 603 "root_numpy/src/converters.pyx"
;
  int __pyx_v_ndim
#line 603 "root_numpy/src/converters.pyx"
;
  int __pyx_v_length
#line 603 "root_numpy/src/converters.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t *__pyx_v_dims
#line 603 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_subdtype = NULL
#line 603 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_shape = NULL
#line 603 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_elembytes = NULL
#line 603 "root_numpy/src/converters.pyx"
;
  PyObject *__pyx_v_roottype = NULL
#line 603 "root_numpy/src/converters.pyx"
;

#line 603 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_NP2ROOTConverter *__pyx_r;

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyDeclarations

#line 603 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 603 "root_numpy/src/converters.pyx"
  int __pyx_t_2;

#line 603 "root_numpy/src/converters.pyx"
  int __pyx_t_3;

#line 603 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 603 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 603 "root_numpy/src/converters.pyx"
  PyObject *(*__pyx_t_6)(PyObject *);

#line 603 "root_numpy/src/converters.pyx"
  Py_ssize_t __pyx_t_7;

#line 603 "root_numpy/src/converters.pyx"
  int __pyx_t_8;

#line 603 "root_numpy/src/converters.pyx"
  int __pyx_t_9;

#line 603 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_10;

#line 603 "root_numpy/src/converters.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 603 "root_numpy/src/converters.pyx"
  std::string __pyx_t_12;

#line 603 "root_numpy/src/converters.pyx"
  std::string __pyx_t_13;

#line 603 "root_numpy/src/converters.pyx"
  __pyx_t_13_librootnumpy_FixedNP2ROOTConverter *__pyx_t_14;

#line 603 "root_numpy/src/converters.pyx"
  struct __pyx_opt_args_21FixedNP2ROOTConverter___init__ __pyx_t_15;

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_RefNannySetupContext("find_np2root_converter", 0);

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_v_dtype);

  /* "root_numpy/src/converters.pyx":607
 *     # np.float16 needs special treatment. ROOT doesn't support 16-bit floats.
 *     # Handle np.object (array) columns
 *     cdef NP2ROOTConverter* conv = NULL             # <<<<<<<<<<<<<<
 *     cdef int axis, ndim = 0
 *     cdef int length = 1
 */

#line 607 "root_numpy/src/converters.pyx"
  __pyx_v_conv = NULL;

  /* "root_numpy/src/converters.pyx":608
 *     # Handle np.object (array) columns
 *     cdef NP2ROOTConverter* conv = NULL
 *     cdef int axis, ndim = 0             # <<<<<<<<<<<<<<
 *     cdef int length = 1
 *     cdef SIZE_t* dims = NULL
 */

#line 608 "root_numpy/src/converters.pyx"
  __pyx_v_ndim = 0;

  /* "root_numpy/src/converters.pyx":609
 *     cdef NP2ROOTConverter* conv = NULL
 *     cdef int axis, ndim = 0
 *     cdef int length = 1             # <<<<<<<<<<<<<<
 *     cdef SIZE_t* dims = NULL
 *     subdtype = dtype.subdtype
 */

#line 609 "root_numpy/src/converters.pyx"
  __pyx_v_length = 1;

  /* "root_numpy/src/converters.pyx":610
 *     cdef int axis, ndim = 0
 *     cdef int length = 1
 *     cdef SIZE_t* dims = NULL             # <<<<<<<<<<<<<<
 *     subdtype = dtype.subdtype
 *     if subdtype is not None:
 */

#line 610 "root_numpy/src/converters.pyx"
  __pyx_v_dims = NULL;

  /* "root_numpy/src/converters.pyx":611
 *     cdef int length = 1
 *     cdef SIZE_t* dims = NULL
 *     subdtype = dtype.subdtype             # <<<<<<<<<<<<<<
 *     if subdtype is not None:
 *         # Fixed-size subarray type
 */

#line 611 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_n_s_subdtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 611, __pyx_L1_error)

#line 611 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 611 "root_numpy/src/converters.pyx"
  __pyx_v_subdtype = __pyx_t_1;

#line 611 "root_numpy/src/converters.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":612
 *     cdef SIZE_t* dims = NULL
 *     subdtype = dtype.subdtype
 *     if subdtype is not None:             # <<<<<<<<<<<<<<
 *         # Fixed-size subarray type
 *         dtype, shape = subdtype
 */

#line 612 "root_numpy/src/converters.pyx"
  __pyx_t_2 = (__pyx_v_subdtype != Py_None);

#line 612 "root_numpy/src/converters.pyx"
  __pyx_t_3 = (__pyx_t_2 != 0);

#line 612 "root_numpy/src/converters.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/converters.pyx":614
 *     if subdtype is not None:
 *         # Fixed-size subarray type
 *         dtype, shape = subdtype             # <<<<<<<<<<<<<<
 *         ndim = len(shape)
 *         dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))
 */

#line 614 "root_numpy/src/converters.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_v_subdtype))) || (PyList_CheckExact(__pyx_v_subdtype))) {

#line 614 "root_numpy/src/converters.pyx"
      PyObject* sequence = __pyx_v_subdtype;

#line 614 "root_numpy/src/converters.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 614 "root_numpy/src/converters.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 614 "root_numpy/src/converters.pyx"
      #else

#line 614 "root_numpy/src/converters.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 614 "root_numpy/src/converters.pyx"
      #endif

#line 614 "root_numpy/src/converters.pyx"
      if (unlikely(size != 2)) {

#line 614 "root_numpy/src/converters.pyx"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 614 "root_numpy/src/converters.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 614 "root_numpy/src/converters.pyx"
        __PYX_ERR(1, 614, __pyx_L1_error)

#line 614 "root_numpy/src/converters.pyx"
      }

#line 614 "root_numpy/src/converters.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 614 "root_numpy/src/converters.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 614 "root_numpy/src/converters.pyx"
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 

#line 614 "root_numpy/src/converters.pyx"
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 

#line 614 "root_numpy/src/converters.pyx"
      } else {

#line 614 "root_numpy/src/converters.pyx"
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 

#line 614 "root_numpy/src/converters.pyx"
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 

#line 614 "root_numpy/src/converters.pyx"
      }

#line 614 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_1);

#line 614 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 614 "root_numpy/src/converters.pyx"
      #else

#line 614 "root_numpy/src/converters.pyx"
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)

#line 614 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 614 "root_numpy/src/converters.pyx"
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 614, __pyx_L1_error)

#line 614 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 614 "root_numpy/src/converters.pyx"
      #endif

#line 614 "root_numpy/src/converters.pyx"
    } else {

#line 614 "root_numpy/src/converters.pyx"
      Py_ssize_t index = -1;

#line 614 "root_numpy/src/converters.pyx"
      __pyx_t_5 = PyObject_GetIter(__pyx_v_subdtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 614, __pyx_L1_error)

#line 614 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 614 "root_numpy/src/converters.pyx"
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) 
#line 614 "root_numpy/src/converters.pyx"
goto __pyx_L4_unpacking_failed;

#line 614 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 614 "root_numpy/src/converters.pyx"
goto __pyx_L4_unpacking_failed;

#line 614 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 614 "root_numpy/src/converters.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(1, 614, __pyx_L1_error)

#line 614 "root_numpy/src/converters.pyx"
      __pyx_t_6 = NULL;

#line 614 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 614 "root_numpy/src/converters.pyx"
      goto __pyx_L5_unpacking_done;

#line 614 "root_numpy/src/converters.pyx"
      __pyx_L4_unpacking_failed:;

#line 614 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 614 "root_numpy/src/converters.pyx"
      __pyx_t_6 = NULL;

#line 614 "root_numpy/src/converters.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 614 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 614, __pyx_L1_error)

#line 614 "root_numpy/src/converters.pyx"
      __pyx_L5_unpacking_done:;

#line 614 "root_numpy/src/converters.pyx"
    }

#line 614 "root_numpy/src/converters.pyx"
    __Pyx_DECREF_SET(__pyx_v_dtype, __pyx_t_1);

#line 614 "root_numpy/src/converters.pyx"
    __pyx_t_1 = 0;

#line 614 "root_numpy/src/converters.pyx"
    __pyx_v_shape = __pyx_t_4;

#line 614 "root_numpy/src/converters.pyx"
    __pyx_t_4 = 0;

    /* "root_numpy/src/converters.pyx":615
 *         # Fixed-size subarray type
 *         dtype, shape = subdtype
 *         ndim = len(shape)             # <<<<<<<<<<<<<<
 *         dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))
 *         if dims == NULL:
 */

#line 615 "root_numpy/src/converters.pyx"
    __pyx_t_7 = PyObject_Length(__pyx_v_shape); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(1, 615, __pyx_L1_error)

#line 615 "root_numpy/src/converters.pyx"
    __pyx_v_ndim = __pyx_t_7;

    /* "root_numpy/src/converters.pyx":616
 *         dtype, shape = subdtype
 *         ndim = len(shape)
 *         dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))             # <<<<<<<<<<<<<<
 *         if dims == NULL:
 *             raise MemoryError("could not allocate %d bytes" % (ndim * sizeof(SIZE_t)))
 */

#line 616 "root_numpy/src/converters.pyx"
    __pyx_v_dims = ((__pyx_t_13_librootnumpy_SIZE_t *)malloc((__pyx_v_ndim * (sizeof(__pyx_t_13_librootnumpy_SIZE_t)))));

    /* "root_numpy/src/converters.pyx":617
 *         ndim = len(shape)
 *         dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))
 *         if dims == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("could not allocate %d bytes" % (ndim * sizeof(SIZE_t)))
 *         for axis in range(ndim):
 */

#line 617 "root_numpy/src/converters.pyx"
    __pyx_t_3 = ((__pyx_v_dims == NULL) != 0);

#line 617 "root_numpy/src/converters.pyx"
    if (__pyx_t_3) {

      /* "root_numpy/src/converters.pyx":618
 *         dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))
 *         if dims == NULL:
 *             raise MemoryError("could not allocate %d bytes" % (ndim * sizeof(SIZE_t)))             # <<<<<<<<<<<<<<
 *         for axis in range(ndim):
 *             dims[axis] = shape[axis]
 */

#line 618 "root_numpy/src/converters.pyx"
      __pyx_t_4 = __Pyx_PyInt_FromSize_t((__pyx_v_ndim * (sizeof(__pyx_t_13_librootnumpy_SIZE_t)))); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 618, __pyx_L1_error)

#line 618 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 618 "root_numpy/src/converters.pyx"
      __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_could_not_allocate_d_bytes, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)

#line 618 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 618 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 618 "root_numpy/src/converters.pyx"
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 618, __pyx_L1_error)

#line 618 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 618 "root_numpy/src/converters.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 618 "root_numpy/src/converters.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 618 "root_numpy/src/converters.pyx"
      __pyx_t_1 = 0;

#line 618 "root_numpy/src/converters.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)

#line 618 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 618 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 618 "root_numpy/src/converters.pyx"
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 618 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 618 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 618, __pyx_L1_error)

      /* "root_numpy/src/converters.pyx":617
 *         ndim = len(shape)
 *         dims = <SIZE_t*> malloc(ndim * sizeof(SIZE_t))
 *         if dims == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("could not allocate %d bytes" % (ndim * sizeof(SIZE_t)))
 *         for axis in range(ndim):
 */

#line 617 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":619
 *         if dims == NULL:
 *             raise MemoryError("could not allocate %d bytes" % (ndim * sizeof(SIZE_t)))
 *         for axis in range(ndim):             # <<<<<<<<<<<<<<
 *             dims[axis] = shape[axis]
 *             length *= dims[axis]
 */

#line 619 "root_numpy/src/converters.pyx"
    __pyx_t_8 = __pyx_v_ndim;

#line 619 "root_numpy/src/converters.pyx"
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {

#line 619 "root_numpy/src/converters.pyx"
      __pyx_v_axis = __pyx_t_9;

      /* "root_numpy/src/converters.pyx":620
 *             raise MemoryError("could not allocate %d bytes" % (ndim * sizeof(SIZE_t)))
 *         for axis in range(ndim):
 *             dims[axis] = shape[axis]             # <<<<<<<<<<<<<<
 *             length *= dims[axis]
 *     if dtype in TYPES_NUMPY2ROOT:
 */

#line 620 "root_numpy/src/converters.pyx"
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_shape, __pyx_v_axis, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 620, __pyx_L1_error)

#line 620 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 620 "root_numpy/src/converters.pyx"
      __pyx_t_10 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_10 == (npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(1, 620, __pyx_L1_error)

#line 620 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 620 "root_numpy/src/converters.pyx"
      (__pyx_v_dims[__pyx_v_axis]) = __pyx_t_10;

      /* "root_numpy/src/converters.pyx":621
 *         for axis in range(ndim):
 *             dims[axis] = shape[axis]
 *             length *= dims[axis]             # <<<<<<<<<<<<<<
 *     if dtype in TYPES_NUMPY2ROOT:
 *         elembytes, roottype = TYPES_NUMPY2ROOT[dtype]
 */

#line 621 "root_numpy/src/converters.pyx"
      __pyx_v_length = (__pyx_v_length * (__pyx_v_dims[__pyx_v_axis]));

#line 621 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":612
 *     cdef SIZE_t* dims = NULL
 *     subdtype = dtype.subdtype
 *     if subdtype is not None:             # <<<<<<<<<<<<<<
 *         # Fixed-size subarray type
 *         dtype, shape = subdtype
 */

#line 612 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":622
 *             dims[axis] = shape[axis]
 *             length *= dims[axis]
 *     if dtype in TYPES_NUMPY2ROOT:             # <<<<<<<<<<<<<<
 *         elembytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         conv = new FixedNP2ROOTConverter(tree, name, roottype, length, elembytes, ndim, dims)
 */

#line 622 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES_NUMPY2ROOT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 622, __pyx_L1_error)

#line 622 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 622 "root_numpy/src/converters.pyx"
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_dtype, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 622, __pyx_L1_error)

#line 622 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 622 "root_numpy/src/converters.pyx"
  __pyx_t_2 = (__pyx_t_3 != 0);

#line 622 "root_numpy/src/converters.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/converters.pyx":623
 *             length *= dims[axis]
 *     if dtype in TYPES_NUMPY2ROOT:
 *         elembytes, roottype = TYPES_NUMPY2ROOT[dtype]             # <<<<<<<<<<<<<<
 *         conv = new FixedNP2ROOTConverter(tree, name, roottype, length, elembytes, ndim, dims)
 *     elif dtype.kind == 'S':
 */

#line 623 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES_NUMPY2ROOT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)

#line 623 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 623 "root_numpy/src/converters.pyx"
    __pyx_t_4 = PyObject_GetItem(__pyx_t_1, __pyx_v_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 623, __pyx_L1_error)

#line 623 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 623 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 623 "root_numpy/src/converters.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {

#line 623 "root_numpy/src/converters.pyx"
      PyObject* sequence = __pyx_t_4;

#line 623 "root_numpy/src/converters.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 623 "root_numpy/src/converters.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 623 "root_numpy/src/converters.pyx"
      #else

#line 623 "root_numpy/src/converters.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 623 "root_numpy/src/converters.pyx"
      #endif

#line 623 "root_numpy/src/converters.pyx"
      if (unlikely(size != 2)) {

#line 623 "root_numpy/src/converters.pyx"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 623 "root_numpy/src/converters.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 623 "root_numpy/src/converters.pyx"
        __PYX_ERR(1, 623, __pyx_L1_error)

#line 623 "root_numpy/src/converters.pyx"
      }

#line 623 "root_numpy/src/converters.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 623 "root_numpy/src/converters.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 623 "root_numpy/src/converters.pyx"
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 

#line 623 "root_numpy/src/converters.pyx"
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 

#line 623 "root_numpy/src/converters.pyx"
      } else {

#line 623 "root_numpy/src/converters.pyx"
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 

#line 623 "root_numpy/src/converters.pyx"
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 

#line 623 "root_numpy/src/converters.pyx"
      }

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_1);

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 623 "root_numpy/src/converters.pyx"
      #else

#line 623 "root_numpy/src/converters.pyx"
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 623, __pyx_L1_error)

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 623 "root_numpy/src/converters.pyx"
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 623, __pyx_L1_error)

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 623 "root_numpy/src/converters.pyx"
      #endif

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 623 "root_numpy/src/converters.pyx"
    } else {

#line 623 "root_numpy/src/converters.pyx"
      Py_ssize_t index = -1;

#line 623 "root_numpy/src/converters.pyx"
      __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 623, __pyx_L1_error)

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_11);

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 623 "root_numpy/src/converters.pyx"
      __pyx_t_6 = Py_TYPE(__pyx_t_11)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_11); if (unlikely(!__pyx_t_1)) 
#line 623 "root_numpy/src/converters.pyx"
goto __pyx_L10_unpacking_failed;

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_5 = __pyx_t_6(__pyx_t_11); if (unlikely(!__pyx_t_5)) 
#line 623 "root_numpy/src/converters.pyx"
goto __pyx_L10_unpacking_failed;

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 623 "root_numpy/src/converters.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_11), 2) < 0) __PYX_ERR(1, 623, __pyx_L1_error)

#line 623 "root_numpy/src/converters.pyx"
      __pyx_t_6 = NULL;

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 623 "root_numpy/src/converters.pyx"
      goto __pyx_L11_unpacking_done;

#line 623 "root_numpy/src/converters.pyx"
      __pyx_L10_unpacking_failed:;

#line 623 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 623 "root_numpy/src/converters.pyx"
      __pyx_t_6 = NULL;

#line 623 "root_numpy/src/converters.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 623 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 623, __pyx_L1_error)

#line 623 "root_numpy/src/converters.pyx"
      __pyx_L11_unpacking_done:;

#line 623 "root_numpy/src/converters.pyx"
    }

#line 623 "root_numpy/src/converters.pyx"
    __pyx_v_elembytes = __pyx_t_1;

#line 623 "root_numpy/src/converters.pyx"
    __pyx_t_1 = 0;

#line 623 "root_numpy/src/converters.pyx"
    __pyx_v_roottype = __pyx_t_5;

#line 623 "root_numpy/src/converters.pyx"
    __pyx_t_5 = 0;

    /* "root_numpy/src/converters.pyx":624
 *     if dtype in TYPES_NUMPY2ROOT:
 *         elembytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         conv = new FixedNP2ROOTConverter(tree, name, roottype, length, elembytes, ndim, dims)             # <<<<<<<<<<<<<<
 *     elif dtype.kind == 'S':
 *         conv = new FixedNP2ROOTConverter(tree, name, 'C', dtype.itemsize, 1)
 */

#line 624 "root_numpy/src/converters.pyx"
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 624, __pyx_L1_error)

#line 624 "root_numpy/src/converters.pyx"
    __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_roottype); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 624, __pyx_L1_error)

#line 624 "root_numpy/src/converters.pyx"
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_elembytes); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 624, __pyx_L1_error)

#line 624 "root_numpy/src/converters.pyx"
    __pyx_t_15.__pyx_n = 2;

#line 624 "root_numpy/src/converters.pyx"
    __pyx_t_15.ndim = __pyx_v_ndim;

#line 624 "root_numpy/src/converters.pyx"
    __pyx_t_15.dims = __pyx_v_dims;

#line 624 "root_numpy/src/converters.pyx"
    __pyx_t_14 = new __pyx_t_13_librootnumpy_FixedNP2ROOTConverter(__pyx_v_tree, __pyx_t_12, __pyx_t_13, __pyx_v_length, __pyx_t_8, &__pyx_t_15); 

#line 624 "root_numpy/src/converters.pyx"
    __pyx_v_conv = __pyx_t_14;

    /* "root_numpy/src/converters.pyx":622
 *             dims[axis] = shape[axis]
 *             length *= dims[axis]
 *     if dtype in TYPES_NUMPY2ROOT:             # <<<<<<<<<<<<<<
 *         elembytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         conv = new FixedNP2ROOTConverter(tree, name, roottype, length, elembytes, ndim, dims)
 */

#line 622 "root_numpy/src/converters.pyx"
    goto __pyx_L9;

#line 622 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":625
 *         elembytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         conv = new FixedNP2ROOTConverter(tree, name, roottype, length, elembytes, ndim, dims)
 *     elif dtype.kind == 'S':             # <<<<<<<<<<<<<<
 *         conv = new FixedNP2ROOTConverter(tree, name, 'C', dtype.itemsize, 1)
 *     free(dims)
 */

#line 625 "root_numpy/src/converters.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_n_s_kind); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 625, __pyx_L1_error)

#line 625 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 625 "root_numpy/src/converters.pyx"
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_S, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 625, __pyx_L1_error)

#line 625 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 625 "root_numpy/src/converters.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/converters.pyx":626
 *         conv = new FixedNP2ROOTConverter(tree, name, roottype, length, elembytes, ndim, dims)
 *     elif dtype.kind == 'S':
 *         conv = new FixedNP2ROOTConverter(tree, name, 'C', dtype.itemsize, 1)             # <<<<<<<<<<<<<<
 *     free(dims)
 *     return conv
 */

#line 626 "root_numpy/src/converters.pyx"
    __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 626, __pyx_L1_error)

#line 626 "root_numpy/src/converters.pyx"
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_C); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 626, __pyx_L1_error)

#line 626 "root_numpy/src/converters.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 626, __pyx_L1_error)

#line 626 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 626 "root_numpy/src/converters.pyx"
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 626, __pyx_L1_error)

#line 626 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 626 "root_numpy/src/converters.pyx"
    __pyx_v_conv = new __pyx_t_13_librootnumpy_FixedNP2ROOTConverter(__pyx_v_tree, __pyx_t_13, __pyx_t_12, __pyx_t_8, 1, NULL);

    /* "root_numpy/src/converters.pyx":625
 *         elembytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         conv = new FixedNP2ROOTConverter(tree, name, roottype, length, elembytes, ndim, dims)
 *     elif dtype.kind == 'S':             # <<<<<<<<<<<<<<
 *         conv = new FixedNP2ROOTConverter(tree, name, 'C', dtype.itemsize, 1)
 *     free(dims)
 */

#line 625 "root_numpy/src/converters.pyx"
  }

#line 625 "root_numpy/src/converters.pyx"
  __pyx_L9:;

  /* "root_numpy/src/converters.pyx":627
 *     elif dtype.kind == 'S':
 *         conv = new FixedNP2ROOTConverter(tree, name, 'C', dtype.itemsize, 1)
 *     free(dims)             # <<<<<<<<<<<<<<
 *     return conv
 */

#line 627 "root_numpy/src/converters.pyx"
  free(__pyx_v_dims);

  /* "root_numpy/src/converters.pyx":628
 *         conv = new FixedNP2ROOTConverter(tree, name, 'C', dtype.itemsize, 1)
 *     free(dims)
 *     return conv             # <<<<<<<<<<<<<<
 */

#line 628 "root_numpy/src/converters.pyx"
  __pyx_r = __pyx_v_conv;

#line 628 "root_numpy/src/converters.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/converters.pyx":603
 * 
 * 
 * cdef NP2ROOTConverter* find_np2root_converter(TTree* tree, name, dtype):             # <<<<<<<<<<<<<<
 *     # TODO:
 *     # np.float16 needs special treatment. ROOT doesn't support 16-bit floats.
 */

#line 603 "root_numpy/src/converters.pyx"


#line 603 "root_numpy/src/converters.pyx"
  /* function exit code */

#line 603 "root_numpy/src/converters.pyx"
  __pyx_L1_error:;

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.find_np2root_converter", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);

#line 603 "root_numpy/src/converters.pyx"
  __pyx_r = 0;

#line 603 "root_numpy/src/converters.pyx"
  __pyx_L0:;

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_subdtype);

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_shape);

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_elembytes);

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_roottype);

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_XDECREF(__pyx_v_dtype);

#line 603 "root_numpy/src/converters.pyx"
  __Pyx_RefNannyFinishContext();

#line 603 "root_numpy/src/converters.pyx"
  return __pyx_r;

#line 603 "root_numpy/src/converters.pyx"
}

/* "root_numpy/src/tree.pyx":4
 * 
 * 
 * cdef list_objects_recursive(TDirectory* rdir, objects, vector[TClass*]& classes, path=""):             # <<<<<<<<<<<<<<
 *     cdef TList* keys = rdir.GetListOfKeys()
 *     if keys == NULL:
 */

#line 4 "root_numpy/src/tree.pyx"


#line 4 "root_numpy/src/tree.pyx"
static PyObject *__pyx_f_13_librootnumpy_list_objects_recursive(TDirectory *__pyx_v_rdir, PyObject *__pyx_v_objects, std::vector<TClass *>  &__pyx_v_classes, struct __pyx_opt_args_13_librootnumpy_list_objects_recursive *__pyx_optional_args) {

#line 4 "root_numpy/src/tree.pyx"
  PyObject *__pyx_v_path = ((PyObject *)__pyx_kp_s__15);
  TList *__pyx_v_keys
#line 4 "root_numpy/src/tree.pyx"
;
  TClass *__pyx_v_tclass
#line 4 "root_numpy/src/tree.pyx"
;
  std::vector<TClass *> ::iterator __pyx_v_it
#line 4 "root_numpy/src/tree.pyx"
;
  int __pyx_v_nkeys
#line 4 "root_numpy/src/tree.pyx"
;
  TKey *__pyx_v_key
#line 4 "root_numpy/src/tree.pyx"
;
  int __pyx_v_i
#line 4 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_clsname = NULL
#line 4 "root_numpy/src/tree.pyx"
;

#line 4 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 4 "root_numpy/src/tree.pyx"
  int __pyx_t_1;

#line 4 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 4 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 4 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 4 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 4 "root_numpy/src/tree.pyx"
  int __pyx_t_6;

#line 4 "root_numpy/src/tree.pyx"
  int __pyx_t_7;

#line 4 "root_numpy/src/tree.pyx"
  const char *__pyx_t_8;

#line 4 "root_numpy/src/tree.pyx"
  int __pyx_t_9;

#line 4 "root_numpy/src/tree.pyx"
  struct __pyx_opt_args_13_librootnumpy_list_objects_recursive __pyx_t_10;

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_objects_recursive", 0);

#line 4 "root_numpy/src/tree.pyx"
  if (__pyx_optional_args) {

#line 4 "root_numpy/src/tree.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 4 "root_numpy/src/tree.pyx"
      __pyx_v_path = __pyx_optional_args->path;

#line 4 "root_numpy/src/tree.pyx"
    }

#line 4 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":5
 * 
 * cdef list_objects_recursive(TDirectory* rdir, objects, vector[TClass*]& classes, path=""):
 *     cdef TList* keys = rdir.GetListOfKeys()             # <<<<<<<<<<<<<<
 *     if keys == NULL:
 *         raise IOError("unable to get keys in {0}".format(path))
 */

#line 5 "root_numpy/src/tree.pyx"
  __pyx_v_keys = __pyx_v_rdir->GetListOfKeys();

  /* "root_numpy/src/tree.pyx":6
 * cdef list_objects_recursive(TDirectory* rdir, objects, vector[TClass*]& classes, path=""):
 *     cdef TList* keys = rdir.GetListOfKeys()
 *     if keys == NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("unable to get keys in {0}".format(path))
 *     cdef TClass* tclass
 */

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((__pyx_v_keys == NULL) != 0);

#line 6 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":7
 *     cdef TList* keys = rdir.GetListOfKeys()
 *     if keys == NULL:
 *         raise IOError("unable to get keys in {0}".format(path))             # <<<<<<<<<<<<<<
 *     cdef TClass* tclass
 *     cdef vector[TClass*].iterator it
 */

#line 7 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_unable_to_get_keys_in_0, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)

#line 7 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 7 "root_numpy/src/tree.pyx"
    __pyx_t_4 = NULL;

#line 7 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {

#line 7 "root_numpy/src/tree.pyx"
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 7 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_4)) {

#line 7 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 7 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_4);

#line 7 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 7 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 7 "root_numpy/src/tree.pyx"
      }

#line 7 "root_numpy/src/tree.pyx"
    }

#line 7 "root_numpy/src/tree.pyx"
    if (!__pyx_t_4) {

#line 7 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)

#line 7 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 7 "root_numpy/src/tree.pyx"
    } else {

#line 7 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 7, __pyx_L1_error)

#line 7 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 7 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 7 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_path);

#line 7 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_path);

#line 7 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_path);

#line 7 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)

#line 7 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 7 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 7 "root_numpy/src/tree.pyx"
    }

#line 7 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 7 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)

#line 7 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 7 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 7 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 7 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

#line 7 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)

#line 7 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 7 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 7 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 7 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 7 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 7, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":6
 * cdef list_objects_recursive(TDirectory* rdir, objects, vector[TClass*]& classes, path=""):
 *     cdef TList* keys = rdir.GetListOfKeys()
 *     if keys == NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("unable to get keys in {0}".format(path))
 *     cdef TClass* tclass
 */

#line 6 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":10
 *     cdef TClass* tclass
 *     cdef vector[TClass*].iterator it
 *     cdef int nkeys = keys.GetEntries()             # <<<<<<<<<<<<<<
 *     cdef TKey* key
 *     for i in range(nkeys):
 */

#line 10 "root_numpy/src/tree.pyx"
  __pyx_v_nkeys = __pyx_v_keys->GetEntries();

  /* "root_numpy/src/tree.pyx":12
 *     cdef int nkeys = keys.GetEntries()
 *     cdef TKey* key
 *     for i in range(nkeys):             # <<<<<<<<<<<<<<
 *         key = <TKey*> keys.At(i)
 *         clsname = str(key.GetClassName())
 */

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_6 = __pyx_v_nkeys;

#line 12 "root_numpy/src/tree.pyx"
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {

#line 12 "root_numpy/src/tree.pyx"
    __pyx_v_i = __pyx_t_7;

    /* "root_numpy/src/tree.pyx":13
 *     cdef TKey* key
 *     for i in range(nkeys):
 *         key = <TKey*> keys.At(i)             # <<<<<<<<<<<<<<
 *         clsname = str(key.GetClassName())
 *         if not classes.empty():
 */

#line 13 "root_numpy/src/tree.pyx"
    __pyx_v_key = ((TKey *)__pyx_v_keys->At(__pyx_v_i));

    /* "root_numpy/src/tree.pyx":14
 *     for i in range(nkeys):
 *         key = <TKey*> keys.At(i)
 *         clsname = str(key.GetClassName())             # <<<<<<<<<<<<<<
 *         if not classes.empty():
 *             tclass = GetClass(clsname, True, True)
 */

#line 14 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_key->GetClassName()); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 14, __pyx_L1_error)

#line 14 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 14 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 14, __pyx_L1_error)

#line 14 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 14 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 14 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 14 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

#line 14 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 14, __pyx_L1_error)

#line 14 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 14 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 14 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF_SET(__pyx_v_clsname, __pyx_t_2);

#line 14 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":15
 *         key = <TKey*> keys.At(i)
 *         clsname = str(key.GetClassName())
 *         if not classes.empty():             # <<<<<<<<<<<<<<
 *             tclass = GetClass(clsname, True, True)
 *             if tclass != NULL:
 */

#line 15 "root_numpy/src/tree.pyx"
    __pyx_t_1 = ((!(__pyx_v_classes.empty() != 0)) != 0);

#line 15 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":16
 *         clsname = str(key.GetClassName())
 *         if not classes.empty():
 *             tclass = GetClass(clsname, True, True)             # <<<<<<<<<<<<<<
 *             if tclass != NULL:
 *                 it = classes.begin()
 */

#line 16 "root_numpy/src/tree.pyx"
      __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_clsname); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(2, 16, __pyx_L1_error)

#line 16 "root_numpy/src/tree.pyx"
      __pyx_v_tclass = TClass::GetClass(__pyx_t_8, 1, 1);

      /* "root_numpy/src/tree.pyx":17
 *         if not classes.empty():
 *             tclass = GetClass(clsname, True, True)
 *             if tclass != NULL:             # <<<<<<<<<<<<<<
 *                 it = classes.begin()
 *                 while it != classes.end():
 */

#line 17 "root_numpy/src/tree.pyx"
      __pyx_t_1 = ((__pyx_v_tclass != NULL) != 0);

#line 17 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":18
 *             tclass = GetClass(clsname, True, True)
 *             if tclass != NULL:
 *                 it = classes.begin()             # <<<<<<<<<<<<<<
 *                 while it != classes.end():
 *                     if tclass.InheritsFrom(deref(it)):
 */

#line 18 "root_numpy/src/tree.pyx"
        __pyx_v_it = __pyx_v_classes.begin();

        /* "root_numpy/src/tree.pyx":19
 *             if tclass != NULL:
 *                 it = classes.begin()
 *                 while it != classes.end():             # <<<<<<<<<<<<<<
 *                     if tclass.InheritsFrom(deref(it)):
 *                         objects.append(path + str(key.GetName()))
 */

#line 19 "root_numpy/src/tree.pyx"
        while (1) {

#line 19 "root_numpy/src/tree.pyx"
          __pyx_t_1 = ((__pyx_v_it != __pyx_v_classes.end()) != 0);

#line 19 "root_numpy/src/tree.pyx"
          if (!__pyx_t_1) break;

          /* "root_numpy/src/tree.pyx":20
 *                 it = classes.begin()
 *                 while it != classes.end():
 *                     if tclass.InheritsFrom(deref(it)):             # <<<<<<<<<<<<<<
 *                         objects.append(path + str(key.GetName()))
 *                         break
 */

#line 20 "root_numpy/src/tree.pyx"
          __pyx_t_1 = (__pyx_v_tclass->InheritsFrom((*__pyx_v_it)) != 0);

#line 20 "root_numpy/src/tree.pyx"
          if (__pyx_t_1) {

            /* "root_numpy/src/tree.pyx":21
 *                 while it != classes.end():
 *                     if tclass.InheritsFrom(deref(it)):
 *                         objects.append(path + str(key.GetName()))             # <<<<<<<<<<<<<<
 *                         break
 *                     inc(it)
 */

#line 21 "root_numpy/src/tree.pyx"
            __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_key->GetName()); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 21, __pyx_L1_error)

#line 21 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 21 "root_numpy/src/tree.pyx"
            __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 21, __pyx_L1_error)

#line 21 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_3);

#line 21 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_2);

#line 21 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 21 "root_numpy/src/tree.pyx"
            __pyx_t_2 = 0;

#line 21 "root_numpy/src/tree.pyx"
            __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 21, __pyx_L1_error)

#line 21 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 21 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 21 "root_numpy/src/tree.pyx"
            __pyx_t_3 = PyNumber_Add(__pyx_v_path, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 21, __pyx_L1_error)

#line 21 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_3);

#line 21 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 21 "root_numpy/src/tree.pyx"
            __pyx_t_9 = __Pyx_PyObject_Append(__pyx_v_objects, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 21, __pyx_L1_error)

#line 21 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "root_numpy/src/tree.pyx":22
 *                     if tclass.InheritsFrom(deref(it)):
 *                         objects.append(path + str(key.GetName()))
 *                         break             # <<<<<<<<<<<<<<
 *                     inc(it)
 *         else:
 */

#line 22 "root_numpy/src/tree.pyx"
            goto __pyx_L9_break;

            /* "root_numpy/src/tree.pyx":20
 *                 it = classes.begin()
 *                 while it != classes.end():
 *                     if tclass.InheritsFrom(deref(it)):             # <<<<<<<<<<<<<<
 *                         objects.append(path + str(key.GetName()))
 *                         break
 */

#line 20 "root_numpy/src/tree.pyx"
          }

          /* "root_numpy/src/tree.pyx":23
 *                         objects.append(path + str(key.GetName()))
 *                         break
 *                     inc(it)             # <<<<<<<<<<<<<<
 *         else:
 *             objects.append(path + str(key.GetName()))
 */

#line 23 "root_numpy/src/tree.pyx"
          (++__pyx_v_it);

#line 23 "root_numpy/src/tree.pyx"
        }

#line 23 "root_numpy/src/tree.pyx"
        __pyx_L9_break:;

        /* "root_numpy/src/tree.pyx":17
 *         if not classes.empty():
 *             tclass = GetClass(clsname, True, True)
 *             if tclass != NULL:             # <<<<<<<<<<<<<<
 *                 it = classes.begin()
 *                 while it != classes.end():
 */

#line 17 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":15
 *         key = <TKey*> keys.At(i)
 *         clsname = str(key.GetClassName())
 *         if not classes.empty():             # <<<<<<<<<<<<<<
 *             tclass = GetClass(clsname, True, True)
 *             if tclass != NULL:
 */

#line 15 "root_numpy/src/tree.pyx"
      goto __pyx_L6;

#line 15 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":25
 *                     inc(it)
 *         else:
 *             objects.append(path + str(key.GetName()))             # <<<<<<<<<<<<<<
 *         if clsname == "TDirectoryFile":
 *             # recursively enter lower directory levels
 */

#line 25 "root_numpy/src/tree.pyx"
    /*else*/ {

#line 25 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyStr_FromString(__pyx_v_key->GetName()); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 25, __pyx_L1_error)

#line 25 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 25 "root_numpy/src/tree.pyx"
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 25, __pyx_L1_error)

#line 25 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 25 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 25 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 25 "root_numpy/src/tree.pyx"
      __pyx_t_3 = 0;

#line 25 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 25, __pyx_L1_error)

#line 25 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 25 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 25 "root_numpy/src/tree.pyx"
      __pyx_t_2 = PyNumber_Add(__pyx_v_path, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 25, __pyx_L1_error)

#line 25 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 25 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 25 "root_numpy/src/tree.pyx"
      __pyx_t_9 = __Pyx_PyObject_Append(__pyx_v_objects, __pyx_t_2); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 25, __pyx_L1_error)

#line 25 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 25 "root_numpy/src/tree.pyx"
    }

#line 25 "root_numpy/src/tree.pyx"
    __pyx_L6:;

    /* "root_numpy/src/tree.pyx":26
 *         else:
 *             objects.append(path + str(key.GetName()))
 *         if clsname == "TDirectoryFile":             # <<<<<<<<<<<<<<
 *             # recursively enter lower directory levels
 *             list_objects_recursive(<TDirectory*> rdir.Get(key.GetName()),
 */

#line 26 "root_numpy/src/tree.pyx"
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_clsname, __pyx_n_s_TDirectoryFile, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 26, __pyx_L1_error)

#line 26 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":30
 *             list_objects_recursive(<TDirectory*> rdir.Get(key.GetName()),
 *                                    objects, classes,
 *                                    path=path + key.GetName() + "/")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 30 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_key->GetName()); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 30, __pyx_L1_error)

#line 30 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 30 "root_numpy/src/tree.pyx"
      __pyx_t_3 = PyNumber_Add(__pyx_v_path, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 30, __pyx_L1_error)

#line 30 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 30 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 30 "root_numpy/src/tree.pyx"
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__16); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 30, __pyx_L1_error)

#line 30 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 30 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "root_numpy/src/tree.pyx":28
 *         if clsname == "TDirectoryFile":
 *             # recursively enter lower directory levels
 *             list_objects_recursive(<TDirectory*> rdir.Get(key.GetName()),             # <<<<<<<<<<<<<<
 *                                    objects, classes,
 *                                    path=path + key.GetName() + "/")
 */

#line 28 "root_numpy/src/tree.pyx"
      __pyx_t_10.__pyx_n = 1;

#line 28 "root_numpy/src/tree.pyx"
      __pyx_t_10.path = __pyx_t_2;

#line 28 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __pyx_f_13_librootnumpy_list_objects_recursive(((TDirectory *)__pyx_v_rdir->Get(__pyx_v_key->GetName())), __pyx_v_objects, __pyx_v_classes, &__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 28, __pyx_L1_error)

#line 28 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 28 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 28 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "root_numpy/src/tree.pyx":26
 *         else:
 *             objects.append(path + str(key.GetName()))
 *         if clsname == "TDirectoryFile":             # <<<<<<<<<<<<<<
 *             # recursively enter lower directory levels
 *             list_objects_recursive(<TDirectory*> rdir.Get(key.GetName()),
 */

#line 26 "root_numpy/src/tree.pyx"
    }

#line 26 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":4
 * 
 * 
 * cdef list_objects_recursive(TDirectory* rdir, objects, vector[TClass*]& classes, path=""):             # <<<<<<<<<<<<<<
 *     cdef TList* keys = rdir.GetListOfKeys()
 *     if keys == NULL:
 */

#line 4 "root_numpy/src/tree.pyx"


#line 4 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 4 "root_numpy/src/tree.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 4 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

#line 4 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_objects_recursive", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 4 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 4 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_clsname);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 4 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 4 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":33
 * 
 * 
 * def list_objects(fname, types=None):             # <<<<<<<<<<<<<<
 *     cdef TClass* tclass
 *     # ROOT owns these pointers
 */

#line 33 "root_numpy/src/tree.pyx"


#line 33 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 33 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_3list_objects(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_3list_objects = 
#line 33 "root_numpy/src/tree.pyx"
{"list_objects", (PyCFunction)__pyx_pw_13_librootnumpy_3list_objects, METH_VARARGS|METH_KEYWORDS, 0};

#line 33 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_3list_objects(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0
#line 33 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_types = 0
#line 33 "root_numpy/src/tree.pyx"
;

#line 33 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_objects (wrapper)", 0);

#line 33 "root_numpy/src/tree.pyx"
  {

#line 33 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_types,0};

#line 33 "root_numpy/src/tree.pyx"
    PyObject* values[2] = {0,0};

#line 33 "root_numpy/src/tree.pyx"
    values[1] = ((PyObject *)Py_None);

#line 33 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 33 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 33 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 33 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  2: 
#line 33 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 33 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 33 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 33 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 33 "root_numpy/src/tree.pyx"
      }

#line 33 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 33 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 33 "root_numpy/src/tree.pyx"
        case  0:

#line 33 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else 
#line 33 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 33 "root_numpy/src/tree.pyx"
        case  1:

#line 33 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 33 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_types);

#line 33 "root_numpy/src/tree.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 33 "root_numpy/src/tree.pyx"
        }

#line 33 "root_numpy/src/tree.pyx"
      }

#line 33 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 33 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "list_objects") < 0)) __PYX_ERR(2, 33, __pyx_L3_error)

#line 33 "root_numpy/src/tree.pyx"
      }

#line 33 "root_numpy/src/tree.pyx"
    } else {

#line 33 "root_numpy/src/tree.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 33 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 33 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 33 "root_numpy/src/tree.pyx"
        break;
        default: 
#line 33 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 33 "root_numpy/src/tree.pyx"
      }

#line 33 "root_numpy/src/tree.pyx"
    }

#line 33 "root_numpy/src/tree.pyx"
    __pyx_v_fname = values[0];

#line 33 "root_numpy/src/tree.pyx"
    __pyx_v_types = values[1];

#line 33 "root_numpy/src/tree.pyx"
  }

#line 33 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 33 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list_objects", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 33 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 33, __pyx_L3_error)

#line 33 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_objects", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 33 "root_numpy/src/tree.pyx"
  return NULL;

#line 33 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 33 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_2list_objects(__pyx_self, __pyx_v_fname, __pyx_v_types);

#line 33 "root_numpy/src/tree.pyx"


#line 33 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 33 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 33 "root_numpy/src/tree.pyx"
}

#line 33 "root_numpy/src/tree.pyx"


#line 33 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_2list_objects(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_types) {
  TClass *__pyx_v_tclass
#line 33 "root_numpy/src/tree.pyx"
;
  std::vector<TClass *>  __pyx_v_classes
#line 33 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_clsname = NULL
#line 33 "root_numpy/src/tree.pyx"
;
  TFile *__pyx_v_rfile
#line 33 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_objects = NULL
#line 33 "root_numpy/src/tree.pyx"
;

#line 33 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 33 "root_numpy/src/tree.pyx"
  int __pyx_t_1;

#line 33 "root_numpy/src/tree.pyx"
  int __pyx_t_2;

#line 33 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 33 "root_numpy/src/tree.pyx"
  Py_ssize_t __pyx_t_4;

#line 33 "root_numpy/src/tree.pyx"
  PyObject *(*__pyx_t_5)(PyObject *);

#line 33 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 33 "root_numpy/src/tree.pyx"
  const char *__pyx_t_7;

#line 33 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 33 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 33 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_objects", 0);

  /* "root_numpy/src/tree.pyx":37
 *     # ROOT owns these pointers
 *     cdef vector[TClass*] classes
 *     if types is not None:             # <<<<<<<<<<<<<<
 *         for clsname in types:
 *             tclass = GetClass(clsname, True, True)
 */

#line 37 "root_numpy/src/tree.pyx"
  __pyx_t_1 = (__pyx_v_types != Py_None);

#line 37 "root_numpy/src/tree.pyx"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 37 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":38
 *     cdef vector[TClass*] classes
 *     if types is not None:
 *         for clsname in types:             # <<<<<<<<<<<<<<
 *             tclass = GetClass(clsname, True, True)
 *             if tclass == NULL:
 */

#line 38 "root_numpy/src/tree.pyx"
    if (likely(PyList_CheckExact(__pyx_v_types)) || PyTuple_CheckExact(__pyx_v_types)) {

#line 38 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __pyx_v_types; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;

#line 38 "root_numpy/src/tree.pyx"
      __pyx_t_5 = NULL;

#line 38 "root_numpy/src/tree.pyx"
    } else {
      __pyx_t_4 = -1; 
#line 38 "root_numpy/src/tree.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_v_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 38, __pyx_L1_error)

#line 38 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 38 "root_numpy/src/tree.pyx"
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 38, __pyx_L1_error)

#line 38 "root_numpy/src/tree.pyx"
    }

#line 38 "root_numpy/src/tree.pyx"
    for (;;) {

#line 38 "root_numpy/src/tree.pyx"
      if (likely(!__pyx_t_5)) {

#line 38 "root_numpy/src/tree.pyx"
        if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 38 "root_numpy/src/tree.pyx"
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 38 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 38 "root_numpy/src/tree.pyx"
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 38, __pyx_L1_error)

#line 38 "root_numpy/src/tree.pyx"
          #else

#line 38 "root_numpy/src/tree.pyx"
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 38, __pyx_L1_error)

#line 38 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_6);

#line 38 "root_numpy/src/tree.pyx"
          #endif

#line 38 "root_numpy/src/tree.pyx"
        } else {

#line 38 "root_numpy/src/tree.pyx"
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 38 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 38 "root_numpy/src/tree.pyx"
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 38, __pyx_L1_error)

#line 38 "root_numpy/src/tree.pyx"
          #else

#line 38 "root_numpy/src/tree.pyx"
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 38, __pyx_L1_error)

#line 38 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_6);

#line 38 "root_numpy/src/tree.pyx"
          #endif

#line 38 "root_numpy/src/tree.pyx"
        }
      } else 
#line 38 "root_numpy/src/tree.pyx"
{

#line 38 "root_numpy/src/tree.pyx"
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);

#line 38 "root_numpy/src/tree.pyx"
        if (unlikely(!__pyx_t_6)) {

#line 38 "root_numpy/src/tree.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 38 "root_numpy/src/tree.pyx"
          if (exc_type) {

#line 38 "root_numpy/src/tree.pyx"
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 38 "root_numpy/src/tree.pyx"
            else __PYX_ERR(2, 38, __pyx_L1_error)

#line 38 "root_numpy/src/tree.pyx"
          }

#line 38 "root_numpy/src/tree.pyx"
          break;

#line 38 "root_numpy/src/tree.pyx"
        }

#line 38 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 38 "root_numpy/src/tree.pyx"
      }

#line 38 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF_SET(__pyx_v_clsname, __pyx_t_6);

#line 38 "root_numpy/src/tree.pyx"
      __pyx_t_6 = 0;

      /* "root_numpy/src/tree.pyx":39
 *     if types is not None:
 *         for clsname in types:
 *             tclass = GetClass(clsname, True, True)             # <<<<<<<<<<<<<<
 *             if tclass == NULL:
 *                 raise ValueError("'{0}' is not a ROOT class".format(clsname))
 */

#line 39 "root_numpy/src/tree.pyx"
      __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_clsname); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(2, 39, __pyx_L1_error)

#line 39 "root_numpy/src/tree.pyx"
      __pyx_v_tclass = TClass::GetClass(__pyx_t_7, 1, 1);

      /* "root_numpy/src/tree.pyx":40
 *         for clsname in types:
 *             tclass = GetClass(clsname, True, True)
 *             if tclass == NULL:             # <<<<<<<<<<<<<<
 *                 raise ValueError("'{0}' is not a ROOT class".format(clsname))
 *             classes.push_back(tclass)
 */

#line 40 "root_numpy/src/tree.pyx"
      __pyx_t_2 = ((__pyx_v_tclass == NULL) != 0);

#line 40 "root_numpy/src/tree.pyx"
      if (__pyx_t_2) {

        /* "root_numpy/src/tree.pyx":41
 *             tclass = GetClass(clsname, True, True)
 *             if tclass == NULL:
 *                 raise ValueError("'{0}' is not a ROOT class".format(clsname))             # <<<<<<<<<<<<<<
 *             classes.push_back(tclass)
 *     cdef TFile* rfile = Open(fname, 'read')
 */

#line 41 "root_numpy/src/tree.pyx"
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_0_is_not_a_ROOT_class, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 41, __pyx_L1_error)

#line 41 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 41 "root_numpy/src/tree.pyx"
        __pyx_t_9 = NULL;

#line 41 "root_numpy/src/tree.pyx"
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {

#line 41 "root_numpy/src/tree.pyx"
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);

#line 41 "root_numpy/src/tree.pyx"
          if (likely(__pyx_t_9)) {

#line 41 "root_numpy/src/tree.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 41 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_9);

#line 41 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(function);

#line 41 "root_numpy/src/tree.pyx"
            __Pyx_DECREF_SET(__pyx_t_8, function);

#line 41 "root_numpy/src/tree.pyx"
          }

#line 41 "root_numpy/src/tree.pyx"
        }

#line 41 "root_numpy/src/tree.pyx"
        if (!__pyx_t_9) {

#line 41 "root_numpy/src/tree.pyx"
          __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_clsname); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 41, __pyx_L1_error)

#line 41 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_6);

#line 41 "root_numpy/src/tree.pyx"
        } else {

#line 41 "root_numpy/src/tree.pyx"
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 41, __pyx_L1_error)

#line 41 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 41 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;

#line 41 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(__pyx_v_clsname);

#line 41 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_v_clsname);

#line 41 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_clsname);

#line 41 "root_numpy/src/tree.pyx"
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 41, __pyx_L1_error)

#line 41 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_6);

#line 41 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 41 "root_numpy/src/tree.pyx"
        }

#line 41 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 41 "root_numpy/src/tree.pyx"
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 41, __pyx_L1_error)

#line 41 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 41 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_6);

#line 41 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);

#line 41 "root_numpy/src/tree.pyx"
        __pyx_t_6 = 0;

#line 41 "root_numpy/src/tree.pyx"
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 41, __pyx_L1_error)

#line 41 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 41 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 41 "root_numpy/src/tree.pyx"
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);

#line 41 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 41 "root_numpy/src/tree.pyx"
        __PYX_ERR(2, 41, __pyx_L1_error)

        /* "root_numpy/src/tree.pyx":40
 *         for clsname in types:
 *             tclass = GetClass(clsname, True, True)
 *             if tclass == NULL:             # <<<<<<<<<<<<<<
 *                 raise ValueError("'{0}' is not a ROOT class".format(clsname))
 *             classes.push_back(tclass)
 */

#line 40 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":42
 *             if tclass == NULL:
 *                 raise ValueError("'{0}' is not a ROOT class".format(clsname))
 *             classes.push_back(tclass)             # <<<<<<<<<<<<<<
 *     cdef TFile* rfile = Open(fname, 'read')
 *     if rfile == NULL:
 */

#line 42 "root_numpy/src/tree.pyx"
      try {

#line 42 "root_numpy/src/tree.pyx"
        __pyx_v_classes.push_back(__pyx_v_tclass);

#line 42 "root_numpy/src/tree.pyx"
      } catch(...) {

#line 42 "root_numpy/src/tree.pyx"
        __Pyx_CppExn2PyErr();

#line 42 "root_numpy/src/tree.pyx"
        __PYX_ERR(2, 42, __pyx_L1_error)

#line 42 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":38
 *     cdef vector[TClass*] classes
 *     if types is not None:
 *         for clsname in types:             # <<<<<<<<<<<<<<
 *             tclass = GetClass(clsname, True, True)
 *             if tclass == NULL:
 */

#line 38 "root_numpy/src/tree.pyx"
    }

#line 38 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "root_numpy/src/tree.pyx":37
 *     # ROOT owns these pointers
 *     cdef vector[TClass*] classes
 *     if types is not None:             # <<<<<<<<<<<<<<
 *         for clsname in types:
 *             tclass = GetClass(clsname, True, True)
 */

#line 37 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":43
 *                 raise ValueError("'{0}' is not a ROOT class".format(clsname))
 *             classes.push_back(tclass)
 *     cdef TFile* rfile = Open(fname, 'read')             # <<<<<<<<<<<<<<
 *     if rfile == NULL:
 *         raise IOError("cannot read {0}".format(fname))
 */

#line 43 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_fname); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(2, 43, __pyx_L1_error)

#line 43 "root_numpy/src/tree.pyx"
  __pyx_v_rfile = TFile::Open(__pyx_t_7, ((const char *)"read"));

  /* "root_numpy/src/tree.pyx":44
 *             classes.push_back(tclass)
 *     cdef TFile* rfile = Open(fname, 'read')
 *     if rfile == NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot read {0}".format(fname))
 *     objects = []
 */

#line 44 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((__pyx_v_rfile == NULL) != 0);

#line 44 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":45
 *     cdef TFile* rfile = Open(fname, 'read')
 *     if rfile == NULL:
 *         raise IOError("cannot read {0}".format(fname))             # <<<<<<<<<<<<<<
 *     objects = []
 *     list_objects_recursive(rfile, objects, classes)
 */

#line 45 "root_numpy/src/tree.pyx"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_read_0, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 45, __pyx_L1_error)

#line 45 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 45 "root_numpy/src/tree.pyx"
    __pyx_t_8 = NULL;

#line 45 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {

#line 45 "root_numpy/src/tree.pyx"
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);

#line 45 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_8)) {

#line 45 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 45 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_8);

#line 45 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 45 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_6, function);

#line 45 "root_numpy/src/tree.pyx"
      }

#line 45 "root_numpy/src/tree.pyx"
    }

#line 45 "root_numpy/src/tree.pyx"
    if (!__pyx_t_8) {

#line 45 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_fname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 45, __pyx_L1_error)

#line 45 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 45 "root_numpy/src/tree.pyx"
    } else {

#line 45 "root_numpy/src/tree.pyx"
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 45, __pyx_L1_error)

#line 45 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 45 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 45 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_fname);

#line 45 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_fname);

#line 45 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_fname);

#line 45 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 45, __pyx_L1_error)

#line 45 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 45 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 45 "root_numpy/src/tree.pyx"
    }

#line 45 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 45 "root_numpy/src/tree.pyx"
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 45, __pyx_L1_error)

#line 45 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 45 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 45 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);

#line 45 "root_numpy/src/tree.pyx"
    __pyx_t_3 = 0;

#line 45 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 45, __pyx_L1_error)

#line 45 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 45 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 45 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 45 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 45 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 45, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":44
 *             classes.push_back(tclass)
 *     cdef TFile* rfile = Open(fname, 'read')
 *     if rfile == NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot read {0}".format(fname))
 *     objects = []
 */

#line 44 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":46
 *     if rfile == NULL:
 *         raise IOError("cannot read {0}".format(fname))
 *     objects = []             # <<<<<<<<<<<<<<
 *     list_objects_recursive(rfile, objects, classes)
 *     rfile.Close()
 */

#line 46 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 46, __pyx_L1_error)

#line 46 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 46 "root_numpy/src/tree.pyx"
  __pyx_v_objects = ((PyObject*)__pyx_t_3);

#line 46 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/tree.pyx":47
 *         raise IOError("cannot read {0}".format(fname))
 *     objects = []
 *     list_objects_recursive(rfile, objects, classes)             # <<<<<<<<<<<<<<
 *     rfile.Close()
 *     del rfile
 */

#line 47 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __pyx_f_13_librootnumpy_list_objects_recursive(__pyx_v_rfile, __pyx_v_objects, __pyx_v_classes, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "root_numpy/src/tree.pyx":48
 *     objects = []
 *     list_objects_recursive(rfile, objects, classes)
 *     rfile.Close()             # <<<<<<<<<<<<<<
 *     del rfile
 *     return objects
 */

#line 48 "root_numpy/src/tree.pyx"
  __pyx_v_rfile->Close();

  /* "root_numpy/src/tree.pyx":49
 *     list_objects_recursive(rfile, objects, classes)
 *     rfile.Close()
 *     del rfile             # <<<<<<<<<<<<<<
 *     return objects
 * 
 */

#line 49 "root_numpy/src/tree.pyx"
  delete __pyx_v_rfile;

  /* "root_numpy/src/tree.pyx":50
 *     rfile.Close()
 *     del rfile
 *     return objects             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 50 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 50 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_objects);

#line 50 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_objects;

#line 50 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":33
 * 
 * 
 * def list_objects(fname, types=None):             # <<<<<<<<<<<<<<
 *     cdef TClass* tclass
 *     # ROOT owns these pointers
 */

#line 33 "root_numpy/src/tree.pyx"


#line 33 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 33 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_objects", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 33 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 33 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_clsname);

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_objects);

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 33 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 33 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":53
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     return list_objects(fname, types=['TTree'])
 * 
 */

#line 53 "root_numpy/src/tree.pyx"


#line 53 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 53 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_5list_trees(PyObject *__pyx_self, PyObject *__pyx_v_fname); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_5list_trees = 
#line 53 "root_numpy/src/tree.pyx"
{"list_trees", (PyCFunction)__pyx_pw_13_librootnumpy_5list_trees, METH_O, 0};

#line 53 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_5list_trees(PyObject *__pyx_self, PyObject *__pyx_v_fname) {

#line 53 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_trees (wrapper)", 0);
  __pyx_r = 
#line 53 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_4list_trees(__pyx_self, ((PyObject *)__pyx_v_fname));

#line 53 "root_numpy/src/tree.pyx"


#line 53 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 53 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 53 "root_numpy/src/tree.pyx"
}

#line 53 "root_numpy/src/tree.pyx"


#line 53 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_4list_trees(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname) {

#line 53 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 53 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 53 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 53 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 53 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_trees", 0);

  /* "root_numpy/src/tree.pyx":54
 * 
 * def list_trees(fname):
 *     return list_objects(fname, types=['TTree'])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 54 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_list_objects); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 54, __pyx_L1_error)

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 54 "root_numpy/src/tree.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 54, __pyx_L1_error)

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_fname);

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_v_fname);

#line 54 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fname);

#line 54 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 54, __pyx_L1_error)

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 54 "root_numpy/src/tree.pyx"
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 54, __pyx_L1_error)

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_n_s_TTree);

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_n_s_TTree);

#line 54 "root_numpy/src/tree.pyx"
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_TTree);

#line 54 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_types, __pyx_t_4) < 0) __PYX_ERR(2, 54, __pyx_L1_error)

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 54 "root_numpy/src/tree.pyx"
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 54, __pyx_L1_error)

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 54 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_4;

#line 54 "root_numpy/src/tree.pyx"
  __pyx_t_4 = 0;

#line 54 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":53
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     return list_objects(fname, types=['TTree'])
 * 
 */

#line 53 "root_numpy/src/tree.pyx"


#line 53 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 53 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_trees", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 53 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 53 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 53 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 53 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":57
 * 
 * 
 * def list_directories(fname):             # <<<<<<<<<<<<<<
 *     return list_objects(fname, types=['TDirectoryFile'])
 * 
 */

#line 57 "root_numpy/src/tree.pyx"


#line 57 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 57 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_7list_directories(PyObject *__pyx_self, PyObject *__pyx_v_fname); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_7list_directories = 
#line 57 "root_numpy/src/tree.pyx"
{"list_directories", (PyCFunction)__pyx_pw_13_librootnumpy_7list_directories, METH_O, 0};

#line 57 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_7list_directories(PyObject *__pyx_self, PyObject *__pyx_v_fname) {

#line 57 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_directories (wrapper)", 0);
  __pyx_r = 
#line 57 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_6list_directories(__pyx_self, ((PyObject *)__pyx_v_fname));

#line 57 "root_numpy/src/tree.pyx"


#line 57 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 57 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 57 "root_numpy/src/tree.pyx"
}

#line 57 "root_numpy/src/tree.pyx"


#line 57 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_6list_directories(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname) {

#line 57 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 57 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 57 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 57 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 57 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_directories", 0);

  /* "root_numpy/src/tree.pyx":58
 * 
 * def list_directories(fname):
 *     return list_objects(fname, types=['TDirectoryFile'])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 58 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_list_objects); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 58, __pyx_L1_error)

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 58 "root_numpy/src/tree.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 58, __pyx_L1_error)

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_fname);

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_v_fname);

#line 58 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fname);

#line 58 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 58, __pyx_L1_error)

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 58 "root_numpy/src/tree.pyx"
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 58, __pyx_L1_error)

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_n_s_TDirectoryFile);

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_n_s_TDirectoryFile);

#line 58 "root_numpy/src/tree.pyx"
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_TDirectoryFile);

#line 58 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_types, __pyx_t_4) < 0) __PYX_ERR(2, 58, __pyx_L1_error)

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 58 "root_numpy/src/tree.pyx"
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 58, __pyx_L1_error)

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 58 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 58 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_4;

#line 58 "root_numpy/src/tree.pyx"
  __pyx_t_4 = 0;

#line 58 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":57
 * 
 * 
 * def list_directories(fname):             # <<<<<<<<<<<<<<
 *     return list_objects(fname, types=['TDirectoryFile'])
 * 
 */

#line 57 "root_numpy/src/tree.pyx"


#line 57 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 57 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_directories", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 57 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 57 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 57 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 57 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":61
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree == None:
 *         # automatically select single tree
 */

#line 61 "root_numpy/src/tree.pyx"


#line 61 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 61 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_9list_structures(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_9list_structures = 
#line 61 "root_numpy/src/tree.pyx"
{"list_structures", (PyCFunction)__pyx_pw_13_librootnumpy_9list_structures, METH_VARARGS|METH_KEYWORDS, 0};

#line 61 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_9list_structures(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0
#line 61 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tree = 0
#line 61 "root_numpy/src/tree.pyx"
;

#line 61 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_structures (wrapper)", 0);

#line 61 "root_numpy/src/tree.pyx"
  {

#line 61 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_tree,0};

#line 61 "root_numpy/src/tree.pyx"
    PyObject* values[2] = {0,0};

#line 61 "root_numpy/src/tree.pyx"
    values[1] = ((PyObject *)Py_None);

#line 61 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 61 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 61 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 61 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  2: 
#line 61 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 61 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 61 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 61 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 61 "root_numpy/src/tree.pyx"
      }

#line 61 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 61 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 61 "root_numpy/src/tree.pyx"
        case  0:

#line 61 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else 
#line 61 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 61 "root_numpy/src/tree.pyx"
        case  1:

#line 61 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 61 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree);

#line 61 "root_numpy/src/tree.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 61 "root_numpy/src/tree.pyx"
        }

#line 61 "root_numpy/src/tree.pyx"
      }

#line 61 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 61 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "list_structures") < 0)) __PYX_ERR(2, 61, __pyx_L3_error)

#line 61 "root_numpy/src/tree.pyx"
      }

#line 61 "root_numpy/src/tree.pyx"
    } else {

#line 61 "root_numpy/src/tree.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 61 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 61 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 61 "root_numpy/src/tree.pyx"
        break;
        default: 
#line 61 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 61 "root_numpy/src/tree.pyx"
      }

#line 61 "root_numpy/src/tree.pyx"
    }

#line 61 "root_numpy/src/tree.pyx"
    __pyx_v_fname = values[0];

#line 61 "root_numpy/src/tree.pyx"
    __pyx_v_tree = values[1];

#line 61 "root_numpy/src/tree.pyx"
  }

#line 61 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 61 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list_structures", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 61 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 61, __pyx_L3_error)

#line 61 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_structures", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 61 "root_numpy/src/tree.pyx"
  return NULL;

#line 61 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 61 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_8list_structures(__pyx_self, __pyx_v_fname, __pyx_v_tree);

#line 61 "root_numpy/src/tree.pyx"


#line 61 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 61 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 61 "root_numpy/src/tree.pyx"
}

#line 61 "root_numpy/src/tree.pyx"


#line 61 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_8list_structures(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree) {
  TFile *__pyx_v_rfile
#line 61 "root_numpy/src/tree.pyx"
;
  TTree *__pyx_v_rtree
#line 61 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_structure = NULL
#line 61 "root_numpy/src/tree.pyx"
;

#line 61 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 61 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 61 "root_numpy/src/tree.pyx"
  int __pyx_t_2;

#line 61 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 61 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 61 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 61 "root_numpy/src/tree.pyx"
  Py_ssize_t __pyx_t_6;

#line 61 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 61 "root_numpy/src/tree.pyx"
  const char *__pyx_t_8;

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_structures", 0);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_tree);

  /* "root_numpy/src/tree.pyx":62
 * 
 * def list_structures(fname, tree=None):
 *     if tree == None:             # <<<<<<<<<<<<<<
 *         # automatically select single tree
 *         tree = list_trees(fname)
 */

#line 62 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_tree, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 62, __pyx_L1_error)

#line 62 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 62, __pyx_L1_error)

#line 62 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 62 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":64
 *     if tree == None:
 *         # automatically select single tree
 *         tree = list_trees(fname)             # <<<<<<<<<<<<<<
 *         if len(tree) != 1:
 *             raise ValueError("multiple trees found: {0}".format(', '.join(tree)))
 */

#line 64 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_list_trees); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 64, __pyx_L1_error)

#line 64 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 64 "root_numpy/src/tree.pyx"
    __pyx_t_4 = NULL;

#line 64 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 64 "root_numpy/src/tree.pyx"
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 64 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_4)) {

#line 64 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 64 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_4);

#line 64 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 64 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 64 "root_numpy/src/tree.pyx"
      }

#line 64 "root_numpy/src/tree.pyx"
    }

#line 64 "root_numpy/src/tree.pyx"
    if (!__pyx_t_4) {

#line 64 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_fname); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 64, __pyx_L1_error)

#line 64 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 64 "root_numpy/src/tree.pyx"
    } else {

#line 64 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 64, __pyx_L1_error)

#line 64 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 64 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 64 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_fname);

#line 64 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_fname);

#line 64 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_fname);

#line 64 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 64, __pyx_L1_error)

#line 64 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 64 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 64 "root_numpy/src/tree.pyx"
    }

#line 64 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 64 "root_numpy/src/tree.pyx"
    __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_1);

#line 64 "root_numpy/src/tree.pyx"
    __pyx_t_1 = 0;

    /* "root_numpy/src/tree.pyx":65
 *         # automatically select single tree
 *         tree = list_trees(fname)
 *         if len(tree) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("multiple trees found: {0}".format(', '.join(tree)))
 *         tree = tree[0]
 */

#line 65 "root_numpy/src/tree.pyx"
    __pyx_t_6 = PyObject_Length(__pyx_v_tree); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(2, 65, __pyx_L1_error)

#line 65 "root_numpy/src/tree.pyx"
    __pyx_t_2 = ((__pyx_t_6 != 1) != 0);

#line 65 "root_numpy/src/tree.pyx"
    if (__pyx_t_2) {

      /* "root_numpy/src/tree.pyx":66
 *         tree = list_trees(fname)
 *         if len(tree) != 1:
 *             raise ValueError("multiple trees found: {0}".format(', '.join(tree)))             # <<<<<<<<<<<<<<
 *         tree = tree[0]
 *     cdef TFile* rfile = Open(fname, 'read')
 */

#line 66 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_multiple_trees_found_0, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 66, __pyx_L1_error)

#line 66 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 66 "root_numpy/src/tree.pyx"
      __pyx_t_5 = __Pyx_PyString_Join(__pyx_kp_s__17, __pyx_v_tree); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 66, __pyx_L1_error)

#line 66 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 66 "root_numpy/src/tree.pyx"
      __pyx_t_4 = NULL;

#line 66 "root_numpy/src/tree.pyx"
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {

#line 66 "root_numpy/src/tree.pyx"
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 66 "root_numpy/src/tree.pyx"
        if (likely(__pyx_t_4)) {

#line 66 "root_numpy/src/tree.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 66 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(__pyx_t_4);

#line 66 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(function);

#line 66 "root_numpy/src/tree.pyx"
          __Pyx_DECREF_SET(__pyx_t_3, function);

#line 66 "root_numpy/src/tree.pyx"
        }

#line 66 "root_numpy/src/tree.pyx"
      }

#line 66 "root_numpy/src/tree.pyx"
      if (!__pyx_t_4) {

#line 66 "root_numpy/src/tree.pyx"
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 66, __pyx_L1_error)

#line 66 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 66 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 66 "root_numpy/src/tree.pyx"
      } else {

#line 66 "root_numpy/src/tree.pyx"
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 66, __pyx_L1_error)

#line 66 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 66 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 66 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_5);

#line 66 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);

#line 66 "root_numpy/src/tree.pyx"
        __pyx_t_5 = 0;

#line 66 "root_numpy/src/tree.pyx"
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 66, __pyx_L1_error)

#line 66 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 66 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 66 "root_numpy/src/tree.pyx"
      }

#line 66 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 66 "root_numpy/src/tree.pyx"
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 66, __pyx_L1_error)

#line 66 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 66 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 66 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 66 "root_numpy/src/tree.pyx"
      __pyx_t_1 = 0;

#line 66 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 66, __pyx_L1_error)

#line 66 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 66 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 66 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 66 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 66 "root_numpy/src/tree.pyx"
      __PYX_ERR(2, 66, __pyx_L1_error)

      /* "root_numpy/src/tree.pyx":65
 *         # automatically select single tree
 *         tree = list_trees(fname)
 *         if len(tree) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("multiple trees found: {0}".format(', '.join(tree)))
 *         tree = tree[0]
 */

#line 65 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":67
 *         if len(tree) != 1:
 *             raise ValueError("multiple trees found: {0}".format(', '.join(tree)))
 *         tree = tree[0]             # <<<<<<<<<<<<<<
 *     cdef TFile* rfile = Open(fname, 'read')
 *     if rfile == NULL:
 */

#line 67 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tree, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 67, __pyx_L1_error)

#line 67 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 67 "root_numpy/src/tree.pyx"
    __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_1);

#line 67 "root_numpy/src/tree.pyx"
    __pyx_t_1 = 0;

    /* "root_numpy/src/tree.pyx":62
 * 
 * def list_structures(fname, tree=None):
 *     if tree == None:             # <<<<<<<<<<<<<<
 *         # automatically select single tree
 *         tree = list_trees(fname)
 */

#line 62 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":68
 *             raise ValueError("multiple trees found: {0}".format(', '.join(tree)))
 *         tree = tree[0]
 *     cdef TFile* rfile = Open(fname, 'read')             # <<<<<<<<<<<<<<
 *     if rfile == NULL:
 *         raise IOError("cannot read {0}".format(fname))
 */

#line 68 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_fname); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(2, 68, __pyx_L1_error)

#line 68 "root_numpy/src/tree.pyx"
  __pyx_v_rfile = TFile::Open(__pyx_t_8, ((const char *)"read"));

  /* "root_numpy/src/tree.pyx":69
 *         tree = tree[0]
 *     cdef TFile* rfile = Open(fname, 'read')
 *     if rfile == NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TTree* rtree = <TTree*> rfile.Get(tree)
 */

#line 69 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((__pyx_v_rfile == NULL) != 0);

#line 69 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":70
 *     cdef TFile* rfile = Open(fname, 'read')
 *     if rfile == NULL:
 *         raise IOError("cannot read {0}".format(fname))             # <<<<<<<<<<<<<<
 *     cdef TTree* rtree = <TTree*> rfile.Get(tree)
 *     if rtree == NULL:
 */

#line 70 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_read_0, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 70, __pyx_L1_error)

#line 70 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 70 "root_numpy/src/tree.pyx"
    __pyx_t_7 = NULL;

#line 70 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {

#line 70 "root_numpy/src/tree.pyx"
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);

#line 70 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_7)) {

#line 70 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 70 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_7);

#line 70 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 70 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 70 "root_numpy/src/tree.pyx"
      }

#line 70 "root_numpy/src/tree.pyx"
    }

#line 70 "root_numpy/src/tree.pyx"
    if (!__pyx_t_7) {

#line 70 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_fname); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 70, __pyx_L1_error)

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 70 "root_numpy/src/tree.pyx"
    } else {

#line 70 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 70, __pyx_L1_error)

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_fname);

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_fname);

#line 70 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_fname);

#line 70 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 70, __pyx_L1_error)

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 70 "root_numpy/src/tree.pyx"
    }

#line 70 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 70 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 70, __pyx_L1_error)

#line 70 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 70 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 70 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 70 "root_numpy/src/tree.pyx"
    __pyx_t_1 = 0;

#line 70 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 70, __pyx_L1_error)

#line 70 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 70 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 70 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 70 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 70 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 70, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":69
 *         tree = tree[0]
 *     cdef TFile* rfile = Open(fname, 'read')
 *     if rfile == NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TTree* rtree = <TTree*> rfile.Get(tree)
 */

#line 69 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":71
 *     if rfile == NULL:
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TTree* rtree = <TTree*> rfile.Get(tree)             # <<<<<<<<<<<<<<
 *     if rtree == NULL:
 *         raise IOError("tree '{0}' not found in {1}".format(tree, fname))
 */

#line 71 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_tree); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(2, 71, __pyx_L1_error)

#line 71 "root_numpy/src/tree.pyx"
  __pyx_v_rtree = ((TTree *)__pyx_v_rfile->Get(__pyx_t_8));

  /* "root_numpy/src/tree.pyx":72
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TTree* rtree = <TTree*> rfile.Get(tree)
 *     if rtree == NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("tree '{0}' not found in {1}".format(tree, fname))
 *     structure = get_tree_structure(rtree)
 */

#line 72 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((__pyx_v_rtree == NULL) != 0);

#line 72 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":73
 *     cdef TTree* rtree = <TTree*> rfile.Get(tree)
 *     if rtree == NULL:
 *         raise IOError("tree '{0}' not found in {1}".format(tree, fname))             # <<<<<<<<<<<<<<
 *     structure = get_tree_structure(rtree)
 *     rfile.Close()
 */

#line 73 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_tree_0_not_found_in_1, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 73, __pyx_L1_error)

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 73 "root_numpy/src/tree.pyx"
    __pyx_t_5 = NULL;

#line 73 "root_numpy/src/tree.pyx"
    __pyx_t_6 = 0;

#line 73 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {

#line 73 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 73 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_5)) {

#line 73 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 73 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 73 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 73 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 73 "root_numpy/src/tree.pyx"
        __pyx_t_6 = 1;

#line 73 "root_numpy/src/tree.pyx"
      }

#line 73 "root_numpy/src/tree.pyx"
    }

#line 73 "root_numpy/src/tree.pyx"
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 73, __pyx_L1_error)

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 73 "root_numpy/src/tree.pyx"
    if (__pyx_t_5) {

#line 73 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 73 "root_numpy/src/tree.pyx"
    }

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_tree);

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_v_tree);

#line 73 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_tree);

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_fname);

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_v_fname);

#line 73 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_fname);

#line 73 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 73, __pyx_L1_error)

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 73 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 73, __pyx_L1_error)

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 73 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 73 "root_numpy/src/tree.pyx"
    __pyx_t_1 = 0;

#line 73 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 73, __pyx_L1_error)

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 73 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 73 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 73, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":72
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TTree* rtree = <TTree*> rfile.Get(tree)
 *     if rtree == NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("tree '{0}' not found in {1}".format(tree, fname))
 *     structure = get_tree_structure(rtree)
 */

#line 72 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":74
 *     if rtree == NULL:
 *         raise IOError("tree '{0}' not found in {1}".format(tree, fname))
 *     structure = get_tree_structure(rtree)             # <<<<<<<<<<<<<<
 *     rfile.Close()
 *     del rfile
 */

#line 74 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __pyx_f_13_librootnumpy_get_tree_structure(__pyx_v_rtree, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 74, __pyx_L1_error)

#line 74 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 74 "root_numpy/src/tree.pyx"
  __pyx_v_structure = __pyx_t_1;

#line 74 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":75
 *         raise IOError("tree '{0}' not found in {1}".format(tree, fname))
 *     structure = get_tree_structure(rtree)
 *     rfile.Close()             # <<<<<<<<<<<<<<
 *     del rfile
 *     return structure
 */

#line 75 "root_numpy/src/tree.pyx"
  __pyx_v_rfile->Close();

  /* "root_numpy/src/tree.pyx":76
 *     structure = get_tree_structure(rtree)
 *     rfile.Close()
 *     del rfile             # <<<<<<<<<<<<<<
 *     return structure
 * 
 */

#line 76 "root_numpy/src/tree.pyx"
  delete __pyx_v_rfile;

  /* "root_numpy/src/tree.pyx":77
 *     rfile.Close()
 *     del rfile
 *     return structure             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 77 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 77 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_structure);

#line 77 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_structure;

#line 77 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":61
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree == None:
 *         # automatically select single tree
 */

#line 61 "root_numpy/src/tree.pyx"


#line 61 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 61 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_structures", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 61 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 61 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_structure);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_tree);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 61 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 61 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":80
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list(list_structures(fname, tree).keys())
 * 
 */

#line 80 "root_numpy/src/tree.pyx"


#line 80 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 80 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_11list_branches(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_11list_branches = 
#line 80 "root_numpy/src/tree.pyx"
{"list_branches", (PyCFunction)__pyx_pw_13_librootnumpy_11list_branches, METH_VARARGS|METH_KEYWORDS, 0};

#line 80 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_11list_branches(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0
#line 80 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tree = 0
#line 80 "root_numpy/src/tree.pyx"
;

#line 80 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_branches (wrapper)", 0);

#line 80 "root_numpy/src/tree.pyx"
  {

#line 80 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_tree,0};

#line 80 "root_numpy/src/tree.pyx"
    PyObject* values[2] = {0,0};

#line 80 "root_numpy/src/tree.pyx"
    values[1] = ((PyObject *)Py_None);

#line 80 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 80 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 80 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 80 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  2: 
#line 80 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 80 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 80 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 80 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 80 "root_numpy/src/tree.pyx"
      }

#line 80 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 80 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 80 "root_numpy/src/tree.pyx"
        case  0:

#line 80 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else 
#line 80 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 80 "root_numpy/src/tree.pyx"
        case  1:

#line 80 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 80 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree);

#line 80 "root_numpy/src/tree.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 80 "root_numpy/src/tree.pyx"
        }

#line 80 "root_numpy/src/tree.pyx"
      }

#line 80 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 80 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "list_branches") < 0)) __PYX_ERR(2, 80, __pyx_L3_error)

#line 80 "root_numpy/src/tree.pyx"
      }

#line 80 "root_numpy/src/tree.pyx"
    } else {

#line 80 "root_numpy/src/tree.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 80 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 80 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 80 "root_numpy/src/tree.pyx"
        break;
        default: 
#line 80 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 80 "root_numpy/src/tree.pyx"
      }

#line 80 "root_numpy/src/tree.pyx"
    }

#line 80 "root_numpy/src/tree.pyx"
    __pyx_v_fname = values[0];

#line 80 "root_numpy/src/tree.pyx"
    __pyx_v_tree = values[1];

#line 80 "root_numpy/src/tree.pyx"
  }

#line 80 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 80 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list_branches", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 80 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 80, __pyx_L3_error)

#line 80 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_branches", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 80 "root_numpy/src/tree.pyx"
  return NULL;

#line 80 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 80 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_10list_branches(__pyx_self, __pyx_v_fname, __pyx_v_tree);

#line 80 "root_numpy/src/tree.pyx"


#line 80 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 80 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 80 "root_numpy/src/tree.pyx"
}

#line 80 "root_numpy/src/tree.pyx"


#line 80 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_10list_branches(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree) {

#line 80 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 80 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 80 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 80 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 80 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 80 "root_numpy/src/tree.pyx"
  Py_ssize_t __pyx_t_5;

#line 80 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_branches", 0);

  /* "root_numpy/src/tree.pyx":81
 * 
 * def list_branches(fname, tree=None):
 *     return list(list_structures(fname, tree).keys())             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 81 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_list_structures); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 81, __pyx_L1_error)

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 81 "root_numpy/src/tree.pyx"
  __pyx_t_4 = NULL;

#line 81 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 81 "root_numpy/src/tree.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 81 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 81 "root_numpy/src/tree.pyx"
    if (likely(__pyx_t_4)) {

#line 81 "root_numpy/src/tree.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 81 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 81 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(function);

#line 81 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 81 "root_numpy/src/tree.pyx"
      __pyx_t_5 = 1;

#line 81 "root_numpy/src/tree.pyx"
    }

#line 81 "root_numpy/src/tree.pyx"
  }

#line 81 "root_numpy/src/tree.pyx"
  __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 81, __pyx_L1_error)

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 81 "root_numpy/src/tree.pyx"
  if (__pyx_t_4) {

#line 81 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 81 "root_numpy/src/tree.pyx"
  }

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_fname);

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_v_fname);

#line 81 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_fname);

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_tree);

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_v_tree);

#line 81 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_tree);

#line 81 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 81, __pyx_L1_error)

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 81 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 81, __pyx_L1_error)

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 81 "root_numpy/src/tree.pyx"
  __pyx_t_2 = NULL;

#line 81 "root_numpy/src/tree.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {

#line 81 "root_numpy/src/tree.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 81 "root_numpy/src/tree.pyx"
    if (likely(__pyx_t_2)) {

#line 81 "root_numpy/src/tree.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 81 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 81 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(function);

#line 81 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 81 "root_numpy/src/tree.pyx"
    }

#line 81 "root_numpy/src/tree.pyx"
  }

#line 81 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

#line 81 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 81, __pyx_L1_error)

#line 81 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 81 "root_numpy/src/tree.pyx"
  } else {

#line 81 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 81, __pyx_L1_error)

#line 81 "root_numpy/src/tree.pyx"
  }

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 81 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 81, __pyx_L1_error)

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 81 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 81 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_3;

#line 81 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

#line 81 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":80
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list(list_structures(fname, tree).keys())
 * 
 */

#line 80 "root_numpy/src/tree.pyx"


#line 80 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 80 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_branches", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 80 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 80 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 80 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 80 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":84
 * 
 * 
 * cdef get_branch_structure(TBranch* branch):             # <<<<<<<<<<<<<<
 *     cdef TObjArray* leaves
 *     cdef TLeaf* leaf
 */

#line 84 "root_numpy/src/tree.pyx"


#line 84 "root_numpy/src/tree.pyx"
static PyObject *__pyx_f_13_librootnumpy_get_branch_structure(TBranch *__pyx_v_branch) {
  TObjArray *__pyx_v_leaves
#line 84 "root_numpy/src/tree.pyx"
;
  TLeaf *__pyx_v_leaf
#line 84 "root_numpy/src/tree.pyx"
;
  int __pyx_v_ileaf
#line 84 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_leaflist = NULL
#line 84 "root_numpy/src/tree.pyx"
;

#line 84 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 84 "root_numpy/src/tree.pyx"
  int __pyx_t_1;

#line 84 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 84 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 84 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 84 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 84 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 84 "root_numpy/src/tree.pyx"
  int __pyx_t_7;

#line 84 "root_numpy/src/tree.pyx"
  int __pyx_t_8;

#line 84 "root_numpy/src/tree.pyx"
  int __pyx_t_9;

#line 84 "root_numpy/src/tree.pyx"
  int __pyx_t_10;

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("get_branch_structure", 0);

  /* "root_numpy/src/tree.pyx":88
 *     cdef TLeaf* leaf
 *     cdef int ileaf
 *     leaves = branch.GetListOfLeaves()             # <<<<<<<<<<<<<<
 *     if leaves == NULL:
 *         raise RuntimeError("branch '{0}' has no leaves".format(branch.GetName()))
 */

#line 88 "root_numpy/src/tree.pyx"
  __pyx_v_leaves = __pyx_v_branch->GetListOfLeaves();

  /* "root_numpy/src/tree.pyx":89
 *     cdef int ileaf
 *     leaves = branch.GetListOfLeaves()
 *     if leaves == NULL:             # <<<<<<<<<<<<<<
 *         raise RuntimeError("branch '{0}' has no leaves".format(branch.GetName()))
 *     leaflist = []
 */

#line 89 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((__pyx_v_leaves == NULL) != 0);

#line 89 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":90
 *     leaves = branch.GetListOfLeaves()
 *     if leaves == NULL:
 *         raise RuntimeError("branch '{0}' has no leaves".format(branch.GetName()))             # <<<<<<<<<<<<<<
 *     leaflist = []
 *     for ileaf in range(leaves.GetEntries()):
 */

#line 90 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_branch_0_has_no_leaves, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 90, __pyx_L1_error)

#line 90 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 90 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyStr_FromString(__pyx_v_branch->GetName()); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 90, __pyx_L1_error)

#line 90 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 90 "root_numpy/src/tree.pyx"
    __pyx_t_5 = NULL;

#line 90 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {

#line 90 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 90 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_5)) {

#line 90 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 90 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 90 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 90 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 90 "root_numpy/src/tree.pyx"
      }

#line 90 "root_numpy/src/tree.pyx"
    }

#line 90 "root_numpy/src/tree.pyx"
    if (!__pyx_t_5) {

#line 90 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 90, __pyx_L1_error)

#line 90 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 90 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 90 "root_numpy/src/tree.pyx"
    } else {

#line 90 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 90, __pyx_L1_error)

#line 90 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 90 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 90 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_4);

#line 90 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);

#line 90 "root_numpy/src/tree.pyx"
      __pyx_t_4 = 0;

#line 90 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 90, __pyx_L1_error)

#line 90 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 90 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 90 "root_numpy/src/tree.pyx"
    }

#line 90 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 90 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 90, __pyx_L1_error)

#line 90 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 90 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 90 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 90 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

#line 90 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 90, __pyx_L1_error)

#line 90 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 90 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 90 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 90 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 90 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 90, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":89
 *     cdef int ileaf
 *     leaves = branch.GetListOfLeaves()
 *     if leaves == NULL:             # <<<<<<<<<<<<<<
 *         raise RuntimeError("branch '{0}' has no leaves".format(branch.GetName()))
 *     leaflist = []
 */

#line 89 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":91
 *     if leaves == NULL:
 *         raise RuntimeError("branch '{0}' has no leaves".format(branch.GetName()))
 *     leaflist = []             # <<<<<<<<<<<<<<
 *     for ileaf in range(leaves.GetEntries()):
 *         leaf = <TLeaf*>leaves.At(ileaf)
 */

#line 91 "root_numpy/src/tree.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 91, __pyx_L1_error)

#line 91 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 91 "root_numpy/src/tree.pyx"
  __pyx_v_leaflist = ((PyObject*)__pyx_t_2);

#line 91 "root_numpy/src/tree.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/tree.pyx":92
 *         raise RuntimeError("branch '{0}' has no leaves".format(branch.GetName()))
 *     leaflist = []
 *     for ileaf in range(leaves.GetEntries()):             # <<<<<<<<<<<<<<
 *         leaf = <TLeaf*>leaves.At(ileaf)
 *         leaflist.append((leaf.GetTitle(), resolve_type(leaf.GetTypeName())))
 */

#line 92 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __pyx_v_leaves->GetEntries();

#line 92 "root_numpy/src/tree.pyx"
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {

#line 92 "root_numpy/src/tree.pyx"
    __pyx_v_ileaf = __pyx_t_8;

    /* "root_numpy/src/tree.pyx":93
 *     leaflist = []
 *     for ileaf in range(leaves.GetEntries()):
 *         leaf = <TLeaf*>leaves.At(ileaf)             # <<<<<<<<<<<<<<
 *         leaflist.append((leaf.GetTitle(), resolve_type(leaf.GetTypeName())))
 *     if not leaflist:
 */

#line 93 "root_numpy/src/tree.pyx"
    __pyx_v_leaf = ((TLeaf *)__pyx_v_leaves->At(__pyx_v_ileaf));

    /* "root_numpy/src/tree.pyx":94
 *     for ileaf in range(leaves.GetEntries()):
 *         leaf = <TLeaf*>leaves.At(ileaf)
 *         leaflist.append((leaf.GetTitle(), resolve_type(leaf.GetTypeName())))             # <<<<<<<<<<<<<<
 *     if not leaflist:
 *         raise RuntimeError(
 */

#line 94 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_leaf->GetTitle()); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 94, __pyx_L1_error)

#line 94 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 94 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __pyx_f_13_librootnumpy_resolve_type(__pyx_v_leaf->GetTypeName()); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 94, __pyx_L1_error)

#line 94 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 94 "root_numpy/src/tree.pyx"
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 94, __pyx_L1_error)

#line 94 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 94 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 94 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);

#line 94 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 94 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);

#line 94 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

#line 94 "root_numpy/src/tree.pyx"
    __pyx_t_3 = 0;

#line 94 "root_numpy/src/tree.pyx"
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_leaflist, __pyx_t_6); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(2, 94, __pyx_L1_error)

#line 94 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 94 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":95
 *         leaf = <TLeaf*>leaves.At(ileaf)
 *         leaflist.append((leaf.GetTitle(), resolve_type(leaf.GetTypeName())))
 *     if not leaflist:             # <<<<<<<<<<<<<<
 *         raise RuntimeError(
 *             "leaf list for branch '{0}' is empty".format(
 */

#line 95 "root_numpy/src/tree.pyx"
  __pyx_t_1 = (__pyx_v_leaflist != Py_None) && (PyList_GET_SIZE(__pyx_v_leaflist) != 0);

#line 95 "root_numpy/src/tree.pyx"
  __pyx_t_10 = ((!__pyx_t_1) != 0);

#line 95 "root_numpy/src/tree.pyx"
  if (__pyx_t_10) {

    /* "root_numpy/src/tree.pyx":97
 *     if not leaflist:
 *         raise RuntimeError(
 *             "leaf list for branch '{0}' is empty".format(             # <<<<<<<<<<<<<<
 *                 branch.GetName()))
 *     return leaflist
 */

#line 97 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_leaf_list_for_branch_0_is_empty, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 97, __pyx_L1_error)

#line 97 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

    /* "root_numpy/src/tree.pyx":98
 *         raise RuntimeError(
 *             "leaf list for branch '{0}' is empty".format(
 *                 branch.GetName()))             # <<<<<<<<<<<<<<
 *     return leaflist
 * 
 */

#line 98 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_branch->GetName()); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 98, __pyx_L1_error)

#line 98 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 98 "root_numpy/src/tree.pyx"
    __pyx_t_4 = NULL;

#line 98 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {

#line 98 "root_numpy/src/tree.pyx"
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 98 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_4)) {

#line 98 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 98 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_4);

#line 98 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 98 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 98 "root_numpy/src/tree.pyx"
      }

#line 98 "root_numpy/src/tree.pyx"
    }

#line 98 "root_numpy/src/tree.pyx"
    if (!__pyx_t_4) {

#line 98 "root_numpy/src/tree.pyx"
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 97, __pyx_L1_error)

#line 98 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 98 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 98 "root_numpy/src/tree.pyx"
    } else {

#line 98 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 97, __pyx_L1_error)

#line 98 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 98 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 98 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 98 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);

#line 98 "root_numpy/src/tree.pyx"
      __pyx_t_2 = 0;

#line 98 "root_numpy/src/tree.pyx"
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 97, __pyx_L1_error)

#line 98 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 98 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 98 "root_numpy/src/tree.pyx"
    }

#line 98 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "root_numpy/src/tree.pyx":96
 *         leaflist.append((leaf.GetTitle(), resolve_type(leaf.GetTypeName())))
 *     if not leaflist:
 *         raise RuntimeError(             # <<<<<<<<<<<<<<
 *             "leaf list for branch '{0}' is empty".format(
 *                 branch.GetName()))
 */

#line 96 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 96, __pyx_L1_error)

#line 96 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 96 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_6);

#line 96 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);

#line 96 "root_numpy/src/tree.pyx"
    __pyx_t_6 = 0;

#line 96 "root_numpy/src/tree.pyx"
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 96, __pyx_L1_error)

#line 96 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 96 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 96 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);

#line 96 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 96 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 96, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":95
 *         leaf = <TLeaf*>leaves.At(ileaf)
 *         leaflist.append((leaf.GetTitle(), resolve_type(leaf.GetTypeName())))
 *     if not leaflist:             # <<<<<<<<<<<<<<
 *         raise RuntimeError(
 *             "leaf list for branch '{0}' is empty".format(
 */

#line 95 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":99
 *             "leaf list for branch '{0}' is empty".format(
 *                 branch.GetName()))
 *     return leaflist             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 99 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 99 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_leaflist);

#line 99 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_leaflist;

#line 99 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":84
 * 
 * 
 * cdef get_branch_structure(TBranch* branch):             # <<<<<<<<<<<<<<
 *     cdef TObjArray* leaves
 *     cdef TLeaf* leaf
 */

#line 84 "root_numpy/src/tree.pyx"


#line 84 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 84 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.get_branch_structure", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 84 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 84 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_leaflist);

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 84 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 84 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 84 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":102
 * 
 * 
 * cdef get_tree_structure(TTree* tree, branches=None):             # <<<<<<<<<<<<<<
 *     cdef int ibranch
 *     cdef TBranch* branch
 */

#line 102 "root_numpy/src/tree.pyx"


#line 102 "root_numpy/src/tree.pyx"
static PyObject *__pyx_f_13_librootnumpy_get_tree_structure(TTree *__pyx_v_tree, struct __pyx_opt_args_13_librootnumpy_get_tree_structure *__pyx_optional_args) {

#line 102 "root_numpy/src/tree.pyx"
  PyObject *__pyx_v_branches = ((PyObject *)Py_None);
  int __pyx_v_ibranch
#line 102 "root_numpy/src/tree.pyx"
;
  TBranch *__pyx_v_branch
#line 102 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_ret = NULL
#line 102 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_branch_name = NULL
#line 102 "root_numpy/src/tree.pyx"
;
  TObjArray *__pyx_v_all_branches
#line 102 "root_numpy/src/tree.pyx"
;

#line 102 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 102 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 102 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 102 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 102 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 102 "root_numpy/src/tree.pyx"
  int __pyx_t_4;

#line 102 "root_numpy/src/tree.pyx"
  int __pyx_t_5;

#line 102 "root_numpy/src/tree.pyx"
  Py_ssize_t __pyx_t_6;

#line 102 "root_numpy/src/tree.pyx"
  PyObject *(*__pyx_t_7)(PyObject *);

#line 102 "root_numpy/src/tree.pyx"
  const char *__pyx_t_8;

#line 102 "root_numpy/src/tree.pyx"
  int __pyx_t_9;

#line 102 "root_numpy/src/tree.pyx"
  int __pyx_t_10;

#line 102 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("get_tree_structure", 0);

#line 102 "root_numpy/src/tree.pyx"
  if (__pyx_optional_args) {

#line 102 "root_numpy/src/tree.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 102 "root_numpy/src/tree.pyx"
      __pyx_v_branches = __pyx_optional_args->branches;

#line 102 "root_numpy/src/tree.pyx"
    }

#line 102 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":105
 *     cdef int ibranch
 *     cdef TBranch* branch
 *     ret = OrderedDict()             # <<<<<<<<<<<<<<
 *     if branches is not None:
 *         for branch_name in branches:
 */

#line 105 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 105, __pyx_L1_error)

#line 105 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 105 "root_numpy/src/tree.pyx"
  __pyx_t_3 = NULL;

#line 105 "root_numpy/src/tree.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 105 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 105 "root_numpy/src/tree.pyx"
    if (likely(__pyx_t_3)) {

#line 105 "root_numpy/src/tree.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 105 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 105 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(function);

#line 105 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 105 "root_numpy/src/tree.pyx"
    }

#line 105 "root_numpy/src/tree.pyx"
  }

#line 105 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

#line 105 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 105, __pyx_L1_error)

#line 105 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 105 "root_numpy/src/tree.pyx"
  } else {

#line 105 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 105, __pyx_L1_error)

#line 105 "root_numpy/src/tree.pyx"
  }

#line 105 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 105 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 105 "root_numpy/src/tree.pyx"
  __pyx_v_ret = __pyx_t_1;

#line 105 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":106
 *     cdef TBranch* branch
 *     ret = OrderedDict()
 *     if branches is not None:             # <<<<<<<<<<<<<<
 *         for branch_name in branches:
 *             branch = tree.GetBranch(branch_name)
 */

#line 106 "root_numpy/src/tree.pyx"
  __pyx_t_4 = (__pyx_v_branches != Py_None);

#line 106 "root_numpy/src/tree.pyx"
  __pyx_t_5 = (__pyx_t_4 != 0);

#line 106 "root_numpy/src/tree.pyx"
  if (__pyx_t_5) {

    /* "root_numpy/src/tree.pyx":107
 *     ret = OrderedDict()
 *     if branches is not None:
 *         for branch_name in branches:             # <<<<<<<<<<<<<<
 *             branch = tree.GetBranch(branch_name)
 *             if branch == NULL:
 */

#line 107 "root_numpy/src/tree.pyx"
    if (likely(PyList_CheckExact(__pyx_v_branches)) || PyTuple_CheckExact(__pyx_v_branches)) {

#line 107 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __pyx_v_branches; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;

#line 107 "root_numpy/src/tree.pyx"
      __pyx_t_7 = NULL;

#line 107 "root_numpy/src/tree.pyx"
    } else {
      __pyx_t_6 = -1; 
#line 107 "root_numpy/src/tree.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_v_branches); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 107, __pyx_L1_error)

#line 107 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 107 "root_numpy/src/tree.pyx"
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 107, __pyx_L1_error)

#line 107 "root_numpy/src/tree.pyx"
    }

#line 107 "root_numpy/src/tree.pyx"
    for (;;) {

#line 107 "root_numpy/src/tree.pyx"
      if (likely(!__pyx_t_7)) {

#line 107 "root_numpy/src/tree.pyx"
        if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 107 "root_numpy/src/tree.pyx"
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 107 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 107 "root_numpy/src/tree.pyx"
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 107, __pyx_L1_error)

#line 107 "root_numpy/src/tree.pyx"
          #else

#line 107 "root_numpy/src/tree.pyx"
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 107, __pyx_L1_error)

#line 107 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 107 "root_numpy/src/tree.pyx"
          #endif

#line 107 "root_numpy/src/tree.pyx"
        } else {

#line 107 "root_numpy/src/tree.pyx"
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 107 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 107 "root_numpy/src/tree.pyx"
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 107, __pyx_L1_error)

#line 107 "root_numpy/src/tree.pyx"
          #else

#line 107 "root_numpy/src/tree.pyx"
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 107, __pyx_L1_error)

#line 107 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 107 "root_numpy/src/tree.pyx"
          #endif

#line 107 "root_numpy/src/tree.pyx"
        }
      } else 
#line 107 "root_numpy/src/tree.pyx"
{

#line 107 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __pyx_t_7(__pyx_t_1);

#line 107 "root_numpy/src/tree.pyx"
        if (unlikely(!__pyx_t_2)) {

#line 107 "root_numpy/src/tree.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 107 "root_numpy/src/tree.pyx"
          if (exc_type) {

#line 107 "root_numpy/src/tree.pyx"
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 107 "root_numpy/src/tree.pyx"
            else __PYX_ERR(2, 107, __pyx_L1_error)

#line 107 "root_numpy/src/tree.pyx"
          }

#line 107 "root_numpy/src/tree.pyx"
          break;

#line 107 "root_numpy/src/tree.pyx"
        }

#line 107 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 107 "root_numpy/src/tree.pyx"
      }

#line 107 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF_SET(__pyx_v_branch_name, __pyx_t_2);

#line 107 "root_numpy/src/tree.pyx"
      __pyx_t_2 = 0;

      /* "root_numpy/src/tree.pyx":108
 *     if branches is not None:
 *         for branch_name in branches:
 *             branch = tree.GetBranch(branch_name)             # <<<<<<<<<<<<<<
 *             if branch == NULL:
 *                 continue
 */

#line 108 "root_numpy/src/tree.pyx"
      __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_branch_name); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(2, 108, __pyx_L1_error)

#line 108 "root_numpy/src/tree.pyx"
      __pyx_v_branch = __pyx_v_tree->GetBranch(__pyx_t_8);

      /* "root_numpy/src/tree.pyx":109
 *         for branch_name in branches:
 *             branch = tree.GetBranch(branch_name)
 *             if branch == NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             ret[branch.GetName()] = get_branch_structure(branch)
 */

#line 109 "root_numpy/src/tree.pyx"
      __pyx_t_5 = ((__pyx_v_branch == NULL) != 0);

#line 109 "root_numpy/src/tree.pyx"
      if (__pyx_t_5) {

        /* "root_numpy/src/tree.pyx":110
 *             branch = tree.GetBranch(branch_name)
 *             if branch == NULL:
 *                 continue             # <<<<<<<<<<<<<<
 *             ret[branch.GetName()] = get_branch_structure(branch)
 *         return ret
 */

#line 110 "root_numpy/src/tree.pyx"
        goto __pyx_L4_continue;

        /* "root_numpy/src/tree.pyx":109
 *         for branch_name in branches:
 *             branch = tree.GetBranch(branch_name)
 *             if branch == NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             ret[branch.GetName()] = get_branch_structure(branch)
 */

#line 109 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":111
 *             if branch == NULL:
 *                 continue
 *             ret[branch.GetName()] = get_branch_structure(branch)             # <<<<<<<<<<<<<<
 *         return ret
 *     # all branches
 */

#line 111 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __pyx_f_13_librootnumpy_get_branch_structure(__pyx_v_branch); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 111, __pyx_L1_error)

#line 111 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 111 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyStr_FromString(__pyx_v_branch->GetName()); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 111, __pyx_L1_error)

#line 111 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 111 "root_numpy/src/tree.pyx"
      if (unlikely(PyObject_SetItem(__pyx_v_ret, __pyx_t_3, __pyx_t_2) < 0)) __PYX_ERR(2, 111, __pyx_L1_error)

#line 111 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 111 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "root_numpy/src/tree.pyx":107
 *     ret = OrderedDict()
 *     if branches is not None:
 *         for branch_name in branches:             # <<<<<<<<<<<<<<
 *             branch = tree.GetBranch(branch_name)
 *             if branch == NULL:
 */

#line 107 "root_numpy/src/tree.pyx"
      __pyx_L4_continue:;

#line 107 "root_numpy/src/tree.pyx"
    }

#line 107 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "root_numpy/src/tree.pyx":112
 *                 continue
 *             ret[branch.GetName()] = get_branch_structure(branch)
 *         return ret             # <<<<<<<<<<<<<<
 *     # all branches
 *     cdef TObjArray* all_branches = tree.GetListOfBranches()
 */

#line 112 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 112 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_ret);

#line 112 "root_numpy/src/tree.pyx"
    __pyx_r = __pyx_v_ret;

#line 112 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/tree.pyx":106
 *     cdef TBranch* branch
 *     ret = OrderedDict()
 *     if branches is not None:             # <<<<<<<<<<<<<<
 *         for branch_name in branches:
 *             branch = tree.GetBranch(branch_name)
 */

#line 106 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":114
 *         return ret
 *     # all branches
 *     cdef TObjArray* all_branches = tree.GetListOfBranches()             # <<<<<<<<<<<<<<
 *     if all_branches == NULL:
 *         return ret
 */

#line 114 "root_numpy/src/tree.pyx"
  __pyx_v_all_branches = __pyx_v_tree->GetListOfBranches();

  /* "root_numpy/src/tree.pyx":115
 *     # all branches
 *     cdef TObjArray* all_branches = tree.GetListOfBranches()
 *     if all_branches == NULL:             # <<<<<<<<<<<<<<
 *         return ret
 *     for ibranch in range(all_branches.GetEntries()):
 */

#line 115 "root_numpy/src/tree.pyx"
  __pyx_t_5 = ((__pyx_v_all_branches == NULL) != 0);

#line 115 "root_numpy/src/tree.pyx"
  if (__pyx_t_5) {

    /* "root_numpy/src/tree.pyx":116
 *     cdef TObjArray* all_branches = tree.GetListOfBranches()
 *     if all_branches == NULL:
 *         return ret             # <<<<<<<<<<<<<<
 *     for ibranch in range(all_branches.GetEntries()):
 *         branch = <TBranch*>(all_branches.At(ibranch))
 */

#line 116 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 116 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_ret);

#line 116 "root_numpy/src/tree.pyx"
    __pyx_r = __pyx_v_ret;

#line 116 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/tree.pyx":115
 *     # all branches
 *     cdef TObjArray* all_branches = tree.GetListOfBranches()
 *     if all_branches == NULL:             # <<<<<<<<<<<<<<
 *         return ret
 *     for ibranch in range(all_branches.GetEntries()):
 */

#line 115 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":117
 *     if all_branches == NULL:
 *         return ret
 *     for ibranch in range(all_branches.GetEntries()):             # <<<<<<<<<<<<<<
 *         branch = <TBranch*>(all_branches.At(ibranch))
 *         ret[branch.GetName()] = get_branch_structure(branch)
 */

#line 117 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __pyx_v_all_branches->GetEntries();

#line 117 "root_numpy/src/tree.pyx"
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {

#line 117 "root_numpy/src/tree.pyx"
    __pyx_v_ibranch = __pyx_t_10;

    /* "root_numpy/src/tree.pyx":118
 *         return ret
 *     for ibranch in range(all_branches.GetEntries()):
 *         branch = <TBranch*>(all_branches.At(ibranch))             # <<<<<<<<<<<<<<
 *         ret[branch.GetName()] = get_branch_structure(branch)
 *     return ret
 */

#line 118 "root_numpy/src/tree.pyx"
    __pyx_v_branch = ((TBranch *)__pyx_v_all_branches->At(__pyx_v_ibranch));

    /* "root_numpy/src/tree.pyx":119
 *     for ibranch in range(all_branches.GetEntries()):
 *         branch = <TBranch*>(all_branches.At(ibranch))
 *         ret[branch.GetName()] = get_branch_structure(branch)             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */

#line 119 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __pyx_f_13_librootnumpy_get_branch_structure(__pyx_v_branch); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 119, __pyx_L1_error)

#line 119 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 119 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_branch->GetName()); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 119, __pyx_L1_error)

#line 119 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 119 "root_numpy/src/tree.pyx"
    if (unlikely(PyObject_SetItem(__pyx_v_ret, __pyx_t_2, __pyx_t_1) < 0)) __PYX_ERR(2, 119, __pyx_L1_error)

#line 119 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 119 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 119 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":120
 *         branch = <TBranch*>(all_branches.At(ibranch))
 *         ret[branch.GetName()] = get_branch_structure(branch)
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 120 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 120 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_ret);

#line 120 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_ret;

#line 120 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":102
 * 
 * 
 * cdef get_tree_structure(TTree* tree, branches=None):             # <<<<<<<<<<<<<<
 *     cdef int ibranch
 *     cdef TBranch* branch
 */

#line 102 "root_numpy/src/tree.pyx"


#line 102 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 102 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 102 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 102 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 102 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 102 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.get_tree_structure", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 102 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 102 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 102 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_ret);

#line 102 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_branch_name);

#line 102 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 102 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 102 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 102 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":123
 * 
 * 
 * cdef humanize_bytes(long value, int precision=1):             # <<<<<<<<<<<<<<
 *     abbrevs = (
 *         (1<<50, 'PB'),
 */

#line 123 "root_numpy/src/tree.pyx"


#line 123 "root_numpy/src/tree.pyx"
static PyObject *__pyx_f_13_librootnumpy_humanize_bytes(long __pyx_v_value, struct __pyx_opt_args_13_librootnumpy_humanize_bytes *__pyx_optional_args) {

#line 123 "root_numpy/src/tree.pyx"
  int __pyx_v_precision = ((int)1);
  PyObject *__pyx_v_abbrevs = NULL
#line 123 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_factor = NULL
#line 123 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_suffix = NULL
#line 123 "root_numpy/src/tree.pyx"
;

#line 123 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 123 "root_numpy/src/tree.pyx"
  int __pyx_t_1;

#line 123 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 123 "root_numpy/src/tree.pyx"
  Py_ssize_t __pyx_t_3;

#line 123 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 123 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 123 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 123 "root_numpy/src/tree.pyx"
  double __pyx_t_7;

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("humanize_bytes", 0);

#line 123 "root_numpy/src/tree.pyx"
  if (__pyx_optional_args) {

#line 123 "root_numpy/src/tree.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 123 "root_numpy/src/tree.pyx"
      __pyx_v_precision = __pyx_optional_args->precision;

#line 123 "root_numpy/src/tree.pyx"
    }

#line 123 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":125
 * cdef humanize_bytes(long value, int precision=1):
 *     abbrevs = (
 *         (1<<50, 'PB'),             # <<<<<<<<<<<<<<
 *         (1<<40, 'TB'),
 *         (1<<30, 'GB'),
 */

#line 125 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_tuple__24);

#line 125 "root_numpy/src/tree.pyx"
  __pyx_v_abbrevs = __pyx_tuple__24;

  /* "root_numpy/src/tree.pyx":131
 *         (1<<10, 'kB'),
 *         (1, 'bytes'))
 *     if value == 1:             # <<<<<<<<<<<<<<
 *         return '1 byte'
 *     for factor, suffix in abbrevs:
 */

#line 131 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((__pyx_v_value == 1) != 0);

#line 131 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":132
 *         (1, 'bytes'))
 *     if value == 1:
 *         return '1 byte'             # <<<<<<<<<<<<<<
 *     for factor, suffix in abbrevs:
 *         if value >= factor:
 */

#line 132 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 132 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_kp_s_1_byte);

#line 132 "root_numpy/src/tree.pyx"
    __pyx_r = __pyx_kp_s_1_byte;

#line 132 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/tree.pyx":131
 *         (1<<10, 'kB'),
 *         (1, 'bytes'))
 *     if value == 1:             # <<<<<<<<<<<<<<
 *         return '1 byte'
 *     for factor, suffix in abbrevs:
 */

#line 131 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":133
 *     if value == 1:
 *         return '1 byte'
 *     for factor, suffix in abbrevs:             # <<<<<<<<<<<<<<
 *         if value >= factor:
 *             break
 */

#line 133 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __pyx_v_abbrevs; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;

#line 133 "root_numpy/src/tree.pyx"
  for (;;) {

#line 133 "root_numpy/src/tree.pyx"
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 133 "root_numpy/src/tree.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 133 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 133, __pyx_L1_error)

#line 133 "root_numpy/src/tree.pyx"
    #else

#line 133 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 133, __pyx_L1_error)

#line 133 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 133 "root_numpy/src/tree.pyx"
    #endif

#line 133 "root_numpy/src/tree.pyx"
    if (likely(__pyx_t_4 != Py_None)) {

#line 133 "root_numpy/src/tree.pyx"
      PyObject* sequence = __pyx_t_4;

#line 133 "root_numpy/src/tree.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 133 "root_numpy/src/tree.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 133 "root_numpy/src/tree.pyx"
      #else

#line 133 "root_numpy/src/tree.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 133 "root_numpy/src/tree.pyx"
      #endif

#line 133 "root_numpy/src/tree.pyx"
      if (unlikely(size != 2)) {

#line 133 "root_numpy/src/tree.pyx"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 133 "root_numpy/src/tree.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 133 "root_numpy/src/tree.pyx"
        __PYX_ERR(2, 133, __pyx_L1_error)

#line 133 "root_numpy/src/tree.pyx"
      }

#line 133 "root_numpy/src/tree.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 133 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 

#line 133 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 

#line 133 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 133 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_6);

#line 133 "root_numpy/src/tree.pyx"
      #else

#line 133 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 133, __pyx_L1_error)

#line 133 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 133 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 133, __pyx_L1_error)

#line 133 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 133 "root_numpy/src/tree.pyx"
      #endif

#line 133 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 133 "root_numpy/src/tree.pyx"
    } else {

#line 133 "root_numpy/src/tree.pyx"
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 133, __pyx_L1_error)

#line 133 "root_numpy/src/tree.pyx"
    }

#line 133 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF_SET(__pyx_v_factor, __pyx_t_5);

#line 133 "root_numpy/src/tree.pyx"
    __pyx_t_5 = 0;

#line 133 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF_SET(__pyx_v_suffix, __pyx_t_6);

#line 133 "root_numpy/src/tree.pyx"
    __pyx_t_6 = 0;

    /* "root_numpy/src/tree.pyx":134
 *         return '1 byte'
 *     for factor, suffix in abbrevs:
 *         if value >= factor:             # <<<<<<<<<<<<<<
 *             break
 *     return '%.*f %s' % (precision, value / float(factor), suffix)
 */

#line 134 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 134, __pyx_L1_error)

#line 134 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 134 "root_numpy/src/tree.pyx"
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_v_factor, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 134, __pyx_L1_error)

#line 134 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 134 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 134, __pyx_L1_error)

#line 134 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 134 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":135
 *     for factor, suffix in abbrevs:
 *         if value >= factor:
 *             break             # <<<<<<<<<<<<<<
 *     return '%.*f %s' % (precision, value / float(factor), suffix)
 * 
 */

#line 135 "root_numpy/src/tree.pyx"
      goto __pyx_L5_break;

      /* "root_numpy/src/tree.pyx":134
 *         return '1 byte'
 *     for factor, suffix in abbrevs:
 *         if value >= factor:             # <<<<<<<<<<<<<<
 *             break
 *     return '%.*f %s' % (precision, value / float(factor), suffix)
 */

#line 134 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":133
 *     if value == 1:
 *         return '1 byte'
 *     for factor, suffix in abbrevs:             # <<<<<<<<<<<<<<
 *         if value >= factor:
 *             break
 */

#line 133 "root_numpy/src/tree.pyx"
  }

#line 133 "root_numpy/src/tree.pyx"
  __pyx_L5_break:;

#line 133 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "root_numpy/src/tree.pyx":136
 *         if value >= factor:
 *             break
 *     return '%.*f %s' % (precision, value / float(factor), suffix)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 136 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 136 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_precision); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 136, __pyx_L1_error)

#line 136 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 136 "root_numpy/src/tree.pyx"
  if (unlikely(!__pyx_v_factor)) { __Pyx_RaiseUnboundLocalError("factor"); __PYX_ERR(2, 136, __pyx_L1_error) }

#line 136 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_AsDouble(__pyx_v_factor); if (unlikely(__pyx_t_7 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(2, 136, __pyx_L1_error)

#line 136 "root_numpy/src/tree.pyx"
  if (unlikely(__pyx_t_7 == 0)) {

#line 136 "root_numpy/src/tree.pyx"
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");

#line 136 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 136, __pyx_L1_error)

#line 136 "root_numpy/src/tree.pyx"
  }

#line 136 "root_numpy/src/tree.pyx"
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_value / __pyx_t_7)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 136, __pyx_L1_error)

#line 136 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 136 "root_numpy/src/tree.pyx"
  if (unlikely(!__pyx_v_suffix)) { __Pyx_RaiseUnboundLocalError("suffix"); __PYX_ERR(2, 136, __pyx_L1_error) }

#line 136 "root_numpy/src/tree.pyx"
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 136, __pyx_L1_error)

#line 136 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 136 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 136 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 136 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 136 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);

#line 136 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_suffix);

#line 136 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_v_suffix);

#line 136 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_suffix);

#line 136 "root_numpy/src/tree.pyx"
  __pyx_t_2 = 0;

#line 136 "root_numpy/src/tree.pyx"
  __pyx_t_6 = 0;

#line 136 "root_numpy/src/tree.pyx"
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_f_s, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 136, __pyx_L1_error)

#line 136 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 136 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 136 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_6;

#line 136 "root_numpy/src/tree.pyx"
  __pyx_t_6 = 0;

#line 136 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":123
 * 
 * 
 * cdef humanize_bytes(long value, int precision=1):             # <<<<<<<<<<<<<<
 *     abbrevs = (
 *         (1<<50, 'PB'),
 */

#line 123 "root_numpy/src/tree.pyx"


#line 123 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 123 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.humanize_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 123 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 123 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_abbrevs);

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_factor);

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_suffix);

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 123 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 123 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 123 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":139
 * 
 * 
 * cdef handle_load(int load, bool ignore_index=False):             # <<<<<<<<<<<<<<
 *     if load >= 0:
 *         return
 */

#line 139 "root_numpy/src/tree.pyx"


#line 139 "root_numpy/src/tree.pyx"
static PyObject *__pyx_f_13_librootnumpy_handle_load(int __pyx_v_load, struct __pyx_opt_args_13_librootnumpy_handle_load *__pyx_optional_args) {

#line 139 "root_numpy/src/tree.pyx"
  bool __pyx_v_ignore_index = ((bool)0);

#line 139 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 139 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 139 "root_numpy/src/tree.pyx"
  int __pyx_t_1;

#line 139 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 139 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("handle_load", 0);

#line 139 "root_numpy/src/tree.pyx"
  if (__pyx_optional_args) {

#line 139 "root_numpy/src/tree.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 139 "root_numpy/src/tree.pyx"
      __pyx_v_ignore_index = __pyx_optional_args->ignore_index;

#line 139 "root_numpy/src/tree.pyx"
    }

#line 139 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":140
 * 
 * cdef handle_load(int load, bool ignore_index=False):
 *     if load >= 0:             # <<<<<<<<<<<<<<
 *         return
 *     if load == -1:
 */

#line 140 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((__pyx_v_load >= 0) != 0);

#line 140 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":141
 * cdef handle_load(int load, bool ignore_index=False):
 *     if load >= 0:
 *         return             # <<<<<<<<<<<<<<
 *     if load == -1:
 *         raise ValueError("chain is empty")
 */

#line 141 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 141 "root_numpy/src/tree.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 141 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/tree.pyx":140
 * 
 * cdef handle_load(int load, bool ignore_index=False):
 *     if load >= 0:             # <<<<<<<<<<<<<<
 *         return
 *     if load == -1:
 */

#line 140 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":142
 *     if load >= 0:
 *         return
 *     if load == -1:             # <<<<<<<<<<<<<<
 *         raise ValueError("chain is empty")
 *     elif load == -2:
 */

#line 142 "root_numpy/src/tree.pyx"
  switch (__pyx_v_load) {

#line 142 "root_numpy/src/tree.pyx"
    case -1L:

    /* "root_numpy/src/tree.pyx":143
 *         return
 *     if load == -1:
 *         raise ValueError("chain is empty")             # <<<<<<<<<<<<<<
 *     elif load == -2:
 *         if ignore_index:
 */

#line 143 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 143, __pyx_L1_error)

#line 143 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 143 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 143 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 143 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 143, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":142
 *     if load >= 0:
 *         return
 *     if load == -1:             # <<<<<<<<<<<<<<
 *         raise ValueError("chain is empty")
 *     elif load == -2:
 */

#line 142 "root_numpy/src/tree.pyx"
    break;

    /* "root_numpy/src/tree.pyx":144
 *     if load == -1:
 *         raise ValueError("chain is empty")
 *     elif load == -2:             # <<<<<<<<<<<<<<
 *         if ignore_index:
 *             return
 */

#line 144 "root_numpy/src/tree.pyx"
    case -2L:

    /* "root_numpy/src/tree.pyx":145
 *         raise ValueError("chain is empty")
 *     elif load == -2:
 *         if ignore_index:             # <<<<<<<<<<<<<<
 *             return
 *         raise IndexError("tree index in chain is out of bounds")
 */

#line 145 "root_numpy/src/tree.pyx"
    __pyx_t_1 = (__pyx_v_ignore_index != 0);

#line 145 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":146
 *     elif load == -2:
 *         if ignore_index:
 *             return             # <<<<<<<<<<<<<<
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:
 */

#line 146 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 146 "root_numpy/src/tree.pyx"
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 146 "root_numpy/src/tree.pyx"
      goto __pyx_L0;

      /* "root_numpy/src/tree.pyx":145
 *         raise ValueError("chain is empty")
 *     elif load == -2:
 *         if ignore_index:             # <<<<<<<<<<<<<<
 *             return
 *         raise IndexError("tree index in chain is out of bounds")
 */

#line 145 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":147
 *         if ignore_index:
 *             return
 *         raise IndexError("tree index in chain is out of bounds")             # <<<<<<<<<<<<<<
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 */

#line 147 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 147, __pyx_L1_error)

#line 147 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 147 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 147 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 147 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 147, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":144
 *     if load == -1:
 *         raise ValueError("chain is empty")
 *     elif load == -2:             # <<<<<<<<<<<<<<
 *         if ignore_index:
 *             return
 */

#line 144 "root_numpy/src/tree.pyx"
    break;

    /* "root_numpy/src/tree.pyx":148
 *             return
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot open current file")
 *     elif load == -4:
 */

#line 148 "root_numpy/src/tree.pyx"
    case -3L:

    /* "root_numpy/src/tree.pyx":149
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:
 *         raise IOError("cannot open current file")             # <<<<<<<<<<<<<<
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 */

#line 149 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 149, __pyx_L1_error)

#line 149 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 149 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 149 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 149 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 149, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":148
 *             return
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot open current file")
 *     elif load == -4:
 */

#line 148 "root_numpy/src/tree.pyx"
    break;

    /* "root_numpy/src/tree.pyx":150
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 *     elif load == -4:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")
 */

#line 150 "root_numpy/src/tree.pyx"
    case -4L:

    /* "root_numpy/src/tree.pyx":151
 *         raise IOError("cannot open current file")
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")             # <<<<<<<<<<<<<<
 *     raise RuntimeError("the chain is not initialized")
 * 
 */

#line 151 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 151, __pyx_L1_error)

#line 151 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 151 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 151 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 151 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 151, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":150
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 *     elif load == -4:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")
 */

#line 150 "root_numpy/src/tree.pyx"
    break;

#line 150 "root_numpy/src/tree.pyx"
    default: break;

#line 150 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":152
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 152 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 152, __pyx_L1_error)

#line 152 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 152 "root_numpy/src/tree.pyx"
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 152 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 152 "root_numpy/src/tree.pyx"
  __PYX_ERR(2, 152, __pyx_L1_error)

  /* "root_numpy/src/tree.pyx":139
 * 
 * 
 * cdef handle_load(int load, bool ignore_index=False):             # <<<<<<<<<<<<<<
 *     if load >= 0:
 *         return
 */

#line 139 "root_numpy/src/tree.pyx"


#line 139 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 139 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 139 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 139 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.handle_load", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 139 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 139 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 139 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 139 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 139 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 139 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":155
 * 
 * 
 * cdef object tree2array(TTree* tree, bool ischain, branches, string selection,             # <<<<<<<<<<<<<<
 *                        start, stop, step,
 *                        bool include_weight, string weight_name,
 */

#line 155 "root_numpy/src/tree.pyx"


#line 155 "root_numpy/src/tree.pyx"
static PyObject *__pyx_f_13_librootnumpy_tree2array(TTree *__pyx_v_tree, bool __pyx_v_ischain, PyObject *__pyx_v_branches, std::string __pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, bool __pyx_v_include_weight, std::string __pyx_v_weight_name, long __pyx_v_cache_size) {
  int __pyx_v_num_requested_branches
#line 155 "root_numpy/src/tree.pyx"
;
  PY_LONG_LONG __pyx_v_num_entries
#line 155 "root_numpy/src/tree.pyx"
;
  PY_LONG_LONG __pyx_v_num_entries_selected
#line 155 "root_numpy/src/tree.pyx"
;
  PY_LONG_LONG __pyx_v_ientry
#line 155 "root_numpy/src/tree.pyx"
;
  PY_LONG_LONG __pyx_v_istart
#line 155 "root_numpy/src/tree.pyx"
;
  PY_LONG_LONG __pyx_v_istop
#line 155 "root_numpy/src/tree.pyx"
;
  PY_LONG_LONG __pyx_v_istep
#line 155 "root_numpy/src/tree.pyx"
;
  TreeChain *__pyx_v_chain
#line 155 "root_numpy/src/tree.pyx"
;
  TObjArray *__pyx_v_branch_array
#line 155 "root_numpy/src/tree.pyx"
;
  TObjArray *__pyx_v_leaf_array
#line 155 "root_numpy/src/tree.pyx"
;
  TBranch *__pyx_v_tbranch
#line 155 "root_numpy/src/tree.pyx"
;
  TLeaf *__pyx_v_tleaf
#line 155 "root_numpy/src/tree.pyx"
;
  Column *__pyx_v_col
#line 155 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_conv
#line 155 "root_numpy/src/tree.pyx"
;
  std::vector<Column *>  __pyx_v_columns
#line 155 "root_numpy/src/tree.pyx"
;
  std::vector<__pyx_t_13_librootnumpy_Converter *>  __pyx_v_converters
#line 155 "root_numpy/src/tree.pyx"
;
  std::vector<std::vector<Column *> >  __pyx_v_column_buckets
#line 155 "root_numpy/src/tree.pyx"
;
  std::vector<std::vector<__pyx_t_13_librootnumpy_Converter *> >  __pyx_v_converter_buckets
#line 155 "root_numpy/src/tree.pyx"
;
  TTreeFormula *__pyx_v_selection_formula
#line 155 "root_numpy/src/tree.pyx"
;
  TTreeFormula *__pyx_v_formula
#line 155 "root_numpy/src/tree.pyx"
;
  int __pyx_v_instance
#line 155 "root_numpy/src/tree.pyx"
;
  bool __pyx_v_keep
#line 155 "root_numpy/src/tree.pyx"
;
  int __pyx_v_ibranch
#line 155 "root_numpy/src/tree.pyx"
;
  int __pyx_v_ileaf
#line 155 "root_numpy/src/tree.pyx"
;
  int __pyx_v_branch_idx
#line 155 "root_numpy/src/tree.pyx"
;
  int __pyx_v_num_branches
#line 155 "root_numpy/src/tree.pyx"
;
  unsigned int __pyx_v_icol
#line 155 "root_numpy/src/tree.pyx"
;
  unsigned int __pyx_v_num_columns
#line 155 "root_numpy/src/tree.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 155 "root_numpy/src/tree.pyx"
;
  void *__pyx_v_data_ptr
#line 155 "root_numpy/src/tree.pyx"
;
  int __pyx_v_num_bytes
#line 155 "root_numpy/src/tree.pyx"
;
  int __pyx_v_entry_size
#line 155 "root_numpy/src/tree.pyx"
;
  char *__pyx_v_c_string
#line 155 "root_numpy/src/tree.pyx"
;
  bool __pyx_v_shortname
#line 155 "root_numpy/src/tree.pyx"
;
  std::string __pyx_v_column_name
#line 155 "root_numpy/src/tree.pyx"
;
  const char *__pyx_v_branch_name
#line 155 "root_numpy/src/tree.pyx"
;
  const char *__pyx_v_leaf_name
#line 155 "root_numpy/src/tree.pyx"
;
  std::string __pyx_v_branch_title
#line 155 "root_numpy/src/tree.pyx"
;
  int __pyx_v_branch_title_size
#line 155 "root_numpy/src/tree.pyx"
;
  char __pyx_v_type_code
#line 155 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_branch_dict = NULL
#line 155 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_seen_branches = NULL
#line 155 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_expression = NULL
#line 155 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_dtype_fields = NULL
#line 155 "root_numpy/src/tree.pyx"
;
  Column *__pyx_v_this_col
#line 155 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_this_conv
#line 155 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_dtype = NULL
#line 155 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_slice_tuple = NULL
#line 155 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_slice_indices = NULL
#line 155 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_idx = NULL
#line 155 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_b = NULL
#line 155 "root_numpy/src/tree.pyx"
;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 155 "root_numpy/src/tree.pyx"
  int __pyx_t_1;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  int __pyx_t_3;

#line 155 "root_numpy/src/tree.pyx"
  Py_ssize_t __pyx_t_4;

#line 155 "root_numpy/src/tree.pyx"
  struct __pyx_opt_args_13_librootnumpy_handle_load __pyx_t_5;

#line 155 "root_numpy/src/tree.pyx"
  std::vector<Column *>  __pyx_t_6;

#line 155 "root_numpy/src/tree.pyx"
  std::vector<__pyx_t_13_librootnumpy_Converter *>  __pyx_t_7;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *(*__pyx_t_12)(PyObject *);

#line 155 "root_numpy/src/tree.pyx"
  int __pyx_t_13;

#line 155 "root_numpy/src/tree.pyx"
  int __pyx_t_14;

#line 155 "root_numpy/src/tree.pyx"
  int __pyx_t_15;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_16 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_17 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  int __pyx_t_18;

#line 155 "root_numpy/src/tree.pyx"
  std::string __pyx_t_19;

#line 155 "root_numpy/src/tree.pyx"
  int __pyx_t_20;

#line 155 "root_numpy/src/tree.pyx"
  __pyx_t_13_librootnumpy_Converter *__pyx_t_21;

#line 155 "root_numpy/src/tree.pyx"
  struct __pyx_opt_args_13_librootnumpy_get_converter __pyx_t_22;

#line 155 "root_numpy/src/tree.pyx"
  std::string __pyx_t_23;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_24 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_25 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  char *__pyx_t_26;

#line 155 "root_numpy/src/tree.pyx"
  size_t __pyx_t_27;

#line 155 "root_numpy/src/tree.pyx"
  unsigned int __pyx_t_28;

#line 155 "root_numpy/src/tree.pyx"
  PY_LONG_LONG __pyx_t_29;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_30 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_31 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_32 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  long __pyx_t_33;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_34 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  unsigned int __pyx_t_35;

#line 155 "root_numpy/src/tree.pyx"
  char const *__pyx_t_36;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_37 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_38 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_39 = NULL;

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("tree2array", 0);

  /* "root_numpy/src/tree.pyx":160
 *                        long cache_size):
 * 
 *     if tree.GetNbranches() == 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("tree has no branches")
 * 
 */

#line 160 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((__pyx_v_tree->GetNbranches() == 0) != 0);

#line 160 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":161
 * 
 *     if tree.GetNbranches() == 0:
 *         raise ValueError("tree has no branches")             # <<<<<<<<<<<<<<
 * 
 *     cdef int num_requested_branches = 0
 */

#line 161 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 161, __pyx_L1_error)

#line 161 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 161 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 161 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 161 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 161, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":160
 *                        long cache_size):
 * 
 *     if tree.GetNbranches() == 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("tree has no branches")
 * 
 */

#line 160 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":163
 *         raise ValueError("tree has no branches")
 * 
 *     cdef int num_requested_branches = 0             # <<<<<<<<<<<<<<
 *     if branches is not None:
 *         num_requested_branches = len(branches)
 */

#line 163 "root_numpy/src/tree.pyx"
  __pyx_v_num_requested_branches = 0;

  /* "root_numpy/src/tree.pyx":164
 * 
 *     cdef int num_requested_branches = 0
 *     if branches is not None:             # <<<<<<<<<<<<<<
 *         num_requested_branches = len(branches)
 *         if num_requested_branches == 0:
 */

#line 164 "root_numpy/src/tree.pyx"
  __pyx_t_1 = (__pyx_v_branches != Py_None);

#line 164 "root_numpy/src/tree.pyx"
  __pyx_t_3 = (__pyx_t_1 != 0);

#line 164 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/tree.pyx":165
 *     cdef int num_requested_branches = 0
 *     if branches is not None:
 *         num_requested_branches = len(branches)             # <<<<<<<<<<<<<<
 *         if num_requested_branches == 0:
 *             raise ValueError("branches is an empty list")
 */

#line 165 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyObject_Length(__pyx_v_branches); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 165, __pyx_L1_error)

#line 165 "root_numpy/src/tree.pyx"
    __pyx_v_num_requested_branches = __pyx_t_4;

    /* "root_numpy/src/tree.pyx":166
 *     if branches is not None:
 *         num_requested_branches = len(branches)
 *         if num_requested_branches == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("branches is an empty list")
 * 
 */

#line 166 "root_numpy/src/tree.pyx"
    __pyx_t_3 = ((__pyx_v_num_requested_branches == 0) != 0);

#line 166 "root_numpy/src/tree.pyx"
    if (__pyx_t_3) {

      /* "root_numpy/src/tree.pyx":167
 *         num_requested_branches = len(branches)
 *         if num_requested_branches == 0:
 *             raise ValueError("branches is an empty list")             # <<<<<<<<<<<<<<
 * 
 *     cdef long long num_entries = tree.GetEntries()
 */

#line 167 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 167, __pyx_L1_error)

#line 167 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 167 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 167 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 167 "root_numpy/src/tree.pyx"
      __PYX_ERR(2, 167, __pyx_L1_error)

      /* "root_numpy/src/tree.pyx":166
 *     if branches is not None:
 *         num_requested_branches = len(branches)
 *         if num_requested_branches == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("branches is an empty list")
 * 
 */

#line 166 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":164
 * 
 *     cdef int num_requested_branches = 0
 *     if branches is not None:             # <<<<<<<<<<<<<<
 *         num_requested_branches = len(branches)
 *         if num_requested_branches == 0:
 */

#line 164 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":169
 *             raise ValueError("branches is an empty list")
 * 
 *     cdef long long num_entries = tree.GetEntries()             # <<<<<<<<<<<<<<
 *     cdef long long num_entries_selected = 0
 *     cdef long long ientry
 */

#line 169 "root_numpy/src/tree.pyx"
  __pyx_v_num_entries = __pyx_v_tree->GetEntries();

  /* "root_numpy/src/tree.pyx":170
 * 
 *     cdef long long num_entries = tree.GetEntries()
 *     cdef long long num_entries_selected = 0             # <<<<<<<<<<<<<<
 *     cdef long long ientry
 *     cdef long long istart
 */

#line 170 "root_numpy/src/tree.pyx"
  __pyx_v_num_entries_selected = 0;

  /* "root_numpy/src/tree.pyx":176
 *     cdef long long istep
 * 
 *     cdef TreeChain* chain = new TreeChain(tree, ischain, cache_size)             # <<<<<<<<<<<<<<
 *     handle_load(chain.Prepare(), True)
 * 
 */

#line 176 "root_numpy/src/tree.pyx"
  __pyx_v_chain = new TreeChain(__pyx_v_tree, __pyx_v_ischain, __pyx_v_cache_size);

  /* "root_numpy/src/tree.pyx":177
 * 
 *     cdef TreeChain* chain = new TreeChain(tree, ischain, cache_size)
 *     handle_load(chain.Prepare(), True)             # <<<<<<<<<<<<<<
 * 
 *     cdef TObjArray* branch_array = tree.GetListOfBranches()
 */

#line 177 "root_numpy/src/tree.pyx"
  __pyx_t_5.__pyx_n = 1;

#line 177 "root_numpy/src/tree.pyx"
  __pyx_t_5.ignore_index = 1;

#line 177 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __pyx_f_13_librootnumpy_handle_load(__pyx_v_chain->Prepare(), &__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 177, __pyx_L1_error)

#line 177 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 177 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "root_numpy/src/tree.pyx":179
 *     handle_load(chain.Prepare(), True)
 * 
 *     cdef TObjArray* branch_array = tree.GetListOfBranches()             # <<<<<<<<<<<<<<
 *     cdef TObjArray* leaf_array
 *     cdef TBranch* tbranch
 */

#line 179 "root_numpy/src/tree.pyx"
  __pyx_v_branch_array = __pyx_v_tree->GetListOfBranches();

  /* "root_numpy/src/tree.pyx":194
 *     # Avoid calling FindBranch for each branch since that results in O(n^2)
 * 
 *     cdef TTreeFormula* selection_formula = NULL             # <<<<<<<<<<<<<<
 *     cdef TTreeFormula* formula = NULL
 *     cdef int instance
 */

#line 194 "root_numpy/src/tree.pyx"
  __pyx_v_selection_formula = NULL;

  /* "root_numpy/src/tree.pyx":195
 * 
 *     cdef TTreeFormula* selection_formula = NULL
 *     cdef TTreeFormula* formula = NULL             # <<<<<<<<<<<<<<
 *     cdef int instance
 *     cdef bool keep
 */

#line 195 "root_numpy/src/tree.pyx"
  __pyx_v_formula = NULL;

  /* "root_numpy/src/tree.pyx":199
 *     cdef bool keep
 * 
 *     cdef int ibranch, ileaf, branch_idx = 0             # <<<<<<<<<<<<<<
 *     cdef int num_branches = branch_array.GetEntries()
 *     cdef unsigned int icol, num_columns
 */

#line 199 "root_numpy/src/tree.pyx"
  __pyx_v_branch_idx = 0;

  /* "root_numpy/src/tree.pyx":200
 * 
 *     cdef int ibranch, ileaf, branch_idx = 0
 *     cdef int num_branches = branch_array.GetEntries()             # <<<<<<<<<<<<<<
 *     cdef unsigned int icol, num_columns
 * 
 */

#line 200 "root_numpy/src/tree.pyx"
  __pyx_v_num_branches = __pyx_v_branch_array->GetEntries();

  /* "root_numpy/src/tree.pyx":217
 *     cdef char type_code
 * 
 *     if num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *         columns.reserve(num_requested_branches)
 *         converters.reserve(num_requested_branches)
 */

#line 217 "root_numpy/src/tree.pyx"
  __pyx_t_3 = ((__pyx_v_num_requested_branches > 0) != 0);

#line 217 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/tree.pyx":218
 * 
 *     if num_requested_branches > 0:
 *         columns.reserve(num_requested_branches)             # <<<<<<<<<<<<<<
 *         converters.reserve(num_requested_branches)
 *         column_buckets.assign(num_requested_branches, vector['Column*']())
 */

#line 218 "root_numpy/src/tree.pyx"
    __pyx_v_columns.reserve(__pyx_v_num_requested_branches);

    /* "root_numpy/src/tree.pyx":219
 *     if num_requested_branches > 0:
 *         columns.reserve(num_requested_branches)
 *         converters.reserve(num_requested_branches)             # <<<<<<<<<<<<<<
 *         column_buckets.assign(num_requested_branches, vector['Column*']())
 *         converter_buckets.assign(num_requested_branches, vector['Converter*']())
 */

#line 219 "root_numpy/src/tree.pyx"
    __pyx_v_converters.reserve(__pyx_v_num_requested_branches);

    /* "root_numpy/src/tree.pyx":220
 *         columns.reserve(num_requested_branches)
 *         converters.reserve(num_requested_branches)
 *         column_buckets.assign(num_requested_branches, vector['Column*']())             # <<<<<<<<<<<<<<
 *         converter_buckets.assign(num_requested_branches, vector['Converter*']())
 *     else:
 */

#line 220 "root_numpy/src/tree.pyx"
    try {

#line 220 "root_numpy/src/tree.pyx"
      __pyx_t_6 = std::vector<Column *> ();

#line 220 "root_numpy/src/tree.pyx"
    } catch(...) {

#line 220 "root_numpy/src/tree.pyx"
      __Pyx_CppExn2PyErr();

#line 220 "root_numpy/src/tree.pyx"
      __PYX_ERR(2, 220, __pyx_L1_error)

#line 220 "root_numpy/src/tree.pyx"
    }

#line 220 "root_numpy/src/tree.pyx"
    __pyx_v_column_buckets.assign(__pyx_v_num_requested_branches, __pyx_t_6);

    /* "root_numpy/src/tree.pyx":221
 *         converters.reserve(num_requested_branches)
 *         column_buckets.assign(num_requested_branches, vector['Column*']())
 *         converter_buckets.assign(num_requested_branches, vector['Converter*']())             # <<<<<<<<<<<<<<
 *     else:
 *         columns.reserve(num_branches)
 */

#line 221 "root_numpy/src/tree.pyx"
    try {

#line 221 "root_numpy/src/tree.pyx"
      __pyx_t_7 = std::vector<__pyx_t_13_librootnumpy_Converter *> ();

#line 221 "root_numpy/src/tree.pyx"
    } catch(...) {

#line 221 "root_numpy/src/tree.pyx"
      __Pyx_CppExn2PyErr();

#line 221 "root_numpy/src/tree.pyx"
      __PYX_ERR(2, 221, __pyx_L1_error)

#line 221 "root_numpy/src/tree.pyx"
    }

#line 221 "root_numpy/src/tree.pyx"
    __pyx_v_converter_buckets.assign(__pyx_v_num_requested_branches, __pyx_t_7);

    /* "root_numpy/src/tree.pyx":217
 *     cdef char type_code
 * 
 *     if num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *         columns.reserve(num_requested_branches)
 *         converters.reserve(num_requested_branches)
 */

#line 217 "root_numpy/src/tree.pyx"
    goto __pyx_L6;

#line 217 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":223
 *         converter_buckets.assign(num_requested_branches, vector['Converter*']())
 *     else:
 *         columns.reserve(num_branches)             # <<<<<<<<<<<<<<
 *         converters.reserve(num_branches)
 * 
 */

#line 223 "root_numpy/src/tree.pyx"
  /*else*/ {

#line 223 "root_numpy/src/tree.pyx"
    __pyx_v_columns.reserve(__pyx_v_num_branches);

    /* "root_numpy/src/tree.pyx":224
 *     else:
 *         columns.reserve(num_branches)
 *         converters.reserve(num_branches)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */

#line 224 "root_numpy/src/tree.pyx"
    __pyx_v_converters.reserve(__pyx_v_num_branches);

#line 224 "root_numpy/src/tree.pyx"
  }

#line 224 "root_numpy/src/tree.pyx"
  __pyx_L6:;

  /* "root_numpy/src/tree.pyx":226
 *         converters.reserve(num_branches)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # Set up the selection if we have one
 *         if selection.size():
 */

#line 226 "root_numpy/src/tree.pyx"
  /*try:*/ {

    /* "root_numpy/src/tree.pyx":228
 *     try:
 *         # Set up the selection if we have one
 *         if selection.size():             # <<<<<<<<<<<<<<
 *             selection_formula = new TTreeFormula("selection", selection.c_str(), tree)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 */

#line 228 "root_numpy/src/tree.pyx"
    __pyx_t_3 = (__pyx_v_selection.size() != 0);

#line 228 "root_numpy/src/tree.pyx"
    if (__pyx_t_3) {

      /* "root_numpy/src/tree.pyx":229
 *         # Set up the selection if we have one
 *         if selection.size():
 *             selection_formula = new TTreeFormula("selection", selection.c_str(), tree)             # <<<<<<<<<<<<<<
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula
 */

#line 229 "root_numpy/src/tree.pyx"
      __pyx_v_selection_formula = new TTreeFormula(((const char *)"selection"), __pyx_v_selection.c_str(), __pyx_v_tree);

      /* "root_numpy/src/tree.pyx":230
 *         if selection.size():
 *             selection_formula = new TTreeFormula("selection", selection.c_str(), tree)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:             # <<<<<<<<<<<<<<
 *                 del selection_formula
 *                 raise ValueError(
 */

#line 230 "root_numpy/src/tree.pyx"
      __pyx_t_1 = ((__pyx_v_selection_formula == NULL) != 0);

#line 230 "root_numpy/src/tree.pyx"
      if (!__pyx_t_1) {

#line 230 "root_numpy/src/tree.pyx"
      } else {

#line 230 "root_numpy/src/tree.pyx"
        __pyx_t_3 = __pyx_t_1;

#line 230 "root_numpy/src/tree.pyx"
        goto __pyx_L12_bool_binop_done;

#line 230 "root_numpy/src/tree.pyx"
      }

#line 230 "root_numpy/src/tree.pyx"
      __pyx_t_1 = ((__pyx_v_selection_formula->GetNdim() == 0) != 0);

#line 230 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __pyx_t_1;

#line 230 "root_numpy/src/tree.pyx"
      __pyx_L12_bool_binop_done:;

#line 230 "root_numpy/src/tree.pyx"
      if (__pyx_t_3) {

        /* "root_numpy/src/tree.pyx":231
 *             selection_formula = new TTreeFormula("selection", selection.c_str(), tree)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "could not compile selection expression '{0}'".format(selection))
 */

#line 231 "root_numpy/src/tree.pyx"
        delete __pyx_v_selection_formula;

        /* "root_numpy/src/tree.pyx":233
 *                 del selection_formula
 *                 raise ValueError(
 *                     "could not compile selection expression '{0}'".format(selection))             # <<<<<<<<<<<<<<
 *             # The chain will take care of updating the formula leaves when
 *             # rolling over to the next tree.
 */

#line 233 "root_numpy/src/tree.pyx"
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_could_not_compile_selection_expr, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 233, __pyx_L8_error)

#line 233 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 233 "root_numpy/src/tree.pyx"
        __pyx_t_9 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_selection); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 233, __pyx_L8_error)

#line 233 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 233 "root_numpy/src/tree.pyx"
        __pyx_t_10 = NULL;

#line 233 "root_numpy/src/tree.pyx"
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {

#line 233 "root_numpy/src/tree.pyx"
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);

#line 233 "root_numpy/src/tree.pyx"
          if (likely(__pyx_t_10)) {

#line 233 "root_numpy/src/tree.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 233 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_10);

#line 233 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(function);

#line 233 "root_numpy/src/tree.pyx"
            __Pyx_DECREF_SET(__pyx_t_8, function);

#line 233 "root_numpy/src/tree.pyx"
          }

#line 233 "root_numpy/src/tree.pyx"
        }

#line 233 "root_numpy/src/tree.pyx"
        if (!__pyx_t_10) {

#line 233 "root_numpy/src/tree.pyx"
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 233, __pyx_L8_error)

#line 233 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 233 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 233 "root_numpy/src/tree.pyx"
        } else {

#line 233 "root_numpy/src/tree.pyx"
          __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 233, __pyx_L8_error)

#line 233 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_11);

#line 233 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;

#line 233 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_9);

#line 233 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_9);

#line 233 "root_numpy/src/tree.pyx"
          __pyx_t_9 = 0;

#line 233 "root_numpy/src/tree.pyx"
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 233, __pyx_L8_error)

#line 233 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 233 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 233 "root_numpy/src/tree.pyx"
        }

#line 233 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "root_numpy/src/tree.pyx":232
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "could not compile selection expression '{0}'".format(selection))
 *             # The chain will take care of updating the formula leaves when
 */

#line 232 "root_numpy/src/tree.pyx"
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 232, __pyx_L8_error)

#line 232 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 232 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_2);

#line 232 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);

#line 232 "root_numpy/src/tree.pyx"
        __pyx_t_2 = 0;

#line 232 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 232, __pyx_L8_error)

#line 232 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 232 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 232 "root_numpy/src/tree.pyx"
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 232 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 232 "root_numpy/src/tree.pyx"
        __PYX_ERR(2, 232, __pyx_L8_error)

        /* "root_numpy/src/tree.pyx":230
 *         if selection.size():
 *             selection_formula = new TTreeFormula("selection", selection.c_str(), tree)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:             # <<<<<<<<<<<<<<
 *                 del selection_formula
 *                 raise ValueError(
 */

#line 230 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":236
 *             # The chain will take care of updating the formula leaves when
 *             # rolling over to the next tree.
 *             chain.AddFormula(selection_formula)             # <<<<<<<<<<<<<<
 * 
 *         branch_dict = None
 */

#line 236 "root_numpy/src/tree.pyx"
      __pyx_v_chain->AddFormula(__pyx_v_selection_formula);

      /* "root_numpy/src/tree.pyx":228
 *     try:
 *         # Set up the selection if we have one
 *         if selection.size():             # <<<<<<<<<<<<<<
 *             selection_formula = new TTreeFormula("selection", selection.c_str(), tree)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 */

#line 228 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":238
 *             chain.AddFormula(selection_formula)
 * 
 *         branch_dict = None             # <<<<<<<<<<<<<<
 *         if num_requested_branches > 0:
 *             branch_dict = dict([(b, idx) for idx, b in enumerate(branches)])
 */

#line 238 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(Py_None);

#line 238 "root_numpy/src/tree.pyx"
    __pyx_v_branch_dict = Py_None;

    /* "root_numpy/src/tree.pyx":239
 * 
 *         branch_dict = None
 *         if num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *             branch_dict = dict([(b, idx) for idx, b in enumerate(branches)])
 *             if len(branch_dict) != num_requested_branches:
 */

#line 239 "root_numpy/src/tree.pyx"
    __pyx_t_3 = ((__pyx_v_num_requested_branches > 0) != 0);

#line 239 "root_numpy/src/tree.pyx"
    if (__pyx_t_3) {

      /* "root_numpy/src/tree.pyx":240
 *         branch_dict = None
 *         if num_requested_branches > 0:
 *             branch_dict = dict([(b, idx) for idx, b in enumerate(branches)])             # <<<<<<<<<<<<<<
 *             if len(branch_dict) != num_requested_branches:
 *                 raise ValueError("duplicate branches requested")
 */

#line 240 "root_numpy/src/tree.pyx"
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 240 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_int_0);

#line 240 "root_numpy/src/tree.pyx"
      __pyx_t_8 = __pyx_int_0;

#line 240 "root_numpy/src/tree.pyx"
      if (likely(PyList_CheckExact(__pyx_v_branches)) || PyTuple_CheckExact(__pyx_v_branches)) {

#line 240 "root_numpy/src/tree.pyx"
        __pyx_t_11 = __pyx_v_branches; __Pyx_INCREF(__pyx_t_11); __pyx_t_4 = 0;

#line 240 "root_numpy/src/tree.pyx"
        __pyx_t_12 = NULL;

#line 240 "root_numpy/src/tree.pyx"
      } else {
        __pyx_t_4 = -1; 
#line 240 "root_numpy/src/tree.pyx"
__pyx_t_11 = PyObject_GetIter(__pyx_v_branches); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_11);

#line 240 "root_numpy/src/tree.pyx"
        __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
      }

#line 240 "root_numpy/src/tree.pyx"
      for (;;) {

#line 240 "root_numpy/src/tree.pyx"
        if (likely(!__pyx_t_12)) {

#line 240 "root_numpy/src/tree.pyx"
          if (likely(PyList_CheckExact(__pyx_t_11))) {

#line 240 "root_numpy/src/tree.pyx"
            if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_11)) break;

#line 240 "root_numpy/src/tree.pyx"
            #if CYTHON_COMPILING_IN_CPYTHON

#line 240 "root_numpy/src/tree.pyx"
            __pyx_t_9 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_4); __Pyx_INCREF(__pyx_t_9); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
            #else

#line 240 "root_numpy/src/tree.pyx"
            __pyx_t_9 = PySequence_ITEM(__pyx_t_11, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 240 "root_numpy/src/tree.pyx"
            #endif

#line 240 "root_numpy/src/tree.pyx"
          } else {

#line 240 "root_numpy/src/tree.pyx"
            if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_11)) break;

#line 240 "root_numpy/src/tree.pyx"
            #if CYTHON_COMPILING_IN_CPYTHON

#line 240 "root_numpy/src/tree.pyx"
            __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_4); __Pyx_INCREF(__pyx_t_9); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
            #else

#line 240 "root_numpy/src/tree.pyx"
            __pyx_t_9 = PySequence_ITEM(__pyx_t_11, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 240 "root_numpy/src/tree.pyx"
            #endif

#line 240 "root_numpy/src/tree.pyx"
          }
        } else 
#line 240 "root_numpy/src/tree.pyx"
{

#line 240 "root_numpy/src/tree.pyx"
          __pyx_t_9 = __pyx_t_12(__pyx_t_11);

#line 240 "root_numpy/src/tree.pyx"
          if (unlikely(!__pyx_t_9)) {

#line 240 "root_numpy/src/tree.pyx"
            PyObject* exc_type = PyErr_Occurred();

#line 240 "root_numpy/src/tree.pyx"
            if (exc_type) {

#line 240 "root_numpy/src/tree.pyx"
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 240 "root_numpy/src/tree.pyx"
              else __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
            }

#line 240 "root_numpy/src/tree.pyx"
            break;

#line 240 "root_numpy/src/tree.pyx"
          }

#line 240 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 240 "root_numpy/src/tree.pyx"
        }

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_9);

#line 240 "root_numpy/src/tree.pyx"
        __pyx_t_9 = 0;

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_8);

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_8);

#line 240 "root_numpy/src/tree.pyx"
        __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_8, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8);

#line 240 "root_numpy/src/tree.pyx"
        __pyx_t_8 = __pyx_t_9;

#line 240 "root_numpy/src/tree.pyx"
        __pyx_t_9 = 0;

#line 240 "root_numpy/src/tree.pyx"
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_v_b);

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_v_b);

#line 240 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_b);

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_v_idx);

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_v_idx);

#line 240 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_idx);

#line 240 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_9))) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 240 "root_numpy/src/tree.pyx"
      }

#line 240 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 240 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 240 "root_numpy/src/tree.pyx"
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 240 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 240 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);

#line 240 "root_numpy/src/tree.pyx"
      __pyx_t_2 = 0;

#line 240 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyDict_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 240, __pyx_L8_error)

#line 240 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 240 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 240 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_v_branch_dict, __pyx_t_2);

#line 240 "root_numpy/src/tree.pyx"
      __pyx_t_2 = 0;

      /* "root_numpy/src/tree.pyx":241
 *         if num_requested_branches > 0:
 *             branch_dict = dict([(b, idx) for idx, b in enumerate(branches)])
 *             if len(branch_dict) != num_requested_branches:             # <<<<<<<<<<<<<<
 *                 raise ValueError("duplicate branches requested")
 * 
 */

#line 241 "root_numpy/src/tree.pyx"
      __pyx_t_4 = PyObject_Length(__pyx_v_branch_dict); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 241, __pyx_L8_error)

#line 241 "root_numpy/src/tree.pyx"
      __pyx_t_3 = ((__pyx_t_4 != __pyx_v_num_requested_branches) != 0);

#line 241 "root_numpy/src/tree.pyx"
      if (__pyx_t_3) {

        /* "root_numpy/src/tree.pyx":242
 *             branch_dict = dict([(b, idx) for idx, b in enumerate(branches)])
 *             if len(branch_dict) != num_requested_branches:
 *                 raise ValueError("duplicate branches requested")             # <<<<<<<<<<<<<<
 * 
 *         seen_branches = set()
 */

#line 242 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 242, __pyx_L8_error)

#line 242 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 242 "root_numpy/src/tree.pyx"
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 242 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 242 "root_numpy/src/tree.pyx"
        __PYX_ERR(2, 242, __pyx_L8_error)

        /* "root_numpy/src/tree.pyx":241
 *         if num_requested_branches > 0:
 *             branch_dict = dict([(b, idx) for idx, b in enumerate(branches)])
 *             if len(branch_dict) != num_requested_branches:             # <<<<<<<<<<<<<<
 *                 raise ValueError("duplicate branches requested")
 * 
 */

#line 241 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":239
 * 
 *         branch_dict = None
 *         if num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *             branch_dict = dict([(b, idx) for idx, b in enumerate(branches)])
 *             if len(branch_dict) != num_requested_branches:
 */

#line 239 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":244
 *                 raise ValueError("duplicate branches requested")
 * 
 *         seen_branches = set()             # <<<<<<<<<<<<<<
 * 
 *         # Build vector of Converters for branches
 */

#line 244 "root_numpy/src/tree.pyx"
    __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 244, __pyx_L8_error)

#line 244 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 244 "root_numpy/src/tree.pyx"
    __pyx_v_seen_branches = ((PyObject*)__pyx_t_2);

#line 244 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":247
 * 
 *         # Build vector of Converters for branches
 *         for ibranch in range(num_branches):             # <<<<<<<<<<<<<<
 *             tbranch = <TBranch*> branch_array.At(ibranch)
 *             branch_name = tbranch.GetName()
 */

#line 247 "root_numpy/src/tree.pyx"
    __pyx_t_13 = __pyx_v_num_branches;

#line 247 "root_numpy/src/tree.pyx"
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {

#line 247 "root_numpy/src/tree.pyx"
      __pyx_v_ibranch = __pyx_t_14;

      /* "root_numpy/src/tree.pyx":248
 *         # Build vector of Converters for branches
 *         for ibranch in range(num_branches):
 *             tbranch = <TBranch*> branch_array.At(ibranch)             # <<<<<<<<<<<<<<
 *             branch_name = tbranch.GetName()
 *             if num_requested_branches > 0:
 */

#line 248 "root_numpy/src/tree.pyx"
      __pyx_v_tbranch = ((TBranch *)__pyx_v_branch_array->At(__pyx_v_ibranch));

      /* "root_numpy/src/tree.pyx":249
 *         for ibranch in range(num_branches):
 *             tbranch = <TBranch*> branch_array.At(ibranch)
 *             branch_name = tbranch.GetName()             # <<<<<<<<<<<<<<
 *             if num_requested_branches > 0:
 *                 if len(branch_dict) == 0:
 */

#line 249 "root_numpy/src/tree.pyx"
      __pyx_v_branch_name = __pyx_v_tbranch->GetName();

      /* "root_numpy/src/tree.pyx":250
 *             tbranch = <TBranch*> branch_array.At(ibranch)
 *             branch_name = tbranch.GetName()
 *             if num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *                 if len(branch_dict) == 0:
 *                     # No more branches to consider
 */

#line 250 "root_numpy/src/tree.pyx"
      __pyx_t_3 = ((__pyx_v_num_requested_branches > 0) != 0);

#line 250 "root_numpy/src/tree.pyx"
      if (__pyx_t_3) {

        /* "root_numpy/src/tree.pyx":251
 *             branch_name = tbranch.GetName()
 *             if num_requested_branches > 0:
 *                 if len(branch_dict) == 0:             # <<<<<<<<<<<<<<
 *                     # No more branches to consider
 *                     break
 */

#line 251 "root_numpy/src/tree.pyx"
        __pyx_t_4 = PyObject_Length(__pyx_v_branch_dict); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 251, __pyx_L8_error)

#line 251 "root_numpy/src/tree.pyx"
        __pyx_t_3 = ((__pyx_t_4 == 0) != 0);

#line 251 "root_numpy/src/tree.pyx"
        if (__pyx_t_3) {

          /* "root_numpy/src/tree.pyx":253
 *                 if len(branch_dict) == 0:
 *                     # No more branches to consider
 *                     break             # <<<<<<<<<<<<<<
 *                 branch_idx = branch_dict.pop(branch_name, -1)
 *                 if branch_idx == -1:
 */

#line 253 "root_numpy/src/tree.pyx"
          goto __pyx_L19_break;

          /* "root_numpy/src/tree.pyx":251
 *             branch_name = tbranch.GetName()
 *             if num_requested_branches > 0:
 *                 if len(branch_dict) == 0:             # <<<<<<<<<<<<<<
 *                     # No more branches to consider
 *                     break
 */

#line 251 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":254
 *                     # No more branches to consider
 *                     break
 *                 branch_idx = branch_dict.pop(branch_name, -1)             # <<<<<<<<<<<<<<
 *                 if branch_idx == -1:
 *                     # This branch was not selected by the user
 */

#line 254 "root_numpy/src/tree.pyx"
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch_dict, __pyx_n_s_pop); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 254, __pyx_L8_error)

#line 254 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 254 "root_numpy/src/tree.pyx"
        __pyx_t_11 = __Pyx_PyStr_FromString(__pyx_v_branch_name); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 254, __pyx_L8_error)

#line 254 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_11);

#line 254 "root_numpy/src/tree.pyx"
        __pyx_t_9 = NULL;

#line 254 "root_numpy/src/tree.pyx"
        __pyx_t_4 = 0;

#line 254 "root_numpy/src/tree.pyx"
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {

#line 254 "root_numpy/src/tree.pyx"
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);

#line 254 "root_numpy/src/tree.pyx"
          if (likely(__pyx_t_9)) {

#line 254 "root_numpy/src/tree.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 254 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_9);

#line 254 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(function);

#line 254 "root_numpy/src/tree.pyx"
            __Pyx_DECREF_SET(__pyx_t_8, function);

#line 254 "root_numpy/src/tree.pyx"
            __pyx_t_4 = 1;

#line 254 "root_numpy/src/tree.pyx"
          }

#line 254 "root_numpy/src/tree.pyx"
        }

#line 254 "root_numpy/src/tree.pyx"
        __pyx_t_10 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 254, __pyx_L8_error)

#line 254 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 254 "root_numpy/src/tree.pyx"
        if (__pyx_t_9) {

#line 254 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;

#line 254 "root_numpy/src/tree.pyx"
        }

#line 254 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_11);

#line 254 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_4, __pyx_t_11);

#line 254 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_int_neg_1);

#line 254 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_int_neg_1);

#line 254 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_4, __pyx_int_neg_1);

#line 254 "root_numpy/src/tree.pyx"
        __pyx_t_11 = 0;

#line 254 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 254, __pyx_L8_error)

#line 254 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 254 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 254 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 254 "root_numpy/src/tree.pyx"
        __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 254, __pyx_L8_error)

#line 254 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 254 "root_numpy/src/tree.pyx"
        __pyx_v_branch_idx = __pyx_t_15;

        /* "root_numpy/src/tree.pyx":255
 *                     break
 *                 branch_idx = branch_dict.pop(branch_name, -1)
 *                 if branch_idx == -1:             # <<<<<<<<<<<<<<
 *                     # This branch was not selected by the user
 *                     continue
 */

#line 255 "root_numpy/src/tree.pyx"
        __pyx_t_3 = ((__pyx_v_branch_idx == -1L) != 0);

#line 255 "root_numpy/src/tree.pyx"
        if (__pyx_t_3) {

          /* "root_numpy/src/tree.pyx":257
 *                 if branch_idx == -1:
 *                     # This branch was not selected by the user
 *                     continue             # <<<<<<<<<<<<<<
 *             elif branch_name in seen_branches:
 *                 warnings.warn("ignoring duplicate branch named '{0}'".format(branch_name),
 */

#line 257 "root_numpy/src/tree.pyx"
          goto __pyx_L18_continue;

          /* "root_numpy/src/tree.pyx":255
 *                     break
 *                 branch_idx = branch_dict.pop(branch_name, -1)
 *                 if branch_idx == -1:             # <<<<<<<<<<<<<<
 *                     # This branch was not selected by the user
 *                     continue
 */

#line 255 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":250
 *             tbranch = <TBranch*> branch_array.At(ibranch)
 *             branch_name = tbranch.GetName()
 *             if num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *                 if len(branch_dict) == 0:
 *                     # No more branches to consider
 */

#line 250 "root_numpy/src/tree.pyx"
        goto __pyx_L20;

#line 250 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":258
 *                     # This branch was not selected by the user
 *                     continue
 *             elif branch_name in seen_branches:             # <<<<<<<<<<<<<<
 *                 warnings.warn("ignoring duplicate branch named '{0}'".format(branch_name),
 *                               RuntimeWarning)
 */

#line 258 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_branch_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 258, __pyx_L8_error)

#line 258 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 258 "root_numpy/src/tree.pyx"
      __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_v_seen_branches, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(2, 258, __pyx_L8_error)

#line 258 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 258 "root_numpy/src/tree.pyx"
      __pyx_t_1 = (__pyx_t_3 != 0);

#line 258 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":259
 *                     continue
 *             elif branch_name in seen_branches:
 *                 warnings.warn("ignoring duplicate branch named '{0}'".format(branch_name),             # <<<<<<<<<<<<<<
 *                               RuntimeWarning)
 *                 # Ignore duplicate branches
 */

#line 259 "root_numpy/src/tree.pyx"
        __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 259, __pyx_L8_error)

#line 259 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 259 "root_numpy/src/tree.pyx"
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_warn); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 259, __pyx_L8_error)

#line 259 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 259 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 259 "root_numpy/src/tree.pyx"
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_ignoring_duplicate_branch_named, __pyx_n_s_format); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 259, __pyx_L8_error)

#line 259 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_11);

#line 259 "root_numpy/src/tree.pyx"
        __pyx_t_9 = __Pyx_PyStr_FromString(__pyx_v_branch_name); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 259, __pyx_L8_error)

#line 259 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 259 "root_numpy/src/tree.pyx"
        __pyx_t_16 = NULL;

#line 259 "root_numpy/src/tree.pyx"
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {

#line 259 "root_numpy/src/tree.pyx"
          __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_11);

#line 259 "root_numpy/src/tree.pyx"
          if (likely(__pyx_t_16)) {

#line 259 "root_numpy/src/tree.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);

#line 259 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_16);

#line 259 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(function);

#line 259 "root_numpy/src/tree.pyx"
            __Pyx_DECREF_SET(__pyx_t_11, function);

#line 259 "root_numpy/src/tree.pyx"
          }

#line 259 "root_numpy/src/tree.pyx"
        }

#line 259 "root_numpy/src/tree.pyx"
        if (!__pyx_t_16) {

#line 259 "root_numpy/src/tree.pyx"
          __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 259, __pyx_L8_error)

#line 259 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 259 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 259 "root_numpy/src/tree.pyx"
        } else {

#line 259 "root_numpy/src/tree.pyx"
          __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(2, 259, __pyx_L8_error)

#line 259 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_17);

#line 259 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;

#line 259 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_9);

#line 259 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_t_9);

#line 259 "root_numpy/src/tree.pyx"
          __pyx_t_9 = 0;

#line 259 "root_numpy/src/tree.pyx"
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_17, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 259, __pyx_L8_error)

#line 259 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 259 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 259 "root_numpy/src/tree.pyx"
        }

#line 259 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "root_numpy/src/tree.pyx":260
 *             elif branch_name in seen_branches:
 *                 warnings.warn("ignoring duplicate branch named '{0}'".format(branch_name),
 *                               RuntimeWarning)             # <<<<<<<<<<<<<<
 *                 # Ignore duplicate branches
 *                 continue
 */

#line 260 "root_numpy/src/tree.pyx"
        __pyx_t_11 = NULL;

#line 260 "root_numpy/src/tree.pyx"
        __pyx_t_4 = 0;

#line 260 "root_numpy/src/tree.pyx"
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {

#line 260 "root_numpy/src/tree.pyx"
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);

#line 260 "root_numpy/src/tree.pyx"
          if (likely(__pyx_t_11)) {

#line 260 "root_numpy/src/tree.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);

#line 260 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_11);

#line 260 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(function);

#line 260 "root_numpy/src/tree.pyx"
            __Pyx_DECREF_SET(__pyx_t_10, function);

#line 260 "root_numpy/src/tree.pyx"
            __pyx_t_4 = 1;

#line 260 "root_numpy/src/tree.pyx"
          }

#line 260 "root_numpy/src/tree.pyx"
        }

#line 260 "root_numpy/src/tree.pyx"
        __pyx_t_17 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(2, 259, __pyx_L8_error)

#line 260 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_17);

#line 260 "root_numpy/src/tree.pyx"
        if (__pyx_t_11) {

#line 260 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_11); __pyx_t_11 = NULL;

#line 260 "root_numpy/src/tree.pyx"
        }

#line 260 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_8);

#line 260 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_4, __pyx_t_8);

#line 260 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_builtin_RuntimeWarning);

#line 260 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_builtin_RuntimeWarning);

#line 260 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_4, __pyx_builtin_RuntimeWarning);

#line 260 "root_numpy/src/tree.pyx"
        __pyx_t_8 = 0;

#line 260 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 259, __pyx_L8_error)

#line 260 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 260 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 260 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 260 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "root_numpy/src/tree.pyx":262
 *                               RuntimeWarning)
 *                 # Ignore duplicate branches
 *                 continue             # <<<<<<<<<<<<<<
 *             else:
 *                 seen_branches.add(branch_name)
 */

#line 262 "root_numpy/src/tree.pyx"
        goto __pyx_L18_continue;

        /* "root_numpy/src/tree.pyx":258
 *                     # This branch was not selected by the user
 *                     continue
 *             elif branch_name in seen_branches:             # <<<<<<<<<<<<<<
 *                 warnings.warn("ignoring duplicate branch named '{0}'".format(branch_name),
 *                               RuntimeWarning)
 */

#line 258 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":264
 *                 continue
 *             else:
 *                 seen_branches.add(branch_name)             # <<<<<<<<<<<<<<
 * 
 *             branch_title = string(tbranch.GetTitle())
 */

#line 264 "root_numpy/src/tree.pyx"
      /*else*/ {

#line 264 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_branch_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 264, __pyx_L8_error)

#line 264 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 264 "root_numpy/src/tree.pyx"
        __pyx_t_18 = PySet_Add(__pyx_v_seen_branches, __pyx_t_2); if (unlikely(__pyx_t_18 == -1)) __PYX_ERR(2, 264, __pyx_L8_error)

#line 264 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 264 "root_numpy/src/tree.pyx"
      }

#line 264 "root_numpy/src/tree.pyx"
      __pyx_L20:;

      /* "root_numpy/src/tree.pyx":266
 *                 seen_branches.add(branch_name)
 * 
 *             branch_title = string(tbranch.GetTitle())             # <<<<<<<<<<<<<<
 *             branch_title_size = branch_title.size()
 *             if branch_title_size > 2 and branch_title[branch_title_size - 2] == '/':
 */

#line 266 "root_numpy/src/tree.pyx"
      try {

#line 266 "root_numpy/src/tree.pyx"
        __pyx_t_19 = std::string(__pyx_v_tbranch->GetTitle());

#line 266 "root_numpy/src/tree.pyx"
      } catch(...) {

#line 266 "root_numpy/src/tree.pyx"
        __Pyx_CppExn2PyErr();

#line 266 "root_numpy/src/tree.pyx"
        __PYX_ERR(2, 266, __pyx_L8_error)

#line 266 "root_numpy/src/tree.pyx"
      }

#line 266 "root_numpy/src/tree.pyx"
      __pyx_v_branch_title = __pyx_t_19;

      /* "root_numpy/src/tree.pyx":267
 * 
 *             branch_title = string(tbranch.GetTitle())
 *             branch_title_size = branch_title.size()             # <<<<<<<<<<<<<<
 *             if branch_title_size > 2 and branch_title[branch_title_size - 2] == '/':
 *                 type_code = branch_title[branch_title_size - 1]
 */

#line 267 "root_numpy/src/tree.pyx"
      __pyx_v_branch_title_size = __pyx_v_branch_title.size();

      /* "root_numpy/src/tree.pyx":268
 *             branch_title = string(tbranch.GetTitle())
 *             branch_title_size = branch_title.size()
 *             if branch_title_size > 2 and branch_title[branch_title_size - 2] == '/':             # <<<<<<<<<<<<<<
 *                 type_code = branch_title[branch_title_size - 1]
 *             else:
 */

#line 268 "root_numpy/src/tree.pyx"
      __pyx_t_3 = ((__pyx_v_branch_title_size > 2) != 0);

#line 268 "root_numpy/src/tree.pyx"
      if (__pyx_t_3) {

#line 268 "root_numpy/src/tree.pyx"
      } else {

#line 268 "root_numpy/src/tree.pyx"
        __pyx_t_1 = __pyx_t_3;

#line 268 "root_numpy/src/tree.pyx"
        goto __pyx_L24_bool_binop_done;

#line 268 "root_numpy/src/tree.pyx"
      }

#line 268 "root_numpy/src/tree.pyx"
      __pyx_t_3 = (((__pyx_v_branch_title[(__pyx_v_branch_title_size - 2)]) == '/') != 0);

#line 268 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __pyx_t_3;

#line 268 "root_numpy/src/tree.pyx"
      __pyx_L24_bool_binop_done:;

#line 268 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":269
 *             branch_title_size = branch_title.size()
 *             if branch_title_size > 2 and branch_title[branch_title_size - 2] == '/':
 *                 type_code = branch_title[branch_title_size - 1]             # <<<<<<<<<<<<<<
 *             else:
 *                 type_code = '\0'
 */

#line 269 "root_numpy/src/tree.pyx"
        __pyx_v_type_code = (__pyx_v_branch_title[(__pyx_v_branch_title_size - 1)]);

        /* "root_numpy/src/tree.pyx":268
 *             branch_title = string(tbranch.GetTitle())
 *             branch_title_size = branch_title.size()
 *             if branch_title_size > 2 and branch_title[branch_title_size - 2] == '/':             # <<<<<<<<<<<<<<
 *                 type_code = branch_title[branch_title_size - 1]
 *             else:
 */

#line 268 "root_numpy/src/tree.pyx"
        goto __pyx_L23;

#line 268 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":271
 *                 type_code = branch_title[branch_title_size - 1]
 *             else:
 *                 type_code = '\0'             # <<<<<<<<<<<<<<
 *             leaf_array = tbranch.GetListOfLeaves()
 *             shortname = leaf_array.GetEntries() == 1
 */

#line 271 "root_numpy/src/tree.pyx"
      /*else*/ {

#line 271 "root_numpy/src/tree.pyx"
        __pyx_v_type_code = '\x00';

#line 271 "root_numpy/src/tree.pyx"
      }

#line 271 "root_numpy/src/tree.pyx"
      __pyx_L23:;

      /* "root_numpy/src/tree.pyx":272
 *             else:
 *                 type_code = '\0'
 *             leaf_array = tbranch.GetListOfLeaves()             # <<<<<<<<<<<<<<
 *             shortname = leaf_array.GetEntries() == 1
 * 
 */

#line 272 "root_numpy/src/tree.pyx"
      __pyx_v_leaf_array = __pyx_v_tbranch->GetListOfLeaves();

      /* "root_numpy/src/tree.pyx":273
 *                 type_code = '\0'
 *             leaf_array = tbranch.GetListOfLeaves()
 *             shortname = leaf_array.GetEntries() == 1             # <<<<<<<<<<<<<<
 * 
 *             for ileaf in range(leaf_array.GetEntries()):
 */

#line 273 "root_numpy/src/tree.pyx"
      __pyx_v_shortname = (__pyx_v_leaf_array->GetEntries() == 1);

      /* "root_numpy/src/tree.pyx":275
 *             shortname = leaf_array.GetEntries() == 1
 * 
 *             for ileaf in range(leaf_array.GetEntries()):             # <<<<<<<<<<<<<<
 *                 tleaf = <TLeaf*> leaf_array.At(ileaf)
 *                 leaf_name = tleaf.GetName()
 */

#line 275 "root_numpy/src/tree.pyx"
      __pyx_t_15 = __pyx_v_leaf_array->GetEntries();

#line 275 "root_numpy/src/tree.pyx"
      for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_15; __pyx_t_20+=1) {

#line 275 "root_numpy/src/tree.pyx"
        __pyx_v_ileaf = __pyx_t_20;

        /* "root_numpy/src/tree.pyx":276
 * 
 *             for ileaf in range(leaf_array.GetEntries()):
 *                 tleaf = <TLeaf*> leaf_array.At(ileaf)             # <<<<<<<<<<<<<<
 *                 leaf_name = tleaf.GetName()
 *                 conv = get_converter(tleaf, type_code)
 */

#line 276 "root_numpy/src/tree.pyx"
        __pyx_v_tleaf = ((TLeaf *)__pyx_v_leaf_array->At(__pyx_v_ileaf));

        /* "root_numpy/src/tree.pyx":277
 *             for ileaf in range(leaf_array.GetEntries()):
 *                 tleaf = <TLeaf*> leaf_array.At(ileaf)
 *                 leaf_name = tleaf.GetName()             # <<<<<<<<<<<<<<
 *                 conv = get_converter(tleaf, type_code)
 *                 if conv != NULL:
 */

#line 277 "root_numpy/src/tree.pyx"
        __pyx_v_leaf_name = __pyx_v_tleaf->GetName();

        /* "root_numpy/src/tree.pyx":278
 *                 tleaf = <TLeaf*> leaf_array.At(ileaf)
 *                 leaf_name = tleaf.GetName()
 *                 conv = get_converter(tleaf, type_code)             # <<<<<<<<<<<<<<
 *                 if conv != NULL:
 *                     # A converter exists for this leaf
 */

#line 278 "root_numpy/src/tree.pyx"
        __pyx_t_22.__pyx_n = 1;

#line 278 "root_numpy/src/tree.pyx"
        __pyx_t_22.type_code = __pyx_v_type_code;

#line 278 "root_numpy/src/tree.pyx"
        __pyx_t_21 = __pyx_f_13_librootnumpy_get_converter(__pyx_v_tleaf, &__pyx_t_22); 

#line 278 "root_numpy/src/tree.pyx"
        __pyx_v_conv = __pyx_t_21;

        /* "root_numpy/src/tree.pyx":279
 *                 leaf_name = tleaf.GetName()
 *                 conv = get_converter(tleaf, type_code)
 *                 if conv != NULL:             # <<<<<<<<<<<<<<
 *                     # A converter exists for this leaf
 *                     column_name = string(branch_name)
 */

#line 279 "root_numpy/src/tree.pyx"
        __pyx_t_1 = ((__pyx_v_conv != NULL) != 0);

#line 279 "root_numpy/src/tree.pyx"
        if (__pyx_t_1) {

          /* "root_numpy/src/tree.pyx":281
 *                 if conv != NULL:
 *                     # A converter exists for this leaf
 *                     column_name = string(branch_name)             # <<<<<<<<<<<<<<
 *                     if not shortname:
 *                         column_name.append(<string> '_')
 */

#line 281 "root_numpy/src/tree.pyx"
          try {

#line 281 "root_numpy/src/tree.pyx"
            __pyx_t_19 = std::string(__pyx_v_branch_name);

#line 281 "root_numpy/src/tree.pyx"
          } catch(...) {

#line 281 "root_numpy/src/tree.pyx"
            __Pyx_CppExn2PyErr();

#line 281 "root_numpy/src/tree.pyx"
            __PYX_ERR(2, 281, __pyx_L8_error)

#line 281 "root_numpy/src/tree.pyx"
          }

#line 281 "root_numpy/src/tree.pyx"
          __pyx_v_column_name = __pyx_t_19;

          /* "root_numpy/src/tree.pyx":282
 *                     # A converter exists for this leaf
 *                     column_name = string(branch_name)
 *                     if not shortname:             # <<<<<<<<<<<<<<
 *                         column_name.append(<string> '_')
 *                         column_name.append(leaf_name)
 */

#line 282 "root_numpy/src/tree.pyx"
          __pyx_t_1 = ((!(__pyx_v_shortname != 0)) != 0);

#line 282 "root_numpy/src/tree.pyx"
          if (__pyx_t_1) {

            /* "root_numpy/src/tree.pyx":283
 *                     column_name = string(branch_name)
 *                     if not shortname:
 *                         column_name.append(<string> '_')             # <<<<<<<<<<<<<<
 *                         column_name.append(leaf_name)
 *                     # Create a column for this branch/leaf pair
 */

#line 283 "root_numpy/src/tree.pyx"
            __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b__33); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 283, __pyx_L8_error)

#line 283 "root_numpy/src/tree.pyx"
            __pyx_v_column_name.append(((std::string)__pyx_t_19));

            /* "root_numpy/src/tree.pyx":284
 *                     if not shortname:
 *                         column_name.append(<string> '_')
 *                         column_name.append(leaf_name)             # <<<<<<<<<<<<<<
 *                     # Create a column for this branch/leaf pair
 *                     col = new BranchColumn(column_name, tleaf)
 */

#line 284 "root_numpy/src/tree.pyx"
            __pyx_v_column_name.append(__pyx_v_leaf_name);

            /* "root_numpy/src/tree.pyx":282
 *                     # A converter exists for this leaf
 *                     column_name = string(branch_name)
 *                     if not shortname:             # <<<<<<<<<<<<<<
 *                         column_name.append(<string> '_')
 *                         column_name.append(leaf_name)
 */

#line 282 "root_numpy/src/tree.pyx"
          }

          /* "root_numpy/src/tree.pyx":286
 *                         column_name.append(leaf_name)
 *                     # Create a column for this branch/leaf pair
 *                     col = new BranchColumn(column_name, tleaf)             # <<<<<<<<<<<<<<
 * 
 *                     if num_requested_branches > 0:
 */

#line 286 "root_numpy/src/tree.pyx"
          __pyx_v_col = new BranchColumn(__pyx_v_column_name, __pyx_v_tleaf);

          /* "root_numpy/src/tree.pyx":288
 *                     col = new BranchColumn(column_name, tleaf)
 * 
 *                     if num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *                         column_buckets[branch_idx].push_back(col)
 *                         converter_buckets[branch_idx].push_back(conv)
 */

#line 288 "root_numpy/src/tree.pyx"
          __pyx_t_1 = ((__pyx_v_num_requested_branches > 0) != 0);

#line 288 "root_numpy/src/tree.pyx"
          if (__pyx_t_1) {

            /* "root_numpy/src/tree.pyx":289
 * 
 *                     if num_requested_branches > 0:
 *                         column_buckets[branch_idx].push_back(col)             # <<<<<<<<<<<<<<
 *                         converter_buckets[branch_idx].push_back(conv)
 *                     else:
 */

#line 289 "root_numpy/src/tree.pyx"
            try {

#line 289 "root_numpy/src/tree.pyx"
              (__pyx_v_column_buckets[__pyx_v_branch_idx]).push_back(__pyx_v_col);

#line 289 "root_numpy/src/tree.pyx"
            } catch(...) {

#line 289 "root_numpy/src/tree.pyx"
              __Pyx_CppExn2PyErr();

#line 289 "root_numpy/src/tree.pyx"
              __PYX_ERR(2, 289, __pyx_L8_error)

#line 289 "root_numpy/src/tree.pyx"
            }

            /* "root_numpy/src/tree.pyx":290
 *                     if num_requested_branches > 0:
 *                         column_buckets[branch_idx].push_back(col)
 *                         converter_buckets[branch_idx].push_back(conv)             # <<<<<<<<<<<<<<
 *                     else:
 *                         columns.push_back(col)
 */

#line 290 "root_numpy/src/tree.pyx"
            try {

#line 290 "root_numpy/src/tree.pyx"
              (__pyx_v_converter_buckets[__pyx_v_branch_idx]).push_back(__pyx_v_conv);

#line 290 "root_numpy/src/tree.pyx"
            } catch(...) {

#line 290 "root_numpy/src/tree.pyx"
              __Pyx_CppExn2PyErr();

#line 290 "root_numpy/src/tree.pyx"
              __PYX_ERR(2, 290, __pyx_L8_error)

#line 290 "root_numpy/src/tree.pyx"
            }

            /* "root_numpy/src/tree.pyx":288
 *                     col = new BranchColumn(column_name, tleaf)
 * 
 *                     if num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *                         column_buckets[branch_idx].push_back(col)
 *                         converter_buckets[branch_idx].push_back(conv)
 */

#line 288 "root_numpy/src/tree.pyx"
            goto __pyx_L30;

#line 288 "root_numpy/src/tree.pyx"
          }

          /* "root_numpy/src/tree.pyx":292
 *                         converter_buckets[branch_idx].push_back(conv)
 *                     else:
 *                         columns.push_back(col)             # <<<<<<<<<<<<<<
 *                         converters.push_back(conv)
 * 
 */

#line 292 "root_numpy/src/tree.pyx"
          /*else*/ {

#line 292 "root_numpy/src/tree.pyx"
            try {

#line 292 "root_numpy/src/tree.pyx"
              __pyx_v_columns.push_back(__pyx_v_col);

#line 292 "root_numpy/src/tree.pyx"
            } catch(...) {

#line 292 "root_numpy/src/tree.pyx"
              __Pyx_CppExn2PyErr();

#line 292 "root_numpy/src/tree.pyx"
              __PYX_ERR(2, 292, __pyx_L8_error)

#line 292 "root_numpy/src/tree.pyx"
            }

            /* "root_numpy/src/tree.pyx":293
 *                     else:
 *                         columns.push_back(col)
 *                         converters.push_back(conv)             # <<<<<<<<<<<<<<
 * 
 *                     chain.AddColumn(string(branch_name), string(leaf_name),
 */

#line 293 "root_numpy/src/tree.pyx"
            try {

#line 293 "root_numpy/src/tree.pyx"
              __pyx_v_converters.push_back(__pyx_v_conv);

#line 293 "root_numpy/src/tree.pyx"
            } catch(...) {

#line 293 "root_numpy/src/tree.pyx"
              __Pyx_CppExn2PyErr();

#line 293 "root_numpy/src/tree.pyx"
              __PYX_ERR(2, 293, __pyx_L8_error)

#line 293 "root_numpy/src/tree.pyx"
            }

#line 293 "root_numpy/src/tree.pyx"
          }

#line 293 "root_numpy/src/tree.pyx"
          __pyx_L30:;

          /* "root_numpy/src/tree.pyx":295
 *                         converters.push_back(conv)
 * 
 *                     chain.AddColumn(string(branch_name), string(leaf_name),             # <<<<<<<<<<<<<<
 *                                     <BranchColumn*> col)
 * 
 */

#line 295 "root_numpy/src/tree.pyx"
          try {

#line 295 "root_numpy/src/tree.pyx"
            __pyx_t_19 = std::string(__pyx_v_branch_name);

#line 295 "root_numpy/src/tree.pyx"
          } catch(...) {

#line 295 "root_numpy/src/tree.pyx"
            __Pyx_CppExn2PyErr();

#line 295 "root_numpy/src/tree.pyx"
            __PYX_ERR(2, 295, __pyx_L8_error)

#line 295 "root_numpy/src/tree.pyx"
          }

#line 295 "root_numpy/src/tree.pyx"
          try {

#line 295 "root_numpy/src/tree.pyx"
            __pyx_t_23 = std::string(__pyx_v_leaf_name);

#line 295 "root_numpy/src/tree.pyx"
          } catch(...) {

#line 295 "root_numpy/src/tree.pyx"
            __Pyx_CppExn2PyErr();

#line 295 "root_numpy/src/tree.pyx"
            __PYX_ERR(2, 295, __pyx_L8_error)

#line 295 "root_numpy/src/tree.pyx"
          }

          /* "root_numpy/src/tree.pyx":296
 * 
 *                     chain.AddColumn(string(branch_name), string(leaf_name),
 *                                     <BranchColumn*> col)             # <<<<<<<<<<<<<<
 * 
 *                 elif num_requested_branches > 0:
 */

#line 296 "root_numpy/src/tree.pyx"
          __pyx_v_chain->AddColumn(__pyx_t_19, __pyx_t_23, ((BranchColumn *)__pyx_v_col));

          /* "root_numpy/src/tree.pyx":279
 *                 leaf_name = tleaf.GetName()
 *                 conv = get_converter(tleaf, type_code)
 *                 if conv != NULL:             # <<<<<<<<<<<<<<
 *                     # A converter exists for this leaf
 *                     column_name = string(branch_name)
 */

#line 279 "root_numpy/src/tree.pyx"
          goto __pyx_L28;

#line 279 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":298
 *                                     <BranchColumn*> col)
 * 
 *                 elif num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *                     # User explicitly requested this branch but there is no
 *                     # converter to handle it
 */

#line 298 "root_numpy/src/tree.pyx"
        __pyx_t_1 = ((__pyx_v_num_requested_branches > 0) != 0);

#line 298 "root_numpy/src/tree.pyx"
        if (__pyx_t_1) {

          /* "root_numpy/src/tree.pyx":303
 *                     raise TypeError(
 *                         "cannot convert leaf '{0}' of branch '{1}' "
 *                         "with type '{2}'".format(             # <<<<<<<<<<<<<<
 *                             branch_name, leaf_name,
 *                             resolve_type(tleaf.GetTypeName())))
 */

#line 303 "root_numpy/src/tree.pyx"
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_convert_leaf_0_of_branch, __pyx_n_s_format); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 303, __pyx_L8_error)

#line 303 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_10);

          /* "root_numpy/src/tree.pyx":304
 *                         "cannot convert leaf '{0}' of branch '{1}' "
 *                         "with type '{2}'".format(
 *                             branch_name, leaf_name,             # <<<<<<<<<<<<<<
 *                             resolve_type(tleaf.GetTypeName())))
 *                 else:
 */

#line 304 "root_numpy/src/tree.pyx"
          __pyx_t_17 = __Pyx_PyStr_FromString(__pyx_v_branch_name); if (unlikely(!__pyx_t_17)) __PYX_ERR(2, 304, __pyx_L8_error)

#line 304 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_17);

#line 304 "root_numpy/src/tree.pyx"
          __pyx_t_8 = __Pyx_PyStr_FromString(__pyx_v_leaf_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 304, __pyx_L8_error)

#line 304 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_8);

          /* "root_numpy/src/tree.pyx":305
 *                         "with type '{2}'".format(
 *                             branch_name, leaf_name,
 *                             resolve_type(tleaf.GetTypeName())))             # <<<<<<<<<<<<<<
 *                 else:
 *                     # Just warn that this branch cannot be converted
 */

#line 305 "root_numpy/src/tree.pyx"
          __pyx_t_11 = __pyx_f_13_librootnumpy_resolve_type(__pyx_v_tleaf->GetTypeName()); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 305, __pyx_L8_error)

#line 305 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_11);

#line 305 "root_numpy/src/tree.pyx"
          __pyx_t_9 = NULL;

#line 305 "root_numpy/src/tree.pyx"
          __pyx_t_4 = 0;

#line 305 "root_numpy/src/tree.pyx"
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {

#line 305 "root_numpy/src/tree.pyx"
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);

#line 305 "root_numpy/src/tree.pyx"
            if (likely(__pyx_t_9)) {

#line 305 "root_numpy/src/tree.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);

#line 305 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_t_9);

#line 305 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(function);

#line 305 "root_numpy/src/tree.pyx"
              __Pyx_DECREF_SET(__pyx_t_10, function);

#line 305 "root_numpy/src/tree.pyx"
              __pyx_t_4 = 1;

#line 305 "root_numpy/src/tree.pyx"
            }

#line 305 "root_numpy/src/tree.pyx"
          }

#line 305 "root_numpy/src/tree.pyx"
          __pyx_t_16 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 303, __pyx_L8_error)

#line 305 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_16);

#line 305 "root_numpy/src/tree.pyx"
          if (__pyx_t_9) {

#line 305 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_9); __pyx_t_9 = NULL;

#line 305 "root_numpy/src/tree.pyx"
          }

#line 305 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_17);

#line 305 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_4, __pyx_t_17);

#line 305 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_8);

#line 305 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_4, __pyx_t_8);

#line 305 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_11);

#line 305 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_16, 2+__pyx_t_4, __pyx_t_11);

#line 305 "root_numpy/src/tree.pyx"
          __pyx_t_17 = 0;

#line 305 "root_numpy/src/tree.pyx"
          __pyx_t_8 = 0;

#line 305 "root_numpy/src/tree.pyx"
          __pyx_t_11 = 0;

#line 305 "root_numpy/src/tree.pyx"
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 303, __pyx_L8_error)

#line 305 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 305 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 305 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "root_numpy/src/tree.pyx":301
 *                     # User explicitly requested this branch but there is no
 *                     # converter to handle it
 *                     raise TypeError(             # <<<<<<<<<<<<<<
 *                         "cannot convert leaf '{0}' of branch '{1}' "
 *                         "with type '{2}'".format(
 */

#line 301 "root_numpy/src/tree.pyx"
          __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 301, __pyx_L8_error)

#line 301 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 301 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_2);

#line 301 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);

#line 301 "root_numpy/src/tree.pyx"
          __pyx_t_2 = 0;

#line 301 "root_numpy/src/tree.pyx"
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 301, __pyx_L8_error)

#line 301 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 301 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 301 "root_numpy/src/tree.pyx"
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 301 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 301 "root_numpy/src/tree.pyx"
          __PYX_ERR(2, 301, __pyx_L8_error)

          /* "root_numpy/src/tree.pyx":298
 *                                     <BranchColumn*> col)
 * 
 *                 elif num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *                     # User explicitly requested this branch but there is no
 *                     # converter to handle it
 */

#line 298 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":308
 *                 else:
 *                     # Just warn that this branch cannot be converted
 *                     warnings.warn(             # <<<<<<<<<<<<<<
 *                         "cannot convert leaf '{0}' of branch '{1}' "
 *                         "with type '{2}' (skipping)".format(
 */

#line 308 "root_numpy/src/tree.pyx"
        /*else*/ {

#line 308 "root_numpy/src/tree.pyx"
          __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 308, __pyx_L8_error)

#line 308 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 308 "root_numpy/src/tree.pyx"
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_warn); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 308, __pyx_L8_error)

#line 308 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_16);

#line 308 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "root_numpy/src/tree.pyx":310
 *                     warnings.warn(
 *                         "cannot convert leaf '{0}' of branch '{1}' "
 *                         "with type '{2}' (skipping)".format(             # <<<<<<<<<<<<<<
 *                             branch_name, leaf_name,
 *                             resolve_type(tleaf.GetTypeName())),
 */

#line 310 "root_numpy/src/tree.pyx"
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_convert_leaf_0_of_branch_2, __pyx_n_s_format); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 310, __pyx_L8_error)

#line 310 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_11);

          /* "root_numpy/src/tree.pyx":311
 *                         "cannot convert leaf '{0}' of branch '{1}' "
 *                         "with type '{2}' (skipping)".format(
 *                             branch_name, leaf_name,             # <<<<<<<<<<<<<<
 *                             resolve_type(tleaf.GetTypeName())),
 *                         RootNumpyUnconvertibleWarning)
 */

#line 311 "root_numpy/src/tree.pyx"
          __pyx_t_8 = __Pyx_PyStr_FromString(__pyx_v_branch_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 311, __pyx_L8_error)

#line 311 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 311 "root_numpy/src/tree.pyx"
          __pyx_t_17 = __Pyx_PyStr_FromString(__pyx_v_leaf_name); if (unlikely(!__pyx_t_17)) __PYX_ERR(2, 311, __pyx_L8_error)

#line 311 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_17);

          /* "root_numpy/src/tree.pyx":312
 *                         "with type '{2}' (skipping)".format(
 *                             branch_name, leaf_name,
 *                             resolve_type(tleaf.GetTypeName())),             # <<<<<<<<<<<<<<
 *                         RootNumpyUnconvertibleWarning)
 * 
 */

#line 312 "root_numpy/src/tree.pyx"
          __pyx_t_9 = __pyx_f_13_librootnumpy_resolve_type(__pyx_v_tleaf->GetTypeName()); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 312, __pyx_L8_error)

#line 312 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 312 "root_numpy/src/tree.pyx"
          __pyx_t_24 = NULL;

#line 312 "root_numpy/src/tree.pyx"
          __pyx_t_4 = 0;

#line 312 "root_numpy/src/tree.pyx"
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {

#line 312 "root_numpy/src/tree.pyx"
            __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_11);

#line 312 "root_numpy/src/tree.pyx"
            if (likely(__pyx_t_24)) {

#line 312 "root_numpy/src/tree.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);

#line 312 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_t_24);

#line 312 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(function);

#line 312 "root_numpy/src/tree.pyx"
              __Pyx_DECREF_SET(__pyx_t_11, function);

#line 312 "root_numpy/src/tree.pyx"
              __pyx_t_4 = 1;

#line 312 "root_numpy/src/tree.pyx"
            }

#line 312 "root_numpy/src/tree.pyx"
          }

#line 312 "root_numpy/src/tree.pyx"
          __pyx_t_25 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_25)) __PYX_ERR(2, 310, __pyx_L8_error)

#line 312 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_25);

#line 312 "root_numpy/src/tree.pyx"
          if (__pyx_t_24) {

#line 312 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_24); PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_t_24); __pyx_t_24 = NULL;

#line 312 "root_numpy/src/tree.pyx"
          }

#line 312 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_8);

#line 312 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_25, 0+__pyx_t_4, __pyx_t_8);

#line 312 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_17);

#line 312 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_25, 1+__pyx_t_4, __pyx_t_17);

#line 312 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_9);

#line 312 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_25, 2+__pyx_t_4, __pyx_t_9);

#line 312 "root_numpy/src/tree.pyx"
          __pyx_t_8 = 0;

#line 312 "root_numpy/src/tree.pyx"
          __pyx_t_17 = 0;

#line 312 "root_numpy/src/tree.pyx"
          __pyx_t_9 = 0;

#line 312 "root_numpy/src/tree.pyx"
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_25, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 310, __pyx_L8_error)

#line 312 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 312 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

#line 312 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "root_numpy/src/tree.pyx":313
 *                             branch_name, leaf_name,
 *                             resolve_type(tleaf.GetTypeName())),
 *                         RootNumpyUnconvertibleWarning)             # <<<<<<<<<<<<<<
 * 
 *         if num_requested_branches > 0:
 */

#line 313 "root_numpy/src/tree.pyx"
          __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_RootNumpyUnconvertibleWarning); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 313, __pyx_L8_error)

#line 313 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_11);

#line 313 "root_numpy/src/tree.pyx"
          __pyx_t_25 = NULL;

#line 313 "root_numpy/src/tree.pyx"
          __pyx_t_4 = 0;

#line 313 "root_numpy/src/tree.pyx"
          if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_16))) {

#line 313 "root_numpy/src/tree.pyx"
            __pyx_t_25 = PyMethod_GET_SELF(__pyx_t_16);

#line 313 "root_numpy/src/tree.pyx"
            if (likely(__pyx_t_25)) {

#line 313 "root_numpy/src/tree.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);

#line 313 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_t_25);

#line 313 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(function);

#line 313 "root_numpy/src/tree.pyx"
              __Pyx_DECREF_SET(__pyx_t_16, function);

#line 313 "root_numpy/src/tree.pyx"
              __pyx_t_4 = 1;

#line 313 "root_numpy/src/tree.pyx"
            }

#line 313 "root_numpy/src/tree.pyx"
          }

#line 313 "root_numpy/src/tree.pyx"
          __pyx_t_9 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 308, __pyx_L8_error)

#line 313 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 313 "root_numpy/src/tree.pyx"
          if (__pyx_t_25) {

#line 313 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_25); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_25); __pyx_t_25 = NULL;

#line 313 "root_numpy/src/tree.pyx"
          }

#line 313 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_10);

#line 313 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_4, __pyx_t_10);

#line 313 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_11);

#line 313 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_4, __pyx_t_11);

#line 313 "root_numpy/src/tree.pyx"
          __pyx_t_10 = 0;

#line 313 "root_numpy/src/tree.pyx"
          __pyx_t_11 = 0;

#line 313 "root_numpy/src/tree.pyx"
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 308, __pyx_L8_error)

#line 313 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 313 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 313 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 313 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 313 "root_numpy/src/tree.pyx"
        }

#line 313 "root_numpy/src/tree.pyx"
        __pyx_L28:;

#line 313 "root_numpy/src/tree.pyx"
      }

#line 313 "root_numpy/src/tree.pyx"
      __pyx_L18_continue:;

#line 313 "root_numpy/src/tree.pyx"
    }

#line 313 "root_numpy/src/tree.pyx"
    __pyx_L19_break:;

    /* "root_numpy/src/tree.pyx":315
 *                         RootNumpyUnconvertibleWarning)
 * 
 *         if num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *             # Attempt to interpret remaining "branches" as expressions
 *             for expression in branch_dict.keys():
 */

#line 315 "root_numpy/src/tree.pyx"
    __pyx_t_1 = ((__pyx_v_num_requested_branches > 0) != 0);

#line 315 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":317
 *         if num_requested_branches > 0:
 *             # Attempt to interpret remaining "branches" as expressions
 *             for expression in branch_dict.keys():             # <<<<<<<<<<<<<<
 *                 branch_idx = branch_dict[expression]
 *                 c_string = expression
 */

#line 317 "root_numpy/src/tree.pyx"
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch_dict, __pyx_n_s_keys); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 317, __pyx_L8_error)

#line 317 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 317 "root_numpy/src/tree.pyx"
      __pyx_t_9 = NULL;

#line 317 "root_numpy/src/tree.pyx"
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_16))) {

#line 317 "root_numpy/src/tree.pyx"
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_16);

#line 317 "root_numpy/src/tree.pyx"
        if (likely(__pyx_t_9)) {

#line 317 "root_numpy/src/tree.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);

#line 317 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(__pyx_t_9);

#line 317 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(function);

#line 317 "root_numpy/src/tree.pyx"
          __Pyx_DECREF_SET(__pyx_t_16, function);

#line 317 "root_numpy/src/tree.pyx"
        }

#line 317 "root_numpy/src/tree.pyx"
      }

#line 317 "root_numpy/src/tree.pyx"
      if (__pyx_t_9) {

#line 317 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 317, __pyx_L8_error)

#line 317 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 317 "root_numpy/src/tree.pyx"
      } else {

#line 317 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_16); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 317, __pyx_L8_error)

#line 317 "root_numpy/src/tree.pyx"
      }

#line 317 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 317 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 317 "root_numpy/src/tree.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {

#line 317 "root_numpy/src/tree.pyx"
        __pyx_t_16 = __pyx_t_2; __Pyx_INCREF(__pyx_t_16); __pyx_t_4 = 0;

#line 317 "root_numpy/src/tree.pyx"
        __pyx_t_12 = NULL;

#line 317 "root_numpy/src/tree.pyx"
      } else {
        __pyx_t_4 = -1; 
#line 317 "root_numpy/src/tree.pyx"
__pyx_t_16 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 317, __pyx_L8_error)

#line 317 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_16);

#line 317 "root_numpy/src/tree.pyx"
        __pyx_t_12 = Py_TYPE(__pyx_t_16)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 317, __pyx_L8_error)

#line 317 "root_numpy/src/tree.pyx"
      }

#line 317 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 317 "root_numpy/src/tree.pyx"
      for (;;) {

#line 317 "root_numpy/src/tree.pyx"
        if (likely(!__pyx_t_12)) {

#line 317 "root_numpy/src/tree.pyx"
          if (likely(PyList_CheckExact(__pyx_t_16))) {

#line 317 "root_numpy/src/tree.pyx"
            if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_16)) break;

#line 317 "root_numpy/src/tree.pyx"
            #if CYTHON_COMPILING_IN_CPYTHON

#line 317 "root_numpy/src/tree.pyx"
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 317, __pyx_L8_error)

#line 317 "root_numpy/src/tree.pyx"
            #else

#line 317 "root_numpy/src/tree.pyx"
            __pyx_t_2 = PySequence_ITEM(__pyx_t_16, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 317, __pyx_L8_error)

#line 317 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 317 "root_numpy/src/tree.pyx"
            #endif

#line 317 "root_numpy/src/tree.pyx"
          } else {

#line 317 "root_numpy/src/tree.pyx"
            if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_16)) break;

#line 317 "root_numpy/src/tree.pyx"
            #if CYTHON_COMPILING_IN_CPYTHON

#line 317 "root_numpy/src/tree.pyx"
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 317, __pyx_L8_error)

#line 317 "root_numpy/src/tree.pyx"
            #else

#line 317 "root_numpy/src/tree.pyx"
            __pyx_t_2 = PySequence_ITEM(__pyx_t_16, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 317, __pyx_L8_error)

#line 317 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 317 "root_numpy/src/tree.pyx"
            #endif

#line 317 "root_numpy/src/tree.pyx"
          }
        } else 
#line 317 "root_numpy/src/tree.pyx"
{

#line 317 "root_numpy/src/tree.pyx"
          __pyx_t_2 = __pyx_t_12(__pyx_t_16);

#line 317 "root_numpy/src/tree.pyx"
          if (unlikely(!__pyx_t_2)) {

#line 317 "root_numpy/src/tree.pyx"
            PyObject* exc_type = PyErr_Occurred();

#line 317 "root_numpy/src/tree.pyx"
            if (exc_type) {

#line 317 "root_numpy/src/tree.pyx"
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 317 "root_numpy/src/tree.pyx"
              else __PYX_ERR(2, 317, __pyx_L8_error)

#line 317 "root_numpy/src/tree.pyx"
            }

#line 317 "root_numpy/src/tree.pyx"
            break;

#line 317 "root_numpy/src/tree.pyx"
          }

#line 317 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 317 "root_numpy/src/tree.pyx"
        }

#line 317 "root_numpy/src/tree.pyx"
        __Pyx_XDECREF_SET(__pyx_v_expression, __pyx_t_2);

#line 317 "root_numpy/src/tree.pyx"
        __pyx_t_2 = 0;

        /* "root_numpy/src/tree.pyx":318
 *             # Attempt to interpret remaining "branches" as expressions
 *             for expression in branch_dict.keys():
 *                 branch_idx = branch_dict[expression]             # <<<<<<<<<<<<<<
 *                 c_string = expression
 *                 formula = new TTreeFormula(c_string, c_string, tree)
 */

#line 318 "root_numpy/src/tree.pyx"
        __pyx_t_2 = PyObject_GetItem(__pyx_v_branch_dict, __pyx_v_expression); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 318, __pyx_L8_error)

#line 318 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 318 "root_numpy/src/tree.pyx"
        __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 318, __pyx_L8_error)

#line 318 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 318 "root_numpy/src/tree.pyx"
        __pyx_v_branch_idx = __pyx_t_13;

        /* "root_numpy/src/tree.pyx":319
 *             for expression in branch_dict.keys():
 *                 branch_idx = branch_dict[expression]
 *                 c_string = expression             # <<<<<<<<<<<<<<
 *                 formula = new TTreeFormula(c_string, c_string, tree)
 *                 if formula == NULL or formula.GetNdim() == 0:
 */

#line 319 "root_numpy/src/tree.pyx"
        __pyx_t_26 = __Pyx_PyObject_AsString(__pyx_v_expression); if (unlikely((!__pyx_t_26) && PyErr_Occurred())) __PYX_ERR(2, 319, __pyx_L8_error)

#line 319 "root_numpy/src/tree.pyx"
        __pyx_v_c_string = __pyx_t_26;

        /* "root_numpy/src/tree.pyx":320
 *                 branch_idx = branch_dict[expression]
 *                 c_string = expression
 *                 formula = new TTreeFormula(c_string, c_string, tree)             # <<<<<<<<<<<<<<
 *                 if formula == NULL or formula.GetNdim() == 0:
 *                     del formula
 */

#line 320 "root_numpy/src/tree.pyx"
        __pyx_v_formula = new TTreeFormula(__pyx_v_c_string, __pyx_v_c_string, __pyx_v_tree);

        /* "root_numpy/src/tree.pyx":321
 *                 c_string = expression
 *                 formula = new TTreeFormula(c_string, c_string, tree)
 *                 if formula == NULL or formula.GetNdim() == 0:             # <<<<<<<<<<<<<<
 *                     del formula
 *                     raise ValueError(
 */

#line 321 "root_numpy/src/tree.pyx"
        __pyx_t_3 = ((__pyx_v_formula == NULL) != 0);

#line 321 "root_numpy/src/tree.pyx"
        if (!__pyx_t_3) {

#line 321 "root_numpy/src/tree.pyx"
        } else {

#line 321 "root_numpy/src/tree.pyx"
          __pyx_t_1 = __pyx_t_3;

#line 321 "root_numpy/src/tree.pyx"
          goto __pyx_L35_bool_binop_done;

#line 321 "root_numpy/src/tree.pyx"
        }

#line 321 "root_numpy/src/tree.pyx"
        __pyx_t_3 = ((__pyx_v_formula->GetNdim() == 0) != 0);

#line 321 "root_numpy/src/tree.pyx"
        __pyx_t_1 = __pyx_t_3;

#line 321 "root_numpy/src/tree.pyx"
        __pyx_L35_bool_binop_done:;

#line 321 "root_numpy/src/tree.pyx"
        if (__pyx_t_1) {

          /* "root_numpy/src/tree.pyx":322
 *                 formula = new TTreeFormula(c_string, c_string, tree)
 *                 if formula == NULL or formula.GetNdim() == 0:
 *                     del formula             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "the branch or expression '{0}' "
 */

#line 322 "root_numpy/src/tree.pyx"
          delete __pyx_v_formula;

          /* "root_numpy/src/tree.pyx":325
 *                     raise ValueError(
 *                         "the branch or expression '{0}' "
 *                         "is not present or valid".format(expression))             # <<<<<<<<<<<<<<
 *                 # The chain will take care of updating the formula leaves when
 *                 # rolling over to the next tree.
 */

#line 325 "root_numpy/src/tree.pyx"
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_the_branch_or_expression_0_is_no, __pyx_n_s_format); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 325, __pyx_L8_error)

#line 325 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 325 "root_numpy/src/tree.pyx"
          __pyx_t_11 = NULL;

#line 325 "root_numpy/src/tree.pyx"
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_9))) {

#line 325 "root_numpy/src/tree.pyx"
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);

#line 325 "root_numpy/src/tree.pyx"
            if (likely(__pyx_t_11)) {

#line 325 "root_numpy/src/tree.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);

#line 325 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_t_11);

#line 325 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(function);

#line 325 "root_numpy/src/tree.pyx"
              __Pyx_DECREF_SET(__pyx_t_9, function);

#line 325 "root_numpy/src/tree.pyx"
            }

#line 325 "root_numpy/src/tree.pyx"
          }

#line 325 "root_numpy/src/tree.pyx"
          if (!__pyx_t_11) {

#line 325 "root_numpy/src/tree.pyx"
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_expression); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 325, __pyx_L8_error)

#line 325 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 325 "root_numpy/src/tree.pyx"
          } else {

#line 325 "root_numpy/src/tree.pyx"
            __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 325, __pyx_L8_error)

#line 325 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_10);

#line 325 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __pyx_t_11 = NULL;

#line 325 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_v_expression);

#line 325 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_v_expression);

#line 325 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_expression);

#line 325 "root_numpy/src/tree.pyx"
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 325, __pyx_L8_error)

#line 325 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_2);

#line 325 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 325 "root_numpy/src/tree.pyx"
          }

#line 325 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "root_numpy/src/tree.pyx":323
 *                 if formula == NULL or formula.GetNdim() == 0:
 *                     del formula
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "the branch or expression '{0}' "
 *                         "is not present or valid".format(expression))
 */

#line 323 "root_numpy/src/tree.pyx"
          __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 323, __pyx_L8_error)

#line 323 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 323 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_2);

#line 323 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);

#line 323 "root_numpy/src/tree.pyx"
          __pyx_t_2 = 0;

#line 323 "root_numpy/src/tree.pyx"
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 323, __pyx_L8_error)

#line 323 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 323 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 323 "root_numpy/src/tree.pyx"
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 323 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 323 "root_numpy/src/tree.pyx"
          __PYX_ERR(2, 323, __pyx_L8_error)

          /* "root_numpy/src/tree.pyx":321
 *                 c_string = expression
 *                 formula = new TTreeFormula(c_string, c_string, tree)
 *                 if formula == NULL or formula.GetNdim() == 0:             # <<<<<<<<<<<<<<
 *                     del formula
 *                     raise ValueError(
 */

#line 321 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":328
 *                 # The chain will take care of updating the formula leaves when
 *                 # rolling over to the next tree.
 *                 chain.AddFormula(formula)             # <<<<<<<<<<<<<<
 *                 if formula.GetMultiplicity() > 0:
 *                     col = new MultiFormulaColumn(expression, formula)
 */

#line 328 "root_numpy/src/tree.pyx"
        __pyx_v_chain->AddFormula(__pyx_v_formula);

        /* "root_numpy/src/tree.pyx":329
 *                 # rolling over to the next tree.
 *                 chain.AddFormula(formula)
 *                 if formula.GetMultiplicity() > 0:             # <<<<<<<<<<<<<<
 *                     col = new MultiFormulaColumn(expression, formula)
 *                     conv = get_array_converter('double', '[]')
 */

#line 329 "root_numpy/src/tree.pyx"
        __pyx_t_1 = ((__pyx_v_formula->GetMultiplicity() > 0) != 0);

#line 329 "root_numpy/src/tree.pyx"
        if (__pyx_t_1) {

          /* "root_numpy/src/tree.pyx":330
 *                 chain.AddFormula(formula)
 *                 if formula.GetMultiplicity() > 0:
 *                     col = new MultiFormulaColumn(expression, formula)             # <<<<<<<<<<<<<<
 *                     conv = get_array_converter('double', '[]')
 *                 else:
 */

#line 330 "root_numpy/src/tree.pyx"
          __pyx_t_23 = __pyx_convert_string_from_py_std__in_string(__pyx_v_expression); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 330, __pyx_L8_error)

#line 330 "root_numpy/src/tree.pyx"
          __pyx_v_col = new MultiFormulaColumn(__pyx_t_23, __pyx_v_formula);

          /* "root_numpy/src/tree.pyx":331
 *                 if formula.GetMultiplicity() > 0:
 *                     col = new MultiFormulaColumn(expression, formula)
 *                     conv = get_array_converter('double', '[]')             # <<<<<<<<<<<<<<
 *                 else:
 *                     col = new FormulaColumn(expression, formula)
 */

#line 331 "root_numpy/src/tree.pyx"
          __pyx_t_23 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_double); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 331, __pyx_L8_error)

#line 331 "root_numpy/src/tree.pyx"
          __pyx_v_conv = __pyx_f_13_librootnumpy_get_array_converter(__pyx_t_23, __pyx_kp_s__5);

          /* "root_numpy/src/tree.pyx":329
 *                 # rolling over to the next tree.
 *                 chain.AddFormula(formula)
 *                 if formula.GetMultiplicity() > 0:             # <<<<<<<<<<<<<<
 *                     col = new MultiFormulaColumn(expression, formula)
 *                     conv = get_array_converter('double', '[]')
 */

#line 329 "root_numpy/src/tree.pyx"
          goto __pyx_L37;

#line 329 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":333
 *                     conv = get_array_converter('double', '[]')
 *                 else:
 *                     col = new FormulaColumn(expression, formula)             # <<<<<<<<<<<<<<
 *                     conv = find_converter_by_typename('double')
 *                 if conv == NULL:
 */

#line 333 "root_numpy/src/tree.pyx"
        /*else*/ {

#line 333 "root_numpy/src/tree.pyx"
          __pyx_t_23 = __pyx_convert_string_from_py_std__in_string(__pyx_v_expression); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 333, __pyx_L8_error)

#line 333 "root_numpy/src/tree.pyx"
          __pyx_v_col = new FormulaColumn(__pyx_t_23, __pyx_v_formula);

          /* "root_numpy/src/tree.pyx":334
 *                 else:
 *                     col = new FormulaColumn(expression, formula)
 *                     conv = find_converter_by_typename('double')             # <<<<<<<<<<<<<<
 *                 if conv == NULL:
 *                     # Oops, this should never happen
 */

#line 334 "root_numpy/src/tree.pyx"
          __pyx_t_23 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_double); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 334, __pyx_L8_error)

#line 334 "root_numpy/src/tree.pyx"
          __pyx_v_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_t_23);

#line 334 "root_numpy/src/tree.pyx"
        }

#line 334 "root_numpy/src/tree.pyx"
        __pyx_L37:;

        /* "root_numpy/src/tree.pyx":335
 *                     col = new FormulaColumn(expression, formula)
 *                     conv = find_converter_by_typename('double')
 *                 if conv == NULL:             # <<<<<<<<<<<<<<
 *                     # Oops, this should never happen
 *                     raise AssertionError(
 */

#line 335 "root_numpy/src/tree.pyx"
        __pyx_t_1 = ((__pyx_v_conv == NULL) != 0);

#line 335 "root_numpy/src/tree.pyx"
        if (__pyx_t_1) {

          /* "root_numpy/src/tree.pyx":337
 *                 if conv == NULL:
 *                     # Oops, this should never happen
 *                     raise AssertionError(             # <<<<<<<<<<<<<<
 *                         "could not find formula converter")
 *                 column_buckets[branch_idx].push_back(col)
 */

#line 337 "root_numpy/src/tree.pyx"
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_AssertionError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 337, __pyx_L8_error)

#line 337 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 337 "root_numpy/src/tree.pyx"
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 337 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 337 "root_numpy/src/tree.pyx"
          __PYX_ERR(2, 337, __pyx_L8_error)

          /* "root_numpy/src/tree.pyx":335
 *                     col = new FormulaColumn(expression, formula)
 *                     conv = find_converter_by_typename('double')
 *                 if conv == NULL:             # <<<<<<<<<<<<<<
 *                     # Oops, this should never happen
 *                     raise AssertionError(
 */

#line 335 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":339
 *                     raise AssertionError(
 *                         "could not find formula converter")
 *                 column_buckets[branch_idx].push_back(col)             # <<<<<<<<<<<<<<
 *                 converter_buckets[branch_idx].push_back(conv)
 * 
 */

#line 339 "root_numpy/src/tree.pyx"
        try {

#line 339 "root_numpy/src/tree.pyx"
          (__pyx_v_column_buckets[__pyx_v_branch_idx]).push_back(__pyx_v_col);

#line 339 "root_numpy/src/tree.pyx"
        } catch(...) {

#line 339 "root_numpy/src/tree.pyx"
          __Pyx_CppExn2PyErr();

#line 339 "root_numpy/src/tree.pyx"
          __PYX_ERR(2, 339, __pyx_L8_error)

#line 339 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":340
 *                         "could not find formula converter")
 *                 column_buckets[branch_idx].push_back(col)
 *                 converter_buckets[branch_idx].push_back(conv)             # <<<<<<<<<<<<<<
 * 
 *             # Flatten buckets into 1D vectors, thus preserving branch order
 */

#line 340 "root_numpy/src/tree.pyx"
        try {

#line 340 "root_numpy/src/tree.pyx"
          (__pyx_v_converter_buckets[__pyx_v_branch_idx]).push_back(__pyx_v_conv);

#line 340 "root_numpy/src/tree.pyx"
        } catch(...) {

#line 340 "root_numpy/src/tree.pyx"
          __Pyx_CppExn2PyErr();

#line 340 "root_numpy/src/tree.pyx"
          __PYX_ERR(2, 340, __pyx_L8_error)

#line 340 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":317
 *         if num_requested_branches > 0:
 *             # Attempt to interpret remaining "branches" as expressions
 *             for expression in branch_dict.keys():             # <<<<<<<<<<<<<<
 *                 branch_idx = branch_dict[expression]
 *                 c_string = expression
 */

#line 317 "root_numpy/src/tree.pyx"
      }

#line 317 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "root_numpy/src/tree.pyx":343
 * 
 *             # Flatten buckets into 1D vectors, thus preserving branch order
 *             for branch_idx in range(num_requested_branches):             # <<<<<<<<<<<<<<
 *                 columns.insert(columns.end(),
 *                                column_buckets[branch_idx].begin(),
 */

#line 343 "root_numpy/src/tree.pyx"
      __pyx_t_13 = __pyx_v_num_requested_branches;

#line 343 "root_numpy/src/tree.pyx"
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {

#line 343 "root_numpy/src/tree.pyx"
        __pyx_v_branch_idx = __pyx_t_14;

        /* "root_numpy/src/tree.pyx":344
 *             # Flatten buckets into 1D vectors, thus preserving branch order
 *             for branch_idx in range(num_requested_branches):
 *                 columns.insert(columns.end(),             # <<<<<<<<<<<<<<
 *                                column_buckets[branch_idx].begin(),
 *                                column_buckets[branch_idx].end())
 */

#line 344 "root_numpy/src/tree.pyx"
        try {

#line 344 "root_numpy/src/tree.pyx"
          __pyx_v_columns.insert(__pyx_v_columns.end(), (__pyx_v_column_buckets[__pyx_v_branch_idx]).begin(), (__pyx_v_column_buckets[__pyx_v_branch_idx]).end());

#line 344 "root_numpy/src/tree.pyx"
        } catch(...) {

#line 344 "root_numpy/src/tree.pyx"
          __Pyx_CppExn2PyErr();

#line 344 "root_numpy/src/tree.pyx"
          __PYX_ERR(2, 344, __pyx_L8_error)

#line 344 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":347
 *                                column_buckets[branch_idx].begin(),
 *                                column_buckets[branch_idx].end())
 *                 converters.insert(converters.end(),             # <<<<<<<<<<<<<<
 *                                   converter_buckets[branch_idx].begin(),
 *                                   converter_buckets[branch_idx].end())
 */

#line 347 "root_numpy/src/tree.pyx"
        try {

#line 347 "root_numpy/src/tree.pyx"
          __pyx_v_converters.insert(__pyx_v_converters.end(), (__pyx_v_converter_buckets[__pyx_v_branch_idx]).begin(), (__pyx_v_converter_buckets[__pyx_v_branch_idx]).end());

#line 347 "root_numpy/src/tree.pyx"
        } catch(...) {

#line 347 "root_numpy/src/tree.pyx"
          __Pyx_CppExn2PyErr();

#line 347 "root_numpy/src/tree.pyx"
          __PYX_ERR(2, 347, __pyx_L8_error)

#line 347 "root_numpy/src/tree.pyx"
        }

#line 347 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":315
 *                         RootNumpyUnconvertibleWarning)
 * 
 *         if num_requested_branches > 0:             # <<<<<<<<<<<<<<
 *             # Attempt to interpret remaining "branches" as expressions
 *             for expression in branch_dict.keys():
 */

#line 315 "root_numpy/src/tree.pyx"
      goto __pyx_L31;

#line 315 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":351
 *                                   converter_buckets[branch_idx].end())
 * 
 *         elif columns.size() == 0:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("unable to convert any branches in this tree")
 * 
 */

#line 351 "root_numpy/src/tree.pyx"
    __pyx_t_1 = ((__pyx_v_columns.size() == 0) != 0);

#line 351 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":352
 * 
 *         elif columns.size() == 0:
 *             raise RuntimeError("unable to convert any branches in this tree")             # <<<<<<<<<<<<<<
 * 
 *         # Activate branches used by formulae and columns
 */

#line 352 "root_numpy/src/tree.pyx"
      __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 352, __pyx_L8_error)

#line 352 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 352 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_16, 0, 0, 0);

#line 352 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 352 "root_numpy/src/tree.pyx"
      __PYX_ERR(2, 352, __pyx_L8_error)

      /* "root_numpy/src/tree.pyx":351
 *                                   converter_buckets[branch_idx].end())
 * 
 *         elif columns.size() == 0:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("unable to convert any branches in this tree")
 * 
 */

#line 351 "root_numpy/src/tree.pyx"
    }

#line 351 "root_numpy/src/tree.pyx"
    __pyx_L31:;

    /* "root_numpy/src/tree.pyx":355
 * 
 *         # Activate branches used by formulae and columns
 *         chain.InitBranches()             # <<<<<<<<<<<<<<
 * 
 *         # Now that we have all the columns we can
 */

#line 355 "root_numpy/src/tree.pyx"
    __pyx_v_chain->InitBranches();

    /* "root_numpy/src/tree.pyx":359
 *         # Now that we have all the columns we can
 *         # make an appropriate array structure
 *         dtype_fields = []             # <<<<<<<<<<<<<<
 *         for icol in range(columns.size()):
 *             this_col = columns[icol]
 */

#line 359 "root_numpy/src/tree.pyx"
    __pyx_t_16 = PyList_New(0); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 359, __pyx_L8_error)

#line 359 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_16);

#line 359 "root_numpy/src/tree.pyx"
    __pyx_v_dtype_fields = ((PyObject*)__pyx_t_16);

#line 359 "root_numpy/src/tree.pyx"
    __pyx_t_16 = 0;

    /* "root_numpy/src/tree.pyx":360
 *         # make an appropriate array structure
 *         dtype_fields = []
 *         for icol in range(columns.size()):             # <<<<<<<<<<<<<<
 *             this_col = columns[icol]
 *             this_conv = converters[icol]
 */

#line 360 "root_numpy/src/tree.pyx"
    __pyx_t_27 = __pyx_v_columns.size();

#line 360 "root_numpy/src/tree.pyx"
    for (__pyx_t_28 = 0; __pyx_t_28 < __pyx_t_27; __pyx_t_28+=1) {

#line 360 "root_numpy/src/tree.pyx"
      __pyx_v_icol = __pyx_t_28;

      /* "root_numpy/src/tree.pyx":361
 *         dtype_fields = []
 *         for icol in range(columns.size()):
 *             this_col = columns[icol]             # <<<<<<<<<<<<<<
 *             this_conv = converters[icol]
 *             dtype_fields.append((this_col.name, this_conv.get_nptype()))
 */

#line 361 "root_numpy/src/tree.pyx"
      __pyx_v_this_col = (__pyx_v_columns[__pyx_v_icol]);

      /* "root_numpy/src/tree.pyx":362
 *         for icol in range(columns.size()):
 *             this_col = columns[icol]
 *             this_conv = converters[icol]             # <<<<<<<<<<<<<<
 *             dtype_fields.append((this_col.name, this_conv.get_nptype()))
 *         if include_weight:
 */

#line 362 "root_numpy/src/tree.pyx"
      __pyx_v_this_conv = (__pyx_v_converters[__pyx_v_icol]);

      /* "root_numpy/src/tree.pyx":363
 *             this_col = columns[icol]
 *             this_conv = converters[icol]
 *             dtype_fields.append((this_col.name, this_conv.get_nptype()))             # <<<<<<<<<<<<<<
 *         if include_weight:
 *             dtype_fields.append((weight_name, np.dtype('d')))
 */

#line 363 "root_numpy/src/tree.pyx"
      __pyx_t_16 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_this_col->name); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 363, __pyx_L8_error)

#line 363 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 363 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __pyx_v_this_conv->get_nptype(); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 363, __pyx_L8_error)

#line 363 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 363 "root_numpy/src/tree.pyx"
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 363, __pyx_L8_error)

#line 363 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 363 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_16);

#line 363 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_16);

#line 363 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 363 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);

#line 363 "root_numpy/src/tree.pyx"
      __pyx_t_16 = 0;

#line 363 "root_numpy/src/tree.pyx"
      __pyx_t_2 = 0;

#line 363 "root_numpy/src/tree.pyx"
      __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_dtype_fields, __pyx_t_9); if (unlikely(__pyx_t_18 == -1)) __PYX_ERR(2, 363, __pyx_L8_error)

#line 363 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 363 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":364
 *             this_conv = converters[icol]
 *             dtype_fields.append((this_col.name, this_conv.get_nptype()))
 *         if include_weight:             # <<<<<<<<<<<<<<
 *             dtype_fields.append((weight_name, np.dtype('d')))
 *         dtype = np.dtype(dtype_fields)
 */

#line 364 "root_numpy/src/tree.pyx"
    __pyx_t_1 = (__pyx_v_include_weight != 0);

#line 364 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":365
 *             dtype_fields.append((this_col.name, this_conv.get_nptype()))
 *         if include_weight:
 *             dtype_fields.append((weight_name, np.dtype('d')))             # <<<<<<<<<<<<<<
 *         dtype = np.dtype(dtype_fields)
 * 
 */

#line 365 "root_numpy/src/tree.pyx"
      __pyx_t_9 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_weight_name); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 365, __pyx_L8_error)

#line 365 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 365 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 365, __pyx_L8_error)

#line 365 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 365 "root_numpy/src/tree.pyx"
      __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 365, __pyx_L8_error)

#line 365 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 365 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_9);

#line 365 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_9);

#line 365 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 365 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_2);

#line 365 "root_numpy/src/tree.pyx"
      __pyx_t_9 = 0;

#line 365 "root_numpy/src/tree.pyx"
      __pyx_t_2 = 0;

#line 365 "root_numpy/src/tree.pyx"
      __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_dtype_fields, __pyx_t_16); if (unlikely(__pyx_t_18 == -1)) __PYX_ERR(2, 365, __pyx_L8_error)

#line 365 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "root_numpy/src/tree.pyx":364
 *             this_conv = converters[icol]
 *             dtype_fields.append((this_col.name, this_conv.get_nptype()))
 *         if include_weight:             # <<<<<<<<<<<<<<
 *             dtype_fields.append((weight_name, np.dtype('d')))
 *         dtype = np.dtype(dtype_fields)
 */

#line 364 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":366
 *         if include_weight:
 *             dtype_fields.append((weight_name, np.dtype('d')))
 *         dtype = np.dtype(dtype_fields)             # <<<<<<<<<<<<<<
 * 
 *         # Determine indices in slice
 */

#line 366 "root_numpy/src/tree.pyx"
    __pyx_t_16 = PyTuple_New(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 366, __pyx_L8_error)

#line 366 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_16);

#line 366 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_dtype_fields);

#line 366 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_v_dtype_fields);

#line 366 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_v_dtype_fields);

#line 366 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 366, __pyx_L8_error)

#line 366 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 366 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 366 "root_numpy/src/tree.pyx"
    __pyx_v_dtype = __pyx_t_2;

#line 366 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":369
 * 
 *         # Determine indices in slice
 *         slice_tuple = slice(start, stop, step).indices(num_entries)             # <<<<<<<<<<<<<<
 *         istart = slice_tuple[0]
 *         istop = slice_tuple[1]
 */

#line 369 "root_numpy/src/tree.pyx"
    __pyx_t_16 = PySlice_New(__pyx_v_start, __pyx_v_stop, __pyx_v_step); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 369, __pyx_L8_error)

#line 369 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_16);

#line 369 "root_numpy/src/tree.pyx"
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_indices); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 369, __pyx_L8_error)

#line 369 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 369 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 369 "root_numpy/src/tree.pyx"
    __pyx_t_16 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_num_entries); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 369, __pyx_L8_error)

#line 369 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_16);

#line 369 "root_numpy/src/tree.pyx"
    __pyx_t_10 = NULL;

#line 369 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_9))) {

#line 369 "root_numpy/src/tree.pyx"
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);

#line 369 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_10)) {

#line 369 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);

#line 369 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_10);

#line 369 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 369 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_9, function);

#line 369 "root_numpy/src/tree.pyx"
      }

#line 369 "root_numpy/src/tree.pyx"
    }

#line 369 "root_numpy/src/tree.pyx"
    if (!__pyx_t_10) {

#line 369 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_16); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 369, __pyx_L8_error)

#line 369 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 369 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 369 "root_numpy/src/tree.pyx"
    } else {

#line 369 "root_numpy/src/tree.pyx"
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 369, __pyx_L8_error)

#line 369 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_11);

#line 369 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;

#line 369 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_16);

#line 369 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_16);

#line 369 "root_numpy/src/tree.pyx"
      __pyx_t_16 = 0;

#line 369 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 369, __pyx_L8_error)

#line 369 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 369 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 369 "root_numpy/src/tree.pyx"
    }

#line 369 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 369 "root_numpy/src/tree.pyx"
    __pyx_v_slice_tuple = __pyx_t_2;

#line 369 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":370
 *         # Determine indices in slice
 *         slice_tuple = slice(start, stop, step).indices(num_entries)
 *         istart = slice_tuple[0]             # <<<<<<<<<<<<<<
 *         istop = slice_tuple[1]
 *         istep = slice_tuple[2]
 */

#line 370 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_slice_tuple, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 370, __pyx_L8_error)

#line 370 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 370 "root_numpy/src/tree.pyx"
    __pyx_t_29 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_29 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(2, 370, __pyx_L8_error)

#line 370 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 370 "root_numpy/src/tree.pyx"
    __pyx_v_istart = __pyx_t_29;

    /* "root_numpy/src/tree.pyx":371
 *         slice_tuple = slice(start, stop, step).indices(num_entries)
 *         istart = slice_tuple[0]
 *         istop = slice_tuple[1]             # <<<<<<<<<<<<<<
 *         istep = slice_tuple[2]
 *         slice_indices = xrange(istart, istop, istep)
 */

#line 371 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_slice_tuple, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 371, __pyx_L8_error)

#line 371 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 371 "root_numpy/src/tree.pyx"
    __pyx_t_29 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_29 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(2, 371, __pyx_L8_error)

#line 371 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 371 "root_numpy/src/tree.pyx"
    __pyx_v_istop = __pyx_t_29;

    /* "root_numpy/src/tree.pyx":372
 *         istart = slice_tuple[0]
 *         istop = slice_tuple[1]
 *         istep = slice_tuple[2]             # <<<<<<<<<<<<<<
 *         slice_indices = xrange(istart, istop, istep)
 *         num_entries = len(slice_indices)
 */

#line 372 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_slice_tuple, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 372, __pyx_L8_error)

#line 372 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 372 "root_numpy/src/tree.pyx"
    __pyx_t_29 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_29 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(2, 372, __pyx_L8_error)

#line 372 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 372 "root_numpy/src/tree.pyx"
    __pyx_v_istep = __pyx_t_29;

    /* "root_numpy/src/tree.pyx":373
 *         istop = slice_tuple[1]
 *         istep = slice_tuple[2]
 *         slice_indices = xrange(istart, istop, istep)             # <<<<<<<<<<<<<<
 *         num_entries = len(slice_indices)
 * 
 */

#line 373 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_istart); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 373, __pyx_L8_error)

#line 373 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 373 "root_numpy/src/tree.pyx"
    __pyx_t_9 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_istop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 373, __pyx_L8_error)

#line 373 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 373 "root_numpy/src/tree.pyx"
    __pyx_t_11 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_istep); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 373, __pyx_L8_error)

#line 373 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 373 "root_numpy/src/tree.pyx"
    __pyx_t_16 = PyTuple_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 373, __pyx_L8_error)

#line 373 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_16);

#line 373 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 373 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_2);

#line 373 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_9);

#line 373 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_9);

#line 373 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_11);

#line 373 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_11);

#line 373 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

#line 373 "root_numpy/src/tree.pyx"
    __pyx_t_9 = 0;

#line 373 "root_numpy/src/tree.pyx"
    __pyx_t_11 = 0;

#line 373 "root_numpy/src/tree.pyx"
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_16, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 373, __pyx_L8_error)

#line 373 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 373 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 373 "root_numpy/src/tree.pyx"
    __pyx_v_slice_indices = __pyx_t_11;

#line 373 "root_numpy/src/tree.pyx"
    __pyx_t_11 = 0;

    /* "root_numpy/src/tree.pyx":374
 *         istep = slice_tuple[2]
 *         slice_indices = xrange(istart, istop, istep)
 *         num_entries = len(slice_indices)             # <<<<<<<<<<<<<<
 * 
 *         # Initialize the array
 */

#line 374 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyObject_Length(__pyx_v_slice_indices); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 374, __pyx_L8_error)

#line 374 "root_numpy/src/tree.pyx"
    __pyx_v_num_entries = __pyx_t_4;

    /* "root_numpy/src/tree.pyx":377
 * 
 *         # Initialize the array
 *         try:             # <<<<<<<<<<<<<<
 *             arr = np.empty(num_entries, dtype=dtype)
 *         except MemoryError:
 */

#line 377 "root_numpy/src/tree.pyx"
    {

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_declare

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_ExceptionSave(&__pyx_t_30, &__pyx_t_31, &__pyx_t_32);

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_30);

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_31);

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_32);

#line 377 "root_numpy/src/tree.pyx"
      /*try:*/ {

        /* "root_numpy/src/tree.pyx":378
 *         # Initialize the array
 *         try:
 *             arr = np.empty(num_entries, dtype=dtype)             # <<<<<<<<<<<<<<
 *         except MemoryError:
 *             # Raise a more informative exception
 */

#line 378 "root_numpy/src/tree.pyx"
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 378, __pyx_L44_error)

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_11);

#line 378 "root_numpy/src/tree.pyx"
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_empty); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 378, __pyx_L44_error)

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_16);

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 378 "root_numpy/src/tree.pyx"
        __pyx_t_11 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_num_entries); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 378, __pyx_L44_error)

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_11);

#line 378 "root_numpy/src/tree.pyx"
        __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 378, __pyx_L44_error)

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_11);

#line 378 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_11);

#line 378 "root_numpy/src/tree.pyx"
        __pyx_t_11 = 0;

#line 378 "root_numpy/src/tree.pyx"
        __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 378, __pyx_L44_error)

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_11);

#line 378 "root_numpy/src/tree.pyx"
        if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_v_dtype) < 0) __PYX_ERR(2, 378, __pyx_L44_error)

#line 378 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_9, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 378, __pyx_L44_error)

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 378 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 378 "root_numpy/src/tree.pyx"
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(2, 378, __pyx_L44_error)

#line 378 "root_numpy/src/tree.pyx"
        __pyx_v_arr = ((PyArrayObject *)__pyx_t_2);

#line 378 "root_numpy/src/tree.pyx"
        __pyx_t_2 = 0;

        /* "root_numpy/src/tree.pyx":377
 * 
 *         # Initialize the array
 *         try:             # <<<<<<<<<<<<<<
 *             arr = np.empty(num_entries, dtype=dtype)
 *         except MemoryError:
 */

#line 377 "root_numpy/src/tree.pyx"
      }

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_30); __pyx_t_30 = 0;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_32); __pyx_t_32 = 0;

#line 377 "root_numpy/src/tree.pyx"
      goto __pyx_L51_try_end;

#line 377 "root_numpy/src/tree.pyx"
      __pyx_L44_error:;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "root_numpy/src/tree.pyx":379
 *         try:
 *             arr = np.empty(num_entries, dtype=dtype)
 *         except MemoryError:             # <<<<<<<<<<<<<<
 *             # Raise a more informative exception
 *             raise MemoryError("failed to allocate memory for {0} array of {1} records with {2} fields".format(
 */

#line 379 "root_numpy/src/tree.pyx"
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_MemoryError);

#line 379 "root_numpy/src/tree.pyx"
      if (__pyx_t_13) {

#line 379 "root_numpy/src/tree.pyx"
        __Pyx_AddTraceback("_librootnumpy.tree2array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 379 "root_numpy/src/tree.pyx"
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_11, &__pyx_t_9) < 0) __PYX_ERR(2, 379, __pyx_L46_except_error)

#line 379 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 379 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_11);

#line 379 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_9);

        /* "root_numpy/src/tree.pyx":381
 *         except MemoryError:
 *             # Raise a more informative exception
 *             raise MemoryError("failed to allocate memory for {0} array of {1} records with {2} fields".format(             # <<<<<<<<<<<<<<
 *                 humanize_bytes(dtype.itemsize * num_entries), num_entries, len(dtype_fields)))
 * 
 */

#line 381 "root_numpy/src/tree.pyx"
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_failed_to_allocate_memory_for_0, __pyx_n_s_format); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 381, __pyx_L46_except_error)

#line 381 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_10);

        /* "root_numpy/src/tree.pyx":382
 *             # Raise a more informative exception
 *             raise MemoryError("failed to allocate memory for {0} array of {1} records with {2} fields".format(
 *                 humanize_bytes(dtype.itemsize * num_entries), num_entries, len(dtype_fields)))             # <<<<<<<<<<<<<<
 * 
 *         # Exclude weight column in num_columns
 */

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_25 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_25)) __PYX_ERR(2, 382, __pyx_L46_except_error)

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_25);

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_17 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_num_entries); if (unlikely(!__pyx_t_17)) __PYX_ERR(2, 382, __pyx_L46_except_error)

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_17);

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_8 = PyNumber_Multiply(__pyx_t_25, __pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 382, __pyx_L46_except_error)

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_33 = __Pyx_PyInt_As_long(__pyx_t_8); if (unlikely((__pyx_t_33 == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 382, __pyx_L46_except_error)

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_8 = __pyx_f_13_librootnumpy_humanize_bytes(__pyx_t_33, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 382, __pyx_L46_except_error)

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_17 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_num_entries); if (unlikely(!__pyx_t_17)) __PYX_ERR(2, 382, __pyx_L46_except_error)

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_17);

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_4 = PyList_GET_SIZE(__pyx_v_dtype_fields); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(2, 382, __pyx_L46_except_error)

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_25 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_25)) __PYX_ERR(2, 382, __pyx_L46_except_error)

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_25);

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_24 = NULL;

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_4 = 0;

#line 382 "root_numpy/src/tree.pyx"
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {

#line 382 "root_numpy/src/tree.pyx"
          __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_10);

#line 382 "root_numpy/src/tree.pyx"
          if (likely(__pyx_t_24)) {

#line 382 "root_numpy/src/tree.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);

#line 382 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_24);

#line 382 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(function);

#line 382 "root_numpy/src/tree.pyx"
            __Pyx_DECREF_SET(__pyx_t_10, function);

#line 382 "root_numpy/src/tree.pyx"
            __pyx_t_4 = 1;

#line 382 "root_numpy/src/tree.pyx"
          }

#line 382 "root_numpy/src/tree.pyx"
        }

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_34 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_34)) __PYX_ERR(2, 381, __pyx_L46_except_error)

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_34);

#line 382 "root_numpy/src/tree.pyx"
        if (__pyx_t_24) {

#line 382 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_24); PyTuple_SET_ITEM(__pyx_t_34, 0, __pyx_t_24); __pyx_t_24 = NULL;

#line 382 "root_numpy/src/tree.pyx"
        }

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_8);

#line 382 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_34, 0+__pyx_t_4, __pyx_t_8);

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_17);

#line 382 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_34, 1+__pyx_t_4, __pyx_t_17);

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_25);

#line 382 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_34, 2+__pyx_t_4, __pyx_t_25);

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_8 = 0;

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_17 = 0;

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_25 = 0;

#line 382 "root_numpy/src/tree.pyx"
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_34, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 381, __pyx_L46_except_error)

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_16);

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;

#line 382 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "root_numpy/src/tree.pyx":381
 *         except MemoryError:
 *             # Raise a more informative exception
 *             raise MemoryError("failed to allocate memory for {0} array of {1} records with {2} fields".format(             # <<<<<<<<<<<<<<
 *                 humanize_bytes(dtype.itemsize * num_entries), num_entries, len(dtype_fields)))
 * 
 */

#line 381 "root_numpy/src/tree.pyx"
        __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 381, __pyx_L46_except_error)

#line 381 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 381 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_16);

#line 381 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_16);

#line 381 "root_numpy/src/tree.pyx"
        __pyx_t_16 = 0;

#line 381 "root_numpy/src/tree.pyx"
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 381, __pyx_L46_except_error)

#line 381 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_16);

#line 381 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 381 "root_numpy/src/tree.pyx"
        __Pyx_Raise(__pyx_t_16, 0, 0, 0);

#line 381 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 381 "root_numpy/src/tree.pyx"
        __PYX_ERR(2, 381, __pyx_L46_except_error)

#line 381 "root_numpy/src/tree.pyx"
      }

#line 381 "root_numpy/src/tree.pyx"
      goto __pyx_L46_except_error;

#line 381 "root_numpy/src/tree.pyx"
      __pyx_L46_except_error:;

      /* "root_numpy/src/tree.pyx":377
 * 
 *         # Initialize the array
 *         try:             # <<<<<<<<<<<<<<
 *             arr = np.empty(num_entries, dtype=dtype)
 *         except MemoryError:
 */

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_30);

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_31);

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_32);

#line 377 "root_numpy/src/tree.pyx"
      __Pyx_ExceptionReset(__pyx_t_30, __pyx_t_31, __pyx_t_32);

#line 377 "root_numpy/src/tree.pyx"
      goto __pyx_L8_error;

#line 377 "root_numpy/src/tree.pyx"
      __pyx_L51_try_end:;

#line 377 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":385
 * 
 *         # Exclude weight column in num_columns
 *         num_columns = columns.size()             # <<<<<<<<<<<<<<
 * 
 *         # Loop on entries in the tree and write the data in the array
 */

#line 385 "root_numpy/src/tree.pyx"
    __pyx_v_num_columns = __pyx_v_columns.size();

    /* "root_numpy/src/tree.pyx":388
 * 
 *         # Loop on entries in the tree and write the data in the array
 *         ientry = istart - istep             # <<<<<<<<<<<<<<
 *         while True:
 *             ientry += istep
 */

#line 388 "root_numpy/src/tree.pyx"
    __pyx_v_ientry = (__pyx_v_istart - __pyx_v_istep);

    /* "root_numpy/src/tree.pyx":389
 *         # Loop on entries in the tree and write the data in the array
 *         ientry = istart - istep
 *         while True:             # <<<<<<<<<<<<<<
 *             ientry += istep
 *             # Are we still in the selected range?
 */

#line 389 "root_numpy/src/tree.pyx"
    while (1) {

      /* "root_numpy/src/tree.pyx":390
 *         ientry = istart - istep
 *         while True:
 *             ientry += istep             # <<<<<<<<<<<<<<
 *             # Are we still in the selected range?
 *             if istep > 0:
 */

#line 390 "root_numpy/src/tree.pyx"
      __pyx_v_ientry = (__pyx_v_ientry + __pyx_v_istep);

      /* "root_numpy/src/tree.pyx":392
 *             ientry += istep
 *             # Are we still in the selected range?
 *             if istep > 0:             # <<<<<<<<<<<<<<
 *                 if ientry >= istop:
 *                     break
 */

#line 392 "root_numpy/src/tree.pyx"
      __pyx_t_1 = ((__pyx_v_istep > 0) != 0);

#line 392 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":393
 *             # Are we still in the selected range?
 *             if istep > 0:
 *                 if ientry >= istop:             # <<<<<<<<<<<<<<
 *                     break
 *             elif ientry <= istop:
 */

#line 393 "root_numpy/src/tree.pyx"
        __pyx_t_1 = ((__pyx_v_ientry >= __pyx_v_istop) != 0);

#line 393 "root_numpy/src/tree.pyx"
        if (__pyx_t_1) {

          /* "root_numpy/src/tree.pyx":394
 *             if istep > 0:
 *                 if ientry >= istop:
 *                     break             # <<<<<<<<<<<<<<
 *             elif ientry <= istop:
 *                 break
 */

#line 394 "root_numpy/src/tree.pyx"
          goto __pyx_L55_break;

          /* "root_numpy/src/tree.pyx":393
 *             # Are we still in the selected range?
 *             if istep > 0:
 *                 if ientry >= istop:             # <<<<<<<<<<<<<<
 *                     break
 *             elif ientry <= istop:
 */

#line 393 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":392
 *             ientry += istep
 *             # Are we still in the selected range?
 *             if istep > 0:             # <<<<<<<<<<<<<<
 *                 if ientry >= istop:
 *                     break
 */

#line 392 "root_numpy/src/tree.pyx"
        goto __pyx_L56;

#line 392 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":395
 *                 if ientry >= istop:
 *                     break
 *             elif ientry <= istop:             # <<<<<<<<<<<<<<
 *                 break
 *             entry_size = chain.GetEntry(ientry)
 */

#line 395 "root_numpy/src/tree.pyx"
      __pyx_t_1 = ((__pyx_v_ientry <= __pyx_v_istop) != 0);

#line 395 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":396
 *                     break
 *             elif ientry <= istop:
 *                 break             # <<<<<<<<<<<<<<
 *             entry_size = chain.GetEntry(ientry)
 *             handle_load(entry_size)
 */

#line 396 "root_numpy/src/tree.pyx"
        goto __pyx_L55_break;

        /* "root_numpy/src/tree.pyx":395
 *                 if ientry >= istop:
 *                     break
 *             elif ientry <= istop:             # <<<<<<<<<<<<<<
 *                 break
 *             entry_size = chain.GetEntry(ientry)
 */

#line 395 "root_numpy/src/tree.pyx"
      }

#line 395 "root_numpy/src/tree.pyx"
      __pyx_L56:;

      /* "root_numpy/src/tree.pyx":397
 *             elif ientry <= istop:
 *                 break
 *             entry_size = chain.GetEntry(ientry)             # <<<<<<<<<<<<<<
 *             handle_load(entry_size)
 *             if entry_size == 0:
 */

#line 397 "root_numpy/src/tree.pyx"
      __pyx_v_entry_size = __pyx_v_chain->GetEntry(__pyx_v_ientry);

      /* "root_numpy/src/tree.pyx":398
 *                 break
 *             entry_size = chain.GetEntry(ientry)
 *             handle_load(entry_size)             # <<<<<<<<<<<<<<
 *             if entry_size == 0:
 *                 raise IOError("read failure in current tree or requested entry "
 */

#line 398 "root_numpy/src/tree.pyx"
      __pyx_t_9 = __pyx_f_13_librootnumpy_handle_load(__pyx_v_entry_size, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 398, __pyx_L8_error)

#line 398 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 398 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "root_numpy/src/tree.pyx":399
 *             entry_size = chain.GetEntry(ientry)
 *             handle_load(entry_size)
 *             if entry_size == 0:             # <<<<<<<<<<<<<<
 *                 raise IOError("read failure in current tree or requested entry "
 *                               "does not exist (branches have different lengths?)")
 */

#line 399 "root_numpy/src/tree.pyx"
      __pyx_t_1 = ((__pyx_v_entry_size == 0) != 0);

#line 399 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":400
 *             handle_load(entry_size)
 *             if entry_size == 0:
 *                 raise IOError("read failure in current tree or requested entry "             # <<<<<<<<<<<<<<
 *                               "does not exist (branches have different lengths?)")
 * 
 */

#line 400 "root_numpy/src/tree.pyx"
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 400, __pyx_L8_error)

#line 400 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 400 "root_numpy/src/tree.pyx"
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);

#line 400 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 400 "root_numpy/src/tree.pyx"
        __PYX_ERR(2, 400, __pyx_L8_error)

        /* "root_numpy/src/tree.pyx":399
 *             entry_size = chain.GetEntry(ientry)
 *             handle_load(entry_size)
 *             if entry_size == 0:             # <<<<<<<<<<<<<<
 *                 raise IOError("read failure in current tree or requested entry "
 *                               "does not exist (branches have different lengths?)")
 */

#line 399 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":405
 *             # Determine if this entry passes the selection,
 *             # similar to the code in ROOT's tree/treeplayer/src/TTreePlayer.cxx
 *             if selection_formula != NULL:             # <<<<<<<<<<<<<<
 *                 keep = False
 *                 for instance in range(selection_formula.GetNdata()):
 */

#line 405 "root_numpy/src/tree.pyx"
      __pyx_t_1 = ((__pyx_v_selection_formula != NULL) != 0);

#line 405 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":406
 *             # similar to the code in ROOT's tree/treeplayer/src/TTreePlayer.cxx
 *             if selection_formula != NULL:
 *                 keep = False             # <<<<<<<<<<<<<<
 *                 for instance in range(selection_formula.GetNdata()):
 *                     if selection_formula.EvalInstance(instance) != 0:
 */

#line 406 "root_numpy/src/tree.pyx"
        __pyx_v_keep = 0;

        /* "root_numpy/src/tree.pyx":407
 *             if selection_formula != NULL:
 *                 keep = False
 *                 for instance in range(selection_formula.GetNdata()):             # <<<<<<<<<<<<<<
 *                     if selection_formula.EvalInstance(instance) != 0:
 *                         keep = True
 */

#line 407 "root_numpy/src/tree.pyx"
        __pyx_t_13 = __pyx_v_selection_formula->GetNdata();

#line 407 "root_numpy/src/tree.pyx"
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {

#line 407 "root_numpy/src/tree.pyx"
          __pyx_v_instance = __pyx_t_14;

          /* "root_numpy/src/tree.pyx":408
 *                 keep = False
 *                 for instance in range(selection_formula.GetNdata()):
 *                     if selection_formula.EvalInstance(instance) != 0:             # <<<<<<<<<<<<<<
 *                         keep = True
 *                         break
 */

#line 408 "root_numpy/src/tree.pyx"
          __pyx_t_1 = ((__pyx_v_selection_formula->EvalInstance(__pyx_v_instance) != 0.0) != 0);

#line 408 "root_numpy/src/tree.pyx"
          if (__pyx_t_1) {

            /* "root_numpy/src/tree.pyx":409
 *                 for instance in range(selection_formula.GetNdata()):
 *                     if selection_formula.EvalInstance(instance) != 0:
 *                         keep = True             # <<<<<<<<<<<<<<
 *                         break
 *                 if not keep:
 */

#line 409 "root_numpy/src/tree.pyx"
            __pyx_v_keep = 1;

            /* "root_numpy/src/tree.pyx":410
 *                     if selection_formula.EvalInstance(instance) != 0:
 *                         keep = True
 *                         break             # <<<<<<<<<<<<<<
 *                 if not keep:
 *                     continue
 */

#line 410 "root_numpy/src/tree.pyx"
            goto __pyx_L61_break;

            /* "root_numpy/src/tree.pyx":408
 *                 keep = False
 *                 for instance in range(selection_formula.GetNdata()):
 *                     if selection_formula.EvalInstance(instance) != 0:             # <<<<<<<<<<<<<<
 *                         keep = True
 *                         break
 */

#line 408 "root_numpy/src/tree.pyx"
          }

#line 408 "root_numpy/src/tree.pyx"
        }

#line 408 "root_numpy/src/tree.pyx"
        __pyx_L61_break:;

        /* "root_numpy/src/tree.pyx":411
 *                         keep = True
 *                         break
 *                 if not keep:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */

#line 411 "root_numpy/src/tree.pyx"
        __pyx_t_1 = ((!(__pyx_v_keep != 0)) != 0);

#line 411 "root_numpy/src/tree.pyx"
        if (__pyx_t_1) {

          /* "root_numpy/src/tree.pyx":412
 *                         break
 *                 if not keep:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *             # Copy the values into the array
 */

#line 412 "root_numpy/src/tree.pyx"
          goto __pyx_L54_continue;

          /* "root_numpy/src/tree.pyx":411
 *                         keep = True
 *                         break
 *                 if not keep:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */

#line 411 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":405
 *             # Determine if this entry passes the selection,
 *             # similar to the code in ROOT's tree/treeplayer/src/TTreePlayer.cxx
 *             if selection_formula != NULL:             # <<<<<<<<<<<<<<
 *                 keep = False
 *                 for instance in range(selection_formula.GetNdata()):
 */

#line 405 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":415
 * 
 *             # Copy the values into the array
 *             data_ptr = np.PyArray_GETPTR1(arr, num_entries_selected)             # <<<<<<<<<<<<<<
 *             for icol in range(num_columns):
 *                 col = columns[icol]
 */

#line 415 "root_numpy/src/tree.pyx"
      __pyx_v_data_ptr = PyArray_GETPTR1(__pyx_v_arr, __pyx_v_num_entries_selected);

      /* "root_numpy/src/tree.pyx":416
 *             # Copy the values into the array
 *             data_ptr = np.PyArray_GETPTR1(arr, num_entries_selected)
 *             for icol in range(num_columns):             # <<<<<<<<<<<<<<
 *                 col = columns[icol]
 *                 conv = converters[icol]
 */

#line 416 "root_numpy/src/tree.pyx"
      __pyx_t_28 = __pyx_v_num_columns;

#line 416 "root_numpy/src/tree.pyx"
      for (__pyx_t_35 = 0; __pyx_t_35 < __pyx_t_28; __pyx_t_35+=1) {

#line 416 "root_numpy/src/tree.pyx"
        __pyx_v_icol = __pyx_t_35;

        /* "root_numpy/src/tree.pyx":417
 *             data_ptr = np.PyArray_GETPTR1(arr, num_entries_selected)
 *             for icol in range(num_columns):
 *                 col = columns[icol]             # <<<<<<<<<<<<<<
 *                 conv = converters[icol]
 *                 num_bytes = conv.write(col, data_ptr)
 */

#line 417 "root_numpy/src/tree.pyx"
        __pyx_v_col = (__pyx_v_columns[__pyx_v_icol]);

        /* "root_numpy/src/tree.pyx":418
 *             for icol in range(num_columns):
 *                 col = columns[icol]
 *                 conv = converters[icol]             # <<<<<<<<<<<<<<
 *                 num_bytes = conv.write(col, data_ptr)
 *                 data_ptr = shift(data_ptr, num_bytes)
 */

#line 418 "root_numpy/src/tree.pyx"
        __pyx_v_conv = (__pyx_v_converters[__pyx_v_icol]);

        /* "root_numpy/src/tree.pyx":419
 *                 col = columns[icol]
 *                 conv = converters[icol]
 *                 num_bytes = conv.write(col, data_ptr)             # <<<<<<<<<<<<<<
 *                 data_ptr = shift(data_ptr, num_bytes)
 *             if include_weight:
 */

#line 419 "root_numpy/src/tree.pyx"
        __pyx_v_num_bytes = __pyx_v_conv->write(__pyx_v_col, __pyx_v_data_ptr);

        /* "root_numpy/src/tree.pyx":420
 *                 conv = converters[icol]
 *                 num_bytes = conv.write(col, data_ptr)
 *                 data_ptr = shift(data_ptr, num_bytes)             # <<<<<<<<<<<<<<
 *             if include_weight:
 *                 (<double*> data_ptr)[0] = tree.GetWeight()
 */

#line 420 "root_numpy/src/tree.pyx"
        __pyx_v_data_ptr = shift(__pyx_v_data_ptr, __pyx_v_num_bytes);

#line 420 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":421
 *                 num_bytes = conv.write(col, data_ptr)
 *                 data_ptr = shift(data_ptr, num_bytes)
 *             if include_weight:             # <<<<<<<<<<<<<<
 *                 (<double*> data_ptr)[0] = tree.GetWeight()
 * 
 */

#line 421 "root_numpy/src/tree.pyx"
      __pyx_t_1 = (__pyx_v_include_weight != 0);

#line 421 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":422
 *                 data_ptr = shift(data_ptr, num_bytes)
 *             if include_weight:
 *                 (<double*> data_ptr)[0] = tree.GetWeight()             # <<<<<<<<<<<<<<
 * 
 *             # Increment number of selected entries last
 */

#line 422 "root_numpy/src/tree.pyx"
        (((double *)__pyx_v_data_ptr)[0]) = __pyx_v_tree->GetWeight();

        /* "root_numpy/src/tree.pyx":421
 *                 num_bytes = conv.write(col, data_ptr)
 *                 data_ptr = shift(data_ptr, num_bytes)
 *             if include_weight:             # <<<<<<<<<<<<<<
 *                 (<double*> data_ptr)[0] = tree.GetWeight()
 * 
 */

#line 421 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":425
 * 
 *             # Increment number of selected entries last
 *             num_entries_selected += 1             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */

#line 425 "root_numpy/src/tree.pyx"
      __pyx_v_num_entries_selected = (__pyx_v_num_entries_selected + 1);

#line 425 "root_numpy/src/tree.pyx"
      __pyx_L54_continue:;

#line 425 "root_numpy/src/tree.pyx"
    }

#line 425 "root_numpy/src/tree.pyx"
    __pyx_L55_break:;

#line 425 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":429
 *     finally:
 *         # Delete TreeChain
 *         del chain             # <<<<<<<<<<<<<<
 *         # Delete Columns
 *         for icol in range(columns.size()):
 */

#line 429 "root_numpy/src/tree.pyx"
  /*finally:*/ {

#line 429 "root_numpy/src/tree.pyx"
    /*normal exit:*/{

#line 429 "root_numpy/src/tree.pyx"
      delete __pyx_v_chain;

      /* "root_numpy/src/tree.pyx":431
 *         del chain
 *         # Delete Columns
 *         for icol in range(columns.size()):             # <<<<<<<<<<<<<<
 *             del columns[icol]
 * 
 */

#line 431 "root_numpy/src/tree.pyx"
      __pyx_t_27 = __pyx_v_columns.size();

#line 431 "root_numpy/src/tree.pyx"
      for (__pyx_t_28 = 0; __pyx_t_28 < __pyx_t_27; __pyx_t_28+=1) {

#line 431 "root_numpy/src/tree.pyx"
        __pyx_v_icol = __pyx_t_28;

        /* "root_numpy/src/tree.pyx":432
 *         # Delete Columns
 *         for icol in range(columns.size()):
 *             del columns[icol]             # <<<<<<<<<<<<<<
 * 
 *     # Shrink the array if we selected fewer than num_entries entries
 */

#line 432 "root_numpy/src/tree.pyx"
        delete (__pyx_v_columns[__pyx_v_icol]);

#line 432 "root_numpy/src/tree.pyx"
      }

#line 432 "root_numpy/src/tree.pyx"
      goto __pyx_L9;

#line 432 "root_numpy/src/tree.pyx"
    }

#line 432 "root_numpy/src/tree.pyx"
    /*exception exit:*/{

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_declare

#line 432 "root_numpy/src/tree.pyx"
      __pyx_L8_error:;

#line 432 "root_numpy/src/tree.pyx"
      __pyx_t_32 = 0; __pyx_t_31 = 0; __pyx_t_30 = 0; __pyx_t_37 = 0; __pyx_t_38 = 0; __pyx_t_39 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_34); __pyx_t_34 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 432 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_37, &__pyx_t_38, &__pyx_t_39);

#line 432 "root_numpy/src/tree.pyx"
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_32, &__pyx_t_31, &__pyx_t_30) < 0)) __Pyx_ErrFetch(&__pyx_t_32, &__pyx_t_31, &__pyx_t_30);

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_32);

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_31);

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_30);

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_37);

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_38);

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_39);

#line 432 "root_numpy/src/tree.pyx"
      __pyx_t_13 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_36 = __pyx_filename;

#line 432 "root_numpy/src/tree.pyx"
      {

        /* "root_numpy/src/tree.pyx":429
 *     finally:
 *         # Delete TreeChain
 *         del chain             # <<<<<<<<<<<<<<
 *         # Delete Columns
 *         for icol in range(columns.size()):
 */

#line 429 "root_numpy/src/tree.pyx"
        delete __pyx_v_chain;

        /* "root_numpy/src/tree.pyx":431
 *         del chain
 *         # Delete Columns
 *         for icol in range(columns.size()):             # <<<<<<<<<<<<<<
 *             del columns[icol]
 * 
 */

#line 431 "root_numpy/src/tree.pyx"
        __pyx_t_27 = __pyx_v_columns.size();

#line 431 "root_numpy/src/tree.pyx"
        for (__pyx_t_28 = 0; __pyx_t_28 < __pyx_t_27; __pyx_t_28+=1) {

#line 431 "root_numpy/src/tree.pyx"
          __pyx_v_icol = __pyx_t_28;

          /* "root_numpy/src/tree.pyx":432
 *         # Delete Columns
 *         for icol in range(columns.size()):
 *             del columns[icol]             # <<<<<<<<<<<<<<
 * 
 *     # Shrink the array if we selected fewer than num_entries entries
 */

#line 432 "root_numpy/src/tree.pyx"
          delete (__pyx_v_columns[__pyx_v_icol]);

#line 432 "root_numpy/src/tree.pyx"
        }

#line 432 "root_numpy/src/tree.pyx"
      }

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 432 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) {

#line 432 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_37);

#line 432 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_38);

#line 432 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_39);

#line 432 "root_numpy/src/tree.pyx"
        __Pyx_ExceptionReset(__pyx_t_37, __pyx_t_38, __pyx_t_39);

#line 432 "root_numpy/src/tree.pyx"
      }

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_32);

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_31);

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_30);

#line 432 "root_numpy/src/tree.pyx"
      __Pyx_ErrRestore(__pyx_t_32, __pyx_t_31, __pyx_t_30);

#line 432 "root_numpy/src/tree.pyx"
      __pyx_t_32 = 0; __pyx_t_31 = 0; __pyx_t_30 = 0; __pyx_t_37 = 0; __pyx_t_38 = 0; __pyx_t_39 = 0;

#line 432 "root_numpy/src/tree.pyx"
      __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_36;

#line 432 "root_numpy/src/tree.pyx"
      goto __pyx_L1_error;

#line 432 "root_numpy/src/tree.pyx"
    }

#line 432 "root_numpy/src/tree.pyx"
    __pyx_L9:;

#line 432 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":435
 * 
 *     # Shrink the array if we selected fewer than num_entries entries
 *     if num_entries_selected < num_entries:             # <<<<<<<<<<<<<<
 *         arr.resize(num_entries_selected)
 * 
 */

#line 435 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((__pyx_v_num_entries_selected < __pyx_v_num_entries) != 0);

#line 435 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":436
 *     # Shrink the array if we selected fewer than num_entries entries
 *     if num_entries_selected < num_entries:
 *         arr.resize(num_entries_selected)             # <<<<<<<<<<<<<<
 * 
 *     return arr
 */

#line 436 "root_numpy/src/tree.pyx"
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_arr), __pyx_n_s_resize); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 436, __pyx_L1_error)

#line 436 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 436 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_num_entries_selected); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 436, __pyx_L1_error)

#line 436 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 436 "root_numpy/src/tree.pyx"
    __pyx_t_16 = NULL;

#line 436 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {

#line 436 "root_numpy/src/tree.pyx"
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_11);

#line 436 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_16)) {

#line 436 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);

#line 436 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_16);

#line 436 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 436 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_11, function);

#line 436 "root_numpy/src/tree.pyx"
      }

#line 436 "root_numpy/src/tree.pyx"
    }

#line 436 "root_numpy/src/tree.pyx"
    if (!__pyx_t_16) {

#line 436 "root_numpy/src/tree.pyx"
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 436, __pyx_L1_error)

#line 436 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 436 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 436 "root_numpy/src/tree.pyx"
    } else {

#line 436 "root_numpy/src/tree.pyx"
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 436, __pyx_L1_error)

#line 436 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 436 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_16); __pyx_t_16 = NULL;

#line 436 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 436 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_2);

#line 436 "root_numpy/src/tree.pyx"
      __pyx_t_2 = 0;

#line 436 "root_numpy/src/tree.pyx"
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 436, __pyx_L1_error)

#line 436 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 436 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 436 "root_numpy/src/tree.pyx"
    }

#line 436 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 436 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "root_numpy/src/tree.pyx":435
 * 
 *     # Shrink the array if we selected fewer than num_entries entries
 *     if num_entries_selected < num_entries:             # <<<<<<<<<<<<<<
 *         arr.resize(num_entries_selected)
 * 
 */

#line 435 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":438
 *         arr.resize(num_entries_selected)
 * 
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 438 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 438 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 438 "root_numpy/src/tree.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 438 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":155
 * 
 * 
 * cdef object tree2array(TTree* tree, bool ischain, branches, string selection,             # <<<<<<<<<<<<<<
 *                        start, stop, step,
 *                        bool include_weight, string weight_name,
 */

#line 155 "root_numpy/src/tree.pyx"


#line 155 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 155 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_16);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_17);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_24);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_25);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_34);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.tree2array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 155 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 155 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_branch_dict);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_seen_branches);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_expression);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_dtype_fields);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_dtype);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_slice_tuple);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_slice_indices);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_idx);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_b);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 155 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 155 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 155 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":441
 * 
 * 
 * def root2array_fromfile(fnames, string treename, branches,             # <<<<<<<<<<<<<<
 *                         selection, start, stop, step,
 *                         bool include_weight, string weight_name,
 */

#line 441 "root_numpy/src/tree.pyx"


#line 441 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 441 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_13root2array_fromfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_13root2array_fromfile = 
#line 441 "root_numpy/src/tree.pyx"
{"root2array_fromfile", (PyCFunction)__pyx_pw_13_librootnumpy_13root2array_fromfile, METH_VARARGS|METH_KEYWORDS, 0};

#line 441 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_13root2array_fromfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fnames = 0
#line 441 "root_numpy/src/tree.pyx"
;
  std::string __pyx_v_treename
#line 441 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_branches = 0
#line 441 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_selection = 0
#line 441 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_start = 0
#line 441 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_stop = 0
#line 441 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_step = 0
#line 441 "root_numpy/src/tree.pyx"
;
  bool __pyx_v_include_weight
#line 441 "root_numpy/src/tree.pyx"
;
  std::string __pyx_v_weight_name
#line 441 "root_numpy/src/tree.pyx"
;
  long __pyx_v_cache_size
#line 441 "root_numpy/src/tree.pyx"
;
  bool __pyx_v_warn_missing_tree
#line 441 "root_numpy/src/tree.pyx"
;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("root2array_fromfile (wrapper)", 0);

#line 441 "root_numpy/src/tree.pyx"
  {

#line 441 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fnames,&__pyx_n_s_treename,&__pyx_n_s_branches,&__pyx_n_s_selection,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_step,&__pyx_n_s_include_weight,&__pyx_n_s_weight_name,&__pyx_n_s_cache_size,&__pyx_n_s_warn_missing_tree,0};

#line 441 "root_numpy/src/tree.pyx"
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};

#line 441 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 441 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 441 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 441 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case 11: 
#line 441 "root_numpy/src/tree.pyx"
values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: 
#line 441 "root_numpy/src/tree.pyx"
values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: 
#line 441 "root_numpy/src/tree.pyx"
values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: 
#line 441 "root_numpy/src/tree.pyx"
values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: 
#line 441 "root_numpy/src/tree.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: 
#line 441 "root_numpy/src/tree.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 441 "root_numpy/src/tree.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 441 "root_numpy/src/tree.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 441 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 441 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 441 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 441 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 441 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 441 "root_numpy/src/tree.pyx"
      }

#line 441 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 441 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 441 "root_numpy/src/tree.pyx"
        case  0:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fnames)) != 0)) kw_args--;
        else 
#line 441 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 441 "root_numpy/src/tree.pyx"
        case  1:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_treename)) != 0)) kw_args--;

#line 441 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, 1); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
        }

#line 441 "root_numpy/src/tree.pyx"
        case  2:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_branches)) != 0)) kw_args--;

#line 441 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, 2); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
        }

#line 441 "root_numpy/src/tree.pyx"
        case  3:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_selection)) != 0)) kw_args--;

#line 441 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, 3); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
        }

#line 441 "root_numpy/src/tree.pyx"
        case  4:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;

#line 441 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, 4); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
        }

#line 441 "root_numpy/src/tree.pyx"
        case  5:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stop)) != 0)) kw_args--;

#line 441 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, 5); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
        }

#line 441 "root_numpy/src/tree.pyx"
        case  6:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step)) != 0)) kw_args--;

#line 441 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, 6); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
        }

#line 441 "root_numpy/src/tree.pyx"
        case  7:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_include_weight)) != 0)) kw_args--;

#line 441 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, 7); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
        }

#line 441 "root_numpy/src/tree.pyx"
        case  8:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weight_name)) != 0)) kw_args--;

#line 441 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, 8); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
        }

#line 441 "root_numpy/src/tree.pyx"
        case  9:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cache_size)) != 0)) kw_args--;

#line 441 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, 9); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
        }

#line 441 "root_numpy/src/tree.pyx"
        case 10:

#line 441 "root_numpy/src/tree.pyx"
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_warn_missing_tree)) != 0)) kw_args--;

#line 441 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, 10); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
        }

#line 441 "root_numpy/src/tree.pyx"
      }

#line 441 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 441 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "root2array_fromfile") < 0)) __PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
      }

#line 441 "root_numpy/src/tree.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {

#line 441 "root_numpy/src/tree.pyx"
      goto __pyx_L5_argtuple_error;

#line 441 "root_numpy/src/tree.pyx"
    } else {

#line 441 "root_numpy/src/tree.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 441 "root_numpy/src/tree.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 441 "root_numpy/src/tree.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 441 "root_numpy/src/tree.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 441 "root_numpy/src/tree.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 441 "root_numpy/src/tree.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 441 "root_numpy/src/tree.pyx"
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 441 "root_numpy/src/tree.pyx"
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

#line 441 "root_numpy/src/tree.pyx"
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);

#line 441 "root_numpy/src/tree.pyx"
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);

#line 441 "root_numpy/src/tree.pyx"
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);

#line 441 "root_numpy/src/tree.pyx"
    }

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_fnames = values[0];

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_treename = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_branches = values[2];

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_selection = values[3];

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_start = values[4];

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_stop = values[5];

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_step = values[6];

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_include_weight = __Pyx_PyObject_IsTrue(values[7]); if (unlikely((__pyx_v_include_weight == (bool)-1) && PyErr_Occurred())) __PYX_ERR(2, 443, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_weight_name = __pyx_convert_string_from_py_std__in_string(values[8]); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 443, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_cache_size = __Pyx_PyInt_As_long(values[9]); if (unlikely((__pyx_v_cache_size == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 444, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
    __pyx_v_warn_missing_tree = __Pyx_PyObject_IsTrue(values[10]); if (unlikely((__pyx_v_warn_missing_tree == (bool)-1) && PyErr_Occurred())) __PYX_ERR(2, 444, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
  }

#line 441 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 441 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("root2array_fromfile", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); 
#line 441 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 441, __pyx_L3_error)

#line 441 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.root2array_fromfile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 441 "root_numpy/src/tree.pyx"
  return NULL;

#line 441 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 441 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_12root2array_fromfile(__pyx_self, __pyx_v_fnames, __pyx_v_treename, __pyx_v_branches, __pyx_v_selection, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name, __pyx_v_cache_size, __pyx_v_warn_missing_tree);

#line 441 "root_numpy/src/tree.pyx"


#line 441 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 441 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 441 "root_numpy/src/tree.pyx"
}

#line 441 "root_numpy/src/tree.pyx"


#line 441 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_12root2array_fromfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnames, std::string __pyx_v_treename, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, bool __pyx_v_include_weight, std::string __pyx_v_weight_name, long __pyx_v_cache_size, bool __pyx_v_warn_missing_tree) {
  TChain *__pyx_v_chain
#line 441 "root_numpy/src/tree.pyx"
;
  TFile *__pyx_v_file
#line 441 "root_numpy/src/tree.pyx"
;
  TTree *__pyx_v_tree
#line 441 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_fn = NULL
#line 441 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_ret = NULL
#line 441 "root_numpy/src/tree.pyx"
;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  Py_ssize_t __pyx_t_2;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *(*__pyx_t_3)(PyObject *);

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  int __pyx_t_5;

#line 441 "root_numpy/src/tree.pyx"
  const char *__pyx_t_6;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  Py_ssize_t __pyx_t_12;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_13 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  std::string __pyx_t_14;

#line 441 "root_numpy/src/tree.pyx"
  std::string __pyx_t_15;

#line 441 "root_numpy/src/tree.pyx"
  int __pyx_t_16;

#line 441 "root_numpy/src/tree.pyx"
  int __pyx_t_17;

#line 441 "root_numpy/src/tree.pyx"
  char const *__pyx_t_18;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_19 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_20 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_21 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_22 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_23 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_24 = NULL;

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("root2array_fromfile", 0);

  /* "root_numpy/src/tree.pyx":445
 *                         bool include_weight, string weight_name,
 *                         long cache_size, bool warn_missing_tree):
 *     cdef TChain* chain = NULL             # <<<<<<<<<<<<<<
 *     cdef TFile* file = NULL
 *     cdef TTree* tree = NULL
 */

#line 445 "root_numpy/src/tree.pyx"
  __pyx_v_chain = NULL;

  /* "root_numpy/src/tree.pyx":446
 *                         long cache_size, bool warn_missing_tree):
 *     cdef TChain* chain = NULL
 *     cdef TFile* file = NULL             # <<<<<<<<<<<<<<
 *     cdef TTree* tree = NULL
 *     try:
 */

#line 446 "root_numpy/src/tree.pyx"
  __pyx_v_file = NULL;

  /* "root_numpy/src/tree.pyx":447
 *     cdef TChain* chain = NULL
 *     cdef TFile* file = NULL
 *     cdef TTree* tree = NULL             # <<<<<<<<<<<<<<
 *     try:
 *         chain = new TChain(treename.c_str())
 */

#line 447 "root_numpy/src/tree.pyx"
  __pyx_v_tree = NULL;

  /* "root_numpy/src/tree.pyx":448
 *     cdef TFile* file = NULL
 *     cdef TTree* tree = NULL
 *     try:             # <<<<<<<<<<<<<<
 *         chain = new TChain(treename.c_str())
 *         for fn in fnames:
 */

#line 448 "root_numpy/src/tree.pyx"
  /*try:*/ {

    /* "root_numpy/src/tree.pyx":449
 *     cdef TTree* tree = NULL
 *     try:
 *         chain = new TChain(treename.c_str())             # <<<<<<<<<<<<<<
 *         for fn in fnames:
 *             if warn_missing_tree:
 */

#line 449 "root_numpy/src/tree.pyx"
    __pyx_v_chain = new TChain(__pyx_v_treename.c_str());

    /* "root_numpy/src/tree.pyx":450
 *     try:
 *         chain = new TChain(treename.c_str())
 *         for fn in fnames:             # <<<<<<<<<<<<<<
 *             if warn_missing_tree:
 *                 file = Open(fn, 'read')
 */

#line 450 "root_numpy/src/tree.pyx"
    if (likely(PyList_CheckExact(__pyx_v_fnames)) || PyTuple_CheckExact(__pyx_v_fnames)) {

#line 450 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __pyx_v_fnames; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 450 "root_numpy/src/tree.pyx"
      __pyx_t_3 = NULL;

#line 450 "root_numpy/src/tree.pyx"
    } else {
      __pyx_t_2 = -1; 
#line 450 "root_numpy/src/tree.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_v_fnames); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 450, __pyx_L4_error)

#line 450 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 450 "root_numpy/src/tree.pyx"
      __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 450, __pyx_L4_error)

#line 450 "root_numpy/src/tree.pyx"
    }

#line 450 "root_numpy/src/tree.pyx"
    for (;;) {

#line 450 "root_numpy/src/tree.pyx"
      if (likely(!__pyx_t_3)) {

#line 450 "root_numpy/src/tree.pyx"
        if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 450 "root_numpy/src/tree.pyx"
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 450 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 450 "root_numpy/src/tree.pyx"
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 450, __pyx_L4_error)

#line 450 "root_numpy/src/tree.pyx"
          #else

#line 450 "root_numpy/src/tree.pyx"
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 450, __pyx_L4_error)

#line 450 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 450 "root_numpy/src/tree.pyx"
          #endif

#line 450 "root_numpy/src/tree.pyx"
        } else {

#line 450 "root_numpy/src/tree.pyx"
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 450 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 450 "root_numpy/src/tree.pyx"
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 450, __pyx_L4_error)

#line 450 "root_numpy/src/tree.pyx"
          #else

#line 450 "root_numpy/src/tree.pyx"
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 450, __pyx_L4_error)

#line 450 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 450 "root_numpy/src/tree.pyx"
          #endif

#line 450 "root_numpy/src/tree.pyx"
        }
      } else 
#line 450 "root_numpy/src/tree.pyx"
{

#line 450 "root_numpy/src/tree.pyx"
        __pyx_t_4 = __pyx_t_3(__pyx_t_1);

#line 450 "root_numpy/src/tree.pyx"
        if (unlikely(!__pyx_t_4)) {

#line 450 "root_numpy/src/tree.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 450 "root_numpy/src/tree.pyx"
          if (exc_type) {

#line 450 "root_numpy/src/tree.pyx"
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 450 "root_numpy/src/tree.pyx"
            else __PYX_ERR(2, 450, __pyx_L4_error)

#line 450 "root_numpy/src/tree.pyx"
          }

#line 450 "root_numpy/src/tree.pyx"
          break;

#line 450 "root_numpy/src/tree.pyx"
        }

#line 450 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 450 "root_numpy/src/tree.pyx"
      }

#line 450 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF_SET(__pyx_v_fn, __pyx_t_4);

#line 450 "root_numpy/src/tree.pyx"
      __pyx_t_4 = 0;

      /* "root_numpy/src/tree.pyx":451
 *         chain = new TChain(treename.c_str())
 *         for fn in fnames:
 *             if warn_missing_tree:             # <<<<<<<<<<<<<<
 *                 file = Open(fn, 'read')
 *                 if file == NULL:
 */

#line 451 "root_numpy/src/tree.pyx"
      __pyx_t_5 = (__pyx_v_warn_missing_tree != 0);

#line 451 "root_numpy/src/tree.pyx"
      if (__pyx_t_5) {

        /* "root_numpy/src/tree.pyx":452
 *         for fn in fnames:
 *             if warn_missing_tree:
 *                 file = Open(fn, 'read')             # <<<<<<<<<<<<<<
 *                 if file == NULL:
 *                     raise IOError("cannot open file {0}".format(fn))
 */

#line 452 "root_numpy/src/tree.pyx"
        __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_fn); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(2, 452, __pyx_L4_error)

#line 452 "root_numpy/src/tree.pyx"
        __pyx_v_file = TFile::Open(__pyx_t_6, ((const char *)"read"));

        /* "root_numpy/src/tree.pyx":453
 *             if warn_missing_tree:
 *                 file = Open(fn, 'read')
 *                 if file == NULL:             # <<<<<<<<<<<<<<
 *                     raise IOError("cannot open file {0}".format(fn))
 *                 tree = <TTree*> file.Get(treename.c_str())
 */

#line 453 "root_numpy/src/tree.pyx"
        __pyx_t_5 = ((__pyx_v_file == NULL) != 0);

#line 453 "root_numpy/src/tree.pyx"
        if (__pyx_t_5) {

          /* "root_numpy/src/tree.pyx":454
 *                 file = Open(fn, 'read')
 *                 if file == NULL:
 *                     raise IOError("cannot open file {0}".format(fn))             # <<<<<<<<<<<<<<
 *                 tree = <TTree*> file.Get(treename.c_str())
 *                 if tree == NULL:
 */

#line 454 "root_numpy/src/tree.pyx"
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_open_file_0, __pyx_n_s_format); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 454, __pyx_L4_error)

#line 454 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 454 "root_numpy/src/tree.pyx"
          __pyx_t_8 = NULL;

#line 454 "root_numpy/src/tree.pyx"
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {

#line 454 "root_numpy/src/tree.pyx"
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);

#line 454 "root_numpy/src/tree.pyx"
            if (likely(__pyx_t_8)) {

#line 454 "root_numpy/src/tree.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 454 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_t_8);

#line 454 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(function);

#line 454 "root_numpy/src/tree.pyx"
              __Pyx_DECREF_SET(__pyx_t_7, function);

#line 454 "root_numpy/src/tree.pyx"
            }

#line 454 "root_numpy/src/tree.pyx"
          }

#line 454 "root_numpy/src/tree.pyx"
          if (!__pyx_t_8) {

#line 454 "root_numpy/src/tree.pyx"
            __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_fn); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 454, __pyx_L4_error)

#line 454 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_4);

#line 454 "root_numpy/src/tree.pyx"
          } else {

#line 454 "root_numpy/src/tree.pyx"
            __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 454, __pyx_L4_error)

#line 454 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 454 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 454 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_v_fn);

#line 454 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_v_fn);

#line 454 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_fn);

#line 454 "root_numpy/src/tree.pyx"
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 454, __pyx_L4_error)

#line 454 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_4);

#line 454 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 454 "root_numpy/src/tree.pyx"
          }

#line 454 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 454 "root_numpy/src/tree.pyx"
          __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 454, __pyx_L4_error)

#line 454 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 454 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_4);

#line 454 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);

#line 454 "root_numpy/src/tree.pyx"
          __pyx_t_4 = 0;

#line 454 "root_numpy/src/tree.pyx"
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 454, __pyx_L4_error)

#line 454 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 454 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 454 "root_numpy/src/tree.pyx"
          __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 454 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 454 "root_numpy/src/tree.pyx"
          __PYX_ERR(2, 454, __pyx_L4_error)

          /* "root_numpy/src/tree.pyx":453
 *             if warn_missing_tree:
 *                 file = Open(fn, 'read')
 *                 if file == NULL:             # <<<<<<<<<<<<<<
 *                     raise IOError("cannot open file {0}".format(fn))
 *                 tree = <TTree*> file.Get(treename.c_str())
 */

#line 453 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":455
 *                 if file == NULL:
 *                     raise IOError("cannot open file {0}".format(fn))
 *                 tree = <TTree*> file.Get(treename.c_str())             # <<<<<<<<<<<<<<
 *                 if tree == NULL:
 *                     # skip this file
 */

#line 455 "root_numpy/src/tree.pyx"
        __pyx_v_tree = ((TTree *)__pyx_v_file->Get(__pyx_v_treename.c_str()));

        /* "root_numpy/src/tree.pyx":456
 *                     raise IOError("cannot open file {0}".format(fn))
 *                 tree = <TTree*> file.Get(treename.c_str())
 *                 if tree == NULL:             # <<<<<<<<<<<<<<
 *                     # skip this file
 *                     warnings.warn("tree '{0}' not found in {1}".format(treename, fn),
 */

#line 456 "root_numpy/src/tree.pyx"
        __pyx_t_5 = ((__pyx_v_tree == NULL) != 0);

#line 456 "root_numpy/src/tree.pyx"
        if (__pyx_t_5) {

          /* "root_numpy/src/tree.pyx":458
 *                 if tree == NULL:
 *                     # skip this file
 *                     warnings.warn("tree '{0}' not found in {1}".format(treename, fn),             # <<<<<<<<<<<<<<
 *                                   RuntimeWarning)
 *                     file.Close()
 */

#line 458 "root_numpy/src/tree.pyx"
          __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 458, __pyx_L4_error)

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 458 "root_numpy/src/tree.pyx"
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_warn); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 458, __pyx_L4_error)

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 458 "root_numpy/src/tree.pyx"
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_tree_0_not_found_in_1, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 458, __pyx_L4_error)

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 458 "root_numpy/src/tree.pyx"
          __pyx_t_10 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_treename); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 458, __pyx_L4_error)

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_10);

#line 458 "root_numpy/src/tree.pyx"
          __pyx_t_11 = NULL;

#line 458 "root_numpy/src/tree.pyx"
          __pyx_t_12 = 0;

#line 458 "root_numpy/src/tree.pyx"
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {

#line 458 "root_numpy/src/tree.pyx"
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);

#line 458 "root_numpy/src/tree.pyx"
            if (likely(__pyx_t_11)) {

#line 458 "root_numpy/src/tree.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 458 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_t_11);

#line 458 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(function);

#line 458 "root_numpy/src/tree.pyx"
              __Pyx_DECREF_SET(__pyx_t_8, function);

#line 458 "root_numpy/src/tree.pyx"
              __pyx_t_12 = 1;

#line 458 "root_numpy/src/tree.pyx"
            }

#line 458 "root_numpy/src/tree.pyx"
          }

#line 458 "root_numpy/src/tree.pyx"
          __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 458, __pyx_L4_error)

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_13);

#line 458 "root_numpy/src/tree.pyx"
          if (__pyx_t_11) {

#line 458 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;

#line 458 "root_numpy/src/tree.pyx"
          }

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_10);

#line 458 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_10);

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(__pyx_v_fn);

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_v_fn);

#line 458 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_v_fn);

#line 458 "root_numpy/src/tree.pyx"
          __pyx_t_10 = 0;

#line 458 "root_numpy/src/tree.pyx"
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_13, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 458, __pyx_L4_error)

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 458 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "root_numpy/src/tree.pyx":459
 *                     # skip this file
 *                     warnings.warn("tree '{0}' not found in {1}".format(treename, fn),
 *                                   RuntimeWarning)             # <<<<<<<<<<<<<<
 *                     file.Close()
 *                     continue
 */

#line 459 "root_numpy/src/tree.pyx"
          __pyx_t_8 = NULL;

#line 459 "root_numpy/src/tree.pyx"
          __pyx_t_12 = 0;

#line 459 "root_numpy/src/tree.pyx"
          if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {

#line 459 "root_numpy/src/tree.pyx"
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);

#line 459 "root_numpy/src/tree.pyx"
            if (likely(__pyx_t_8)) {

#line 459 "root_numpy/src/tree.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);

#line 459 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_t_8);

#line 459 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(function);

#line 459 "root_numpy/src/tree.pyx"
              __Pyx_DECREF_SET(__pyx_t_9, function);

#line 459 "root_numpy/src/tree.pyx"
              __pyx_t_12 = 1;

#line 459 "root_numpy/src/tree.pyx"
            }

#line 459 "root_numpy/src/tree.pyx"
          }

#line 459 "root_numpy/src/tree.pyx"
          __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 458, __pyx_L4_error)

#line 459 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_13);

#line 459 "root_numpy/src/tree.pyx"
          if (__pyx_t_8) {

#line 459 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 459 "root_numpy/src/tree.pyx"
          }

#line 459 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_7);

#line 459 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_7);

#line 459 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(__pyx_builtin_RuntimeWarning);

#line 459 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_builtin_RuntimeWarning);

#line 459 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_builtin_RuntimeWarning);

#line 459 "root_numpy/src/tree.pyx"
          __pyx_t_7 = 0;

#line 459 "root_numpy/src/tree.pyx"
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 458, __pyx_L4_error)

#line 459 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_4);

#line 459 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 459 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 459 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "root_numpy/src/tree.pyx":460
 *                     warnings.warn("tree '{0}' not found in {1}".format(treename, fn),
 *                                   RuntimeWarning)
 *                     file.Close()             # <<<<<<<<<<<<<<
 *                     continue
 *                 del tree
 */

#line 460 "root_numpy/src/tree.pyx"
          __pyx_v_file->Close();

          /* "root_numpy/src/tree.pyx":461
 *                                   RuntimeWarning)
 *                     file.Close()
 *                     continue             # <<<<<<<<<<<<<<
 *                 del tree
 *                 file.Close()
 */

#line 461 "root_numpy/src/tree.pyx"
          goto __pyx_L6_continue;

          /* "root_numpy/src/tree.pyx":456
 *                     raise IOError("cannot open file {0}".format(fn))
 *                 tree = <TTree*> file.Get(treename.c_str())
 *                 if tree == NULL:             # <<<<<<<<<<<<<<
 *                     # skip this file
 *                     warnings.warn("tree '{0}' not found in {1}".format(treename, fn),
 */

#line 456 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":462
 *                     file.Close()
 *                     continue
 *                 del tree             # <<<<<<<<<<<<<<
 *                 file.Close()
 *             if chain.Add(fn, -1) == 0:
 */

#line 462 "root_numpy/src/tree.pyx"
        delete __pyx_v_tree;

        /* "root_numpy/src/tree.pyx":463
 *                     continue
 *                 del tree
 *                 file.Close()             # <<<<<<<<<<<<<<
 *             if chain.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 */

#line 463 "root_numpy/src/tree.pyx"
        __pyx_v_file->Close();

        /* "root_numpy/src/tree.pyx":451
 *         chain = new TChain(treename.c_str())
 *         for fn in fnames:
 *             if warn_missing_tree:             # <<<<<<<<<<<<<<
 *                 file = Open(fn, 'read')
 *                 if file == NULL:
 */

#line 451 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":464
 *                 del tree
 *                 file.Close()
 *             if chain.Add(fn, -1) == 0:             # <<<<<<<<<<<<<<
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))
 */

#line 464 "root_numpy/src/tree.pyx"
      __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_fn); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(2, 464, __pyx_L4_error)

#line 464 "root_numpy/src/tree.pyx"
      __pyx_t_5 = ((__pyx_v_chain->Add(__pyx_t_6, -1LL) == 0) != 0);

#line 464 "root_numpy/src/tree.pyx"
      if (__pyx_t_5) {

        /* "root_numpy/src/tree.pyx":465
 *                 file.Close()
 *             if chain.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(             # <<<<<<<<<<<<<<
 *                     treename, fn))
 *         if chain.GetNtrees() == 0:
 */

#line 465 "root_numpy/src/tree.pyx"
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_unable_to_access_tree_0_in_1, __pyx_n_s_format); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 465, __pyx_L4_error)

#line 465 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_9);

        /* "root_numpy/src/tree.pyx":466
 *             if chain.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))             # <<<<<<<<<<<<<<
 *         if chain.GetNtrees() == 0:
 *             raise IOError("none of the input files contain "
 */

#line 466 "root_numpy/src/tree.pyx"
        __pyx_t_13 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_treename); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 466, __pyx_L4_error)

#line 466 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_13);

#line 466 "root_numpy/src/tree.pyx"
        __pyx_t_7 = NULL;

#line 466 "root_numpy/src/tree.pyx"
        __pyx_t_12 = 0;

#line 466 "root_numpy/src/tree.pyx"
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_9))) {

#line 466 "root_numpy/src/tree.pyx"
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);

#line 466 "root_numpy/src/tree.pyx"
          if (likely(__pyx_t_7)) {

#line 466 "root_numpy/src/tree.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);

#line 466 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_7);

#line 466 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(function);

#line 466 "root_numpy/src/tree.pyx"
            __Pyx_DECREF_SET(__pyx_t_9, function);

#line 466 "root_numpy/src/tree.pyx"
            __pyx_t_12 = 1;

#line 466 "root_numpy/src/tree.pyx"
          }

#line 466 "root_numpy/src/tree.pyx"
        }

#line 466 "root_numpy/src/tree.pyx"
        __pyx_t_8 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 465, __pyx_L4_error)

#line 466 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 466 "root_numpy/src/tree.pyx"
        if (__pyx_t_7) {

#line 466 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;

#line 466 "root_numpy/src/tree.pyx"
        }

#line 466 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_13);

#line 466 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_12, __pyx_t_13);

#line 466 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_v_fn);

#line 466 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_v_fn);

#line 466 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_12, __pyx_v_fn);

#line 466 "root_numpy/src/tree.pyx"
        __pyx_t_13 = 0;

#line 466 "root_numpy/src/tree.pyx"
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 465, __pyx_L4_error)

#line 466 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 466 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 466 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "root_numpy/src/tree.pyx":465
 *                 file.Close()
 *             if chain.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(             # <<<<<<<<<<<<<<
 *                     treename, fn))
 *         if chain.GetNtrees() == 0:
 */

#line 465 "root_numpy/src/tree.pyx"
        __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 465, __pyx_L4_error)

#line 465 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 465 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_4);

#line 465 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);

#line 465 "root_numpy/src/tree.pyx"
        __pyx_t_4 = 0;

#line 465 "root_numpy/src/tree.pyx"
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 465, __pyx_L4_error)

#line 465 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 465 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 465 "root_numpy/src/tree.pyx"
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 465 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 465 "root_numpy/src/tree.pyx"
        __PYX_ERR(2, 465, __pyx_L4_error)

        /* "root_numpy/src/tree.pyx":464
 *                 del tree
 *                 file.Close()
 *             if chain.Add(fn, -1) == 0:             # <<<<<<<<<<<<<<
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))
 */

#line 464 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":450
 *     try:
 *         chain = new TChain(treename.c_str())
 *         for fn in fnames:             # <<<<<<<<<<<<<<
 *             if warn_missing_tree:
 *                 file = Open(fn, 'read')
 */

#line 450 "root_numpy/src/tree.pyx"
      __pyx_L6_continue:;

#line 450 "root_numpy/src/tree.pyx"
    }

#line 450 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "root_numpy/src/tree.pyx":467
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))
 *         if chain.GetNtrees() == 0:             # <<<<<<<<<<<<<<
 *             raise IOError("none of the input files contain "
 *                           "the requested tree '{0}'".format(treename))
 */

#line 467 "root_numpy/src/tree.pyx"
    __pyx_t_5 = ((__pyx_v_chain->GetNtrees() == 0) != 0);

#line 467 "root_numpy/src/tree.pyx"
    if (__pyx_t_5) {

      /* "root_numpy/src/tree.pyx":469
 *         if chain.GetNtrees() == 0:
 *             raise IOError("none of the input files contain "
 *                           "the requested tree '{0}'".format(treename))             # <<<<<<<<<<<<<<
 *         ret = tree2array(
 *             <TTree*> chain, True, branches,
 */

#line 469 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_none_of_the_input_files_contain, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 469, __pyx_L4_error)

#line 469 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 469 "root_numpy/src/tree.pyx"
      __pyx_t_9 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_treename); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 469, __pyx_L4_error)

#line 469 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 469 "root_numpy/src/tree.pyx"
      __pyx_t_8 = NULL;

#line 469 "root_numpy/src/tree.pyx"
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 469 "root_numpy/src/tree.pyx"
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);

#line 469 "root_numpy/src/tree.pyx"
        if (likely(__pyx_t_8)) {

#line 469 "root_numpy/src/tree.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 469 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(__pyx_t_8);

#line 469 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(function);

#line 469 "root_numpy/src/tree.pyx"
          __Pyx_DECREF_SET(__pyx_t_4, function);

#line 469 "root_numpy/src/tree.pyx"
        }

#line 469 "root_numpy/src/tree.pyx"
      }

#line 469 "root_numpy/src/tree.pyx"
      if (!__pyx_t_8) {

#line 469 "root_numpy/src/tree.pyx"
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 469, __pyx_L4_error)

#line 469 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 469 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 469 "root_numpy/src/tree.pyx"
      } else {

#line 469 "root_numpy/src/tree.pyx"
        __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 469, __pyx_L4_error)

#line 469 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_13);

#line 469 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 469 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_9);

#line 469 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_9);

#line 469 "root_numpy/src/tree.pyx"
        __pyx_t_9 = 0;

#line 469 "root_numpy/src/tree.pyx"
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 469, __pyx_L4_error)

#line 469 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 469 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 469 "root_numpy/src/tree.pyx"
      }

#line 469 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "root_numpy/src/tree.pyx":468
 *                     treename, fn))
 *         if chain.GetNtrees() == 0:
 *             raise IOError("none of the input files contain "             # <<<<<<<<<<<<<<
 *                           "the requested tree '{0}'".format(treename))
 *         ret = tree2array(
 */

#line 468 "root_numpy/src/tree.pyx"
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 468, __pyx_L4_error)

#line 468 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 468 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 468 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 468 "root_numpy/src/tree.pyx"
      __pyx_t_1 = 0;

#line 468 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 468, __pyx_L4_error)

#line 468 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 468 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 468 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 468 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 468 "root_numpy/src/tree.pyx"
      __PYX_ERR(2, 468, __pyx_L4_error)

      /* "root_numpy/src/tree.pyx":467
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))
 *         if chain.GetNtrees() == 0:             # <<<<<<<<<<<<<<
 *             raise IOError("none of the input files contain "
 *                           "the requested tree '{0}'".format(treename))
 */

#line 467 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":472
 *         ret = tree2array(
 *             <TTree*> chain, True, branches,
 *             selection or '', start, stop, step,             # <<<<<<<<<<<<<<
 *             include_weight, weight_name, cache_size)
 *     finally:
 */

#line 472 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_selection); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(2, 472, __pyx_L4_error)

#line 472 "root_numpy/src/tree.pyx"
    if (!__pyx_t_5) {

#line 472 "root_numpy/src/tree.pyx"
    } else {

#line 472 "root_numpy/src/tree.pyx"
      __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_v_selection); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 472, __pyx_L4_error)

#line 472 "root_numpy/src/tree.pyx"
      __pyx_t_14 = __pyx_t_15;

#line 472 "root_numpy/src/tree.pyx"
      goto __pyx_L13_bool_binop_done;

#line 472 "root_numpy/src/tree.pyx"
    }

#line 472 "root_numpy/src/tree.pyx"
    __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_s__15); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 472, __pyx_L4_error)

#line 472 "root_numpy/src/tree.pyx"
    __pyx_t_14 = __pyx_t_15;

#line 472 "root_numpy/src/tree.pyx"
    __pyx_L13_bool_binop_done:;

    /* "root_numpy/src/tree.pyx":470
 *             raise IOError("none of the input files contain "
 *                           "the requested tree '{0}'".format(treename))
 *         ret = tree2array(             # <<<<<<<<<<<<<<
 *             <TTree*> chain, True, branches,
 *             selection or '', start, stop, step,
 */

#line 470 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __pyx_f_13_librootnumpy_tree2array(((TTree *)__pyx_v_chain), 1, __pyx_v_branches, __pyx_t_14, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name, __pyx_v_cache_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 470, __pyx_L4_error)

#line 470 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 470 "root_numpy/src/tree.pyx"
    __pyx_v_ret = __pyx_t_1;

#line 470 "root_numpy/src/tree.pyx"
    __pyx_t_1 = 0;

#line 470 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":475
 *             include_weight, weight_name, cache_size)
 *     finally:
 *         del chain             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */

#line 475 "root_numpy/src/tree.pyx"
  /*finally:*/ {

#line 475 "root_numpy/src/tree.pyx"
    /*normal exit:*/{

#line 475 "root_numpy/src/tree.pyx"
      delete __pyx_v_chain;

#line 475 "root_numpy/src/tree.pyx"
      goto __pyx_L5;

#line 475 "root_numpy/src/tree.pyx"
    }

#line 475 "root_numpy/src/tree.pyx"
    /*exception exit:*/{

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_declare

#line 475 "root_numpy/src/tree.pyx"
      __pyx_L4_error:;

#line 475 "root_numpy/src/tree.pyx"
      __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0;

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 475 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_22, &__pyx_t_23, &__pyx_t_24);

#line 475 "root_numpy/src/tree.pyx"
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_19);

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_20);

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_21);

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_22);

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_23);

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_24);

#line 475 "root_numpy/src/tree.pyx"
      __pyx_t_16 = __pyx_lineno; __pyx_t_17 = __pyx_clineno; __pyx_t_18 = __pyx_filename;

#line 475 "root_numpy/src/tree.pyx"
      {

#line 475 "root_numpy/src/tree.pyx"
        delete __pyx_v_chain;

#line 475 "root_numpy/src/tree.pyx"
      }

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 475 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) {

#line 475 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_22);

#line 475 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_23);

#line 475 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_24);

#line 475 "root_numpy/src/tree.pyx"
        __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_23, __pyx_t_24);

#line 475 "root_numpy/src/tree.pyx"
      }

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_19);

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_20);

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_21);

#line 475 "root_numpy/src/tree.pyx"
      __Pyx_ErrRestore(__pyx_t_19, __pyx_t_20, __pyx_t_21);

#line 475 "root_numpy/src/tree.pyx"
      __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0;

#line 475 "root_numpy/src/tree.pyx"
      __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_17; __pyx_filename = __pyx_t_18;

#line 475 "root_numpy/src/tree.pyx"
      goto __pyx_L1_error;

#line 475 "root_numpy/src/tree.pyx"
    }

#line 475 "root_numpy/src/tree.pyx"
    __pyx_L5:;

#line 475 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":476
 *     finally:
 *         del chain
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 476 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 476 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_ret);

#line 476 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_ret;

#line 476 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":441
 * 
 * 
 * def root2array_fromfile(fnames, string treename, branches,             # <<<<<<<<<<<<<<
 *                         selection, start, stop, step,
 *                         bool include_weight, string weight_name,
 */

#line 441 "root_numpy/src/tree.pyx"


#line 441 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 441 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.root2array_fromfile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 441 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 441 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_fn);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_ret);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 441 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 441 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":479
 * 
 * 
 * def root2array_fromtree(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         bool include_weight, string weight_name,
 */

#line 479 "root_numpy/src/tree.pyx"


#line 479 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 479 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_15root2array_fromtree(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_15root2array_fromtree = 
#line 479 "root_numpy/src/tree.pyx"
{"root2array_fromtree", (PyCFunction)__pyx_pw_13_librootnumpy_15root2array_fromtree, METH_VARARGS|METH_KEYWORDS, 0};

#line 479 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_15root2array_fromtree(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tree = 0
#line 479 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_branches = 0
#line 479 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_selection = 0
#line 479 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_start = 0
#line 479 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_stop = 0
#line 479 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_step = 0
#line 479 "root_numpy/src/tree.pyx"
;
  bool __pyx_v_include_weight
#line 479 "root_numpy/src/tree.pyx"
;
  std::string __pyx_v_weight_name
#line 479 "root_numpy/src/tree.pyx"
;
  long __pyx_v_cache_size
#line 479 "root_numpy/src/tree.pyx"
;

#line 479 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("root2array_fromtree (wrapper)", 0);

#line 479 "root_numpy/src/tree.pyx"
  {

#line 479 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_branches,&__pyx_n_s_selection,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_step,&__pyx_n_s_include_weight,&__pyx_n_s_weight_name,&__pyx_n_s_cache_size,0};

#line 479 "root_numpy/src/tree.pyx"
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

#line 479 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 479 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 479 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 479 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  9: 
#line 479 "root_numpy/src/tree.pyx"
values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: 
#line 479 "root_numpy/src/tree.pyx"
values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: 
#line 479 "root_numpy/src/tree.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: 
#line 479 "root_numpy/src/tree.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 479 "root_numpy/src/tree.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 479 "root_numpy/src/tree.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 479 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 479 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 479 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 479 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 479 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 479 "root_numpy/src/tree.pyx"
      }

#line 479 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 479 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 479 "root_numpy/src/tree.pyx"
        case  0:

#line 479 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
        else 
#line 479 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 479 "root_numpy/src/tree.pyx"
        case  1:

#line 479 "root_numpy/src/tree.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_branches)) != 0)) kw_args--;

#line 479 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromtree", 1, 9, 9, 1); 
#line 479 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 479, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
        }

#line 479 "root_numpy/src/tree.pyx"
        case  2:

#line 479 "root_numpy/src/tree.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_selection)) != 0)) kw_args--;

#line 479 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromtree", 1, 9, 9, 2); 
#line 479 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 479, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
        }

#line 479 "root_numpy/src/tree.pyx"
        case  3:

#line 479 "root_numpy/src/tree.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;

#line 479 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromtree", 1, 9, 9, 3); 
#line 479 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 479, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
        }

#line 479 "root_numpy/src/tree.pyx"
        case  4:

#line 479 "root_numpy/src/tree.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stop)) != 0)) kw_args--;

#line 479 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromtree", 1, 9, 9, 4); 
#line 479 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 479, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
        }

#line 479 "root_numpy/src/tree.pyx"
        case  5:

#line 479 "root_numpy/src/tree.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step)) != 0)) kw_args--;

#line 479 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromtree", 1, 9, 9, 5); 
#line 479 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 479, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
        }

#line 479 "root_numpy/src/tree.pyx"
        case  6:

#line 479 "root_numpy/src/tree.pyx"
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_include_weight)) != 0)) kw_args--;

#line 479 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromtree", 1, 9, 9, 6); 
#line 479 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 479, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
        }

#line 479 "root_numpy/src/tree.pyx"
        case  7:

#line 479 "root_numpy/src/tree.pyx"
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weight_name)) != 0)) kw_args--;

#line 479 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromtree", 1, 9, 9, 7); 
#line 479 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 479, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
        }

#line 479 "root_numpy/src/tree.pyx"
        case  8:

#line 479 "root_numpy/src/tree.pyx"
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cache_size)) != 0)) kw_args--;

#line 479 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromtree", 1, 9, 9, 8); 
#line 479 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 479, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
        }

#line 479 "root_numpy/src/tree.pyx"
      }

#line 479 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 479 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "root2array_fromtree") < 0)) __PYX_ERR(2, 479, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
      }

#line 479 "root_numpy/src/tree.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {

#line 479 "root_numpy/src/tree.pyx"
      goto __pyx_L5_argtuple_error;

#line 479 "root_numpy/src/tree.pyx"
    } else {

#line 479 "root_numpy/src/tree.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 479 "root_numpy/src/tree.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 479 "root_numpy/src/tree.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 479 "root_numpy/src/tree.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 479 "root_numpy/src/tree.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 479 "root_numpy/src/tree.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 479 "root_numpy/src/tree.pyx"
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 479 "root_numpy/src/tree.pyx"
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

#line 479 "root_numpy/src/tree.pyx"
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);

#line 479 "root_numpy/src/tree.pyx"
    }

#line 479 "root_numpy/src/tree.pyx"
    __pyx_v_tree = values[0];

#line 479 "root_numpy/src/tree.pyx"
    __pyx_v_branches = values[1];

#line 479 "root_numpy/src/tree.pyx"
    __pyx_v_selection = values[2];

#line 479 "root_numpy/src/tree.pyx"
    __pyx_v_start = values[3];

#line 479 "root_numpy/src/tree.pyx"
    __pyx_v_stop = values[4];

#line 479 "root_numpy/src/tree.pyx"
    __pyx_v_step = values[5];

#line 479 "root_numpy/src/tree.pyx"
    __pyx_v_include_weight = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_include_weight == (bool)-1) && PyErr_Occurred())) __PYX_ERR(2, 481, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
    __pyx_v_weight_name = __pyx_convert_string_from_py_std__in_string(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 481, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
    __pyx_v_cache_size = __Pyx_PyInt_As_long(values[8]); if (unlikely((__pyx_v_cache_size == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 482, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
  }

#line 479 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 479 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("root2array_fromtree", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); 
#line 479 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 479, __pyx_L3_error)

#line 479 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.root2array_fromtree", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 479 "root_numpy/src/tree.pyx"
  return NULL;

#line 479 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 479 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_14root2array_fromtree(__pyx_self, __pyx_v_tree, __pyx_v_branches, __pyx_v_selection, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name, __pyx_v_cache_size);

#line 479 "root_numpy/src/tree.pyx"


#line 479 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 479 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 479 "root_numpy/src/tree.pyx"
}

#line 479 "root_numpy/src/tree.pyx"


#line 479 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_14root2array_fromtree(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, bool __pyx_v_include_weight, std::string __pyx_v_weight_name, long __pyx_v_cache_size) {
  TTree *__pyx_v_rtree
#line 479 "root_numpy/src/tree.pyx"
;

#line 479 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 479 "root_numpy/src/tree.pyx"
  void *__pyx_t_1;

#line 479 "root_numpy/src/tree.pyx"
  std::string __pyx_t_2;

#line 479 "root_numpy/src/tree.pyx"
  int __pyx_t_3;

#line 479 "root_numpy/src/tree.pyx"
  std::string __pyx_t_4;

#line 479 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("root2array_fromtree", 0);

  /* "root_numpy/src/tree.pyx":483
 *                         bool include_weight, string weight_name,
 *                         long cache_size):
 *     cdef TTree* rtree = <TTree*> PyCObject_AsVoidPtr(tree)             # <<<<<<<<<<<<<<
 *     return tree2array(
 *         rtree, False, branches,
 */

#line 483 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_tree); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(2, 483, __pyx_L1_error)

#line 483 "root_numpy/src/tree.pyx"
  __pyx_v_rtree = ((TTree *)__pyx_t_1);

  /* "root_numpy/src/tree.pyx":484
 *                         long cache_size):
 *     cdef TTree* rtree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     return tree2array(             # <<<<<<<<<<<<<<
 *         rtree, False, branches,
 *         selection or '', start, stop, step,
 */

#line 484 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

  /* "root_numpy/src/tree.pyx":486
 *     return tree2array(
 *         rtree, False, branches,
 *         selection or '', start, stop, step,             # <<<<<<<<<<<<<<
 *         include_weight, weight_name, cache_size)
 * 
 */

#line 486 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_selection); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(2, 486, __pyx_L1_error)

#line 486 "root_numpy/src/tree.pyx"
  if (!__pyx_t_3) {

#line 486 "root_numpy/src/tree.pyx"
  } else {

#line 486 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_selection); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 486, __pyx_L1_error)

#line 486 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __pyx_t_4;

#line 486 "root_numpy/src/tree.pyx"
    goto __pyx_L3_bool_binop_done;

#line 486 "root_numpy/src/tree.pyx"
  }

#line 486 "root_numpy/src/tree.pyx"
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_s__15); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 486, __pyx_L1_error)

#line 486 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __pyx_t_4;

#line 486 "root_numpy/src/tree.pyx"
  __pyx_L3_bool_binop_done:;

  /* "root_numpy/src/tree.pyx":484
 *                         long cache_size):
 *     cdef TTree* rtree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     return tree2array(             # <<<<<<<<<<<<<<
 *         rtree, False, branches,
 *         selection or '', start, stop, step,
 */

#line 484 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __pyx_f_13_librootnumpy_tree2array(__pyx_v_rtree, 0, __pyx_v_branches, __pyx_t_2, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name, __pyx_v_cache_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 484, __pyx_L1_error)

#line 484 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 484 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_5;

#line 484 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 484 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":479
 * 
 * 
 * def root2array_fromtree(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         bool include_weight, string weight_name,
 */

#line 479 "root_numpy/src/tree.pyx"


#line 479 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 479 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.root2array_fromtree", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 479 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 479 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 479 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 479 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":490
 * 
 * 
 * cdef TTree* array2tree(np.ndarray arr, string name='tree', TTree* tree=NULL) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[NP2ROOTConverter*] converters
 *     cdef NP2ROOTConverter* cvt
 */

#line 490 "root_numpy/src/tree.pyx"


#line 490 "root_numpy/src/tree.pyx"
static TTree *__pyx_f_13_librootnumpy_array2tree(PyArrayObject *__pyx_v_arr, struct __pyx_opt_args_13_librootnumpy_array2tree *__pyx_optional_args) {

#line 490 "root_numpy/src/tree.pyx"
  std::string __pyx_v_name = __pyx_k__38;

#line 490 "root_numpy/src/tree.pyx"
  TTree *__pyx_v_tree = ((TTree *)NULL);
  std::vector<__pyx_t_13_librootnumpy_NP2ROOTConverter *>  __pyx_v_converters
#line 490 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_NP2ROOTConverter *__pyx_v_cvt
#line 490 "root_numpy/src/tree.pyx"
;
  std::vector<int>  __pyx_v_roffsetarray
#line 490 "root_numpy/src/tree.pyx"
;
  int __pyx_v_roffset
#line 490 "root_numpy/src/tree.pyx"
;
  unsigned int __pyx_v_icol
#line 490 "root_numpy/src/tree.pyx"
;
  unsigned int __pyx_v_num_cols
#line 490 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_arr_len
#line 490 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_idata
#line 490 "root_numpy/src/tree.pyx"
;
  void *__pyx_v_source
#line 490 "root_numpy/src/tree.pyx"
;
  void *__pyx_v_thisrow
#line 490 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_fieldnames = NULL
#line 490 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_fields = NULL
#line 490 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_fieldname = NULL
#line 490 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_dtype = NULL
#line 490 "root_numpy/src/tree.pyx"
;

#line 490 "root_numpy/src/tree.pyx"
  TTree *__pyx_r;

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  int __pyx_t_4;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  Py_ssize_t __pyx_t_7;

#line 490 "root_numpy/src/tree.pyx"
  unsigned int __pyx_t_8;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *(*__pyx_t_11)(PyObject *);

#line 490 "root_numpy/src/tree.pyx"
  int __pyx_t_12;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_13 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_14 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_15;

#line 490 "root_numpy/src/tree.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_16;

#line 490 "root_numpy/src/tree.pyx"
  unsigned int __pyx_t_17;

#line 490 "root_numpy/src/tree.pyx"
  size_t __pyx_t_18;

#line 490 "root_numpy/src/tree.pyx"
  int __pyx_t_19;

#line 490 "root_numpy/src/tree.pyx"
  char const *__pyx_t_20;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_21 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_22 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_23 = NULL;

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("array2tree", 0);

#line 490 "root_numpy/src/tree.pyx"
  if (__pyx_optional_args) {

#line 490 "root_numpy/src/tree.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 490 "root_numpy/src/tree.pyx"
      __pyx_v_name = __pyx_optional_args->name;

#line 490 "root_numpy/src/tree.pyx"
      if (__pyx_optional_args->__pyx_n > 1) {

#line 490 "root_numpy/src/tree.pyx"
        __pyx_v_tree = __pyx_optional_args->tree;

#line 490 "root_numpy/src/tree.pyx"
      }

#line 490 "root_numpy/src/tree.pyx"
    }

#line 490 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":497
 *     cdef unsigned int icol
 *     cdef unsigned int num_cols
 *     cdef SIZE_t arr_len = arr.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t idata
 *     cdef void* source = NULL
 */

#line 497 "root_numpy/src/tree.pyx"
  __pyx_v_arr_len = (__pyx_v_arr->dimensions[0]);

  /* "root_numpy/src/tree.pyx":499
 *     cdef SIZE_t arr_len = arr.shape[0]
 *     cdef SIZE_t idata
 *     cdef void* source = NULL             # <<<<<<<<<<<<<<
 *     cdef void* thisrow = NULL
 * 
 */

#line 499 "root_numpy/src/tree.pyx"
  __pyx_v_source = NULL;

  /* "root_numpy/src/tree.pyx":500
 *     cdef SIZE_t idata
 *     cdef void* source = NULL
 *     cdef void* thisrow = NULL             # <<<<<<<<<<<<<<
 * 
 *     try:
 */

#line 500 "root_numpy/src/tree.pyx"
  __pyx_v_thisrow = NULL;

  /* "root_numpy/src/tree.pyx":502
 *     cdef void* thisrow = NULL
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if tree == NULL:
 *             tree = new TTree(name.c_str(), name.c_str())
 */

#line 502 "root_numpy/src/tree.pyx"
  /*try:*/ {

#line 502 "root_numpy/src/tree.pyx"
    {

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_declare

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_1);

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_2);

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_3);

#line 502 "root_numpy/src/tree.pyx"
      /*try:*/ {

        /* "root_numpy/src/tree.pyx":503
 * 
 *     try:
 *         if tree == NULL:             # <<<<<<<<<<<<<<
 *             tree = new TTree(name.c_str(), name.c_str())
 * 
 */

#line 503 "root_numpy/src/tree.pyx"
        __pyx_t_4 = ((__pyx_v_tree == NULL) != 0);

#line 503 "root_numpy/src/tree.pyx"
        if (__pyx_t_4) {

          /* "root_numpy/src/tree.pyx":504
 *     try:
 *         if tree == NULL:
 *             tree = new TTree(name.c_str(), name.c_str())             # <<<<<<<<<<<<<<
 * 
 *         fieldnames = arr.dtype.names
 */

#line 504 "root_numpy/src/tree.pyx"
          __pyx_v_tree = new TTree(__pyx_v_name.c_str(), __pyx_v_name.c_str());

          /* "root_numpy/src/tree.pyx":503
 * 
 *     try:
 *         if tree == NULL:             # <<<<<<<<<<<<<<
 *             tree = new TTree(name.c_str(), name.c_str())
 * 
 */

#line 503 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":506
 *             tree = new TTree(name.c_str(), name.c_str())
 * 
 *         fieldnames = arr.dtype.names             # <<<<<<<<<<<<<<
 *         fields = arr.dtype.fields
 * 
 */

#line 506 "root_numpy/src/tree.pyx"
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_arr), __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 506, __pyx_L6_error)

#line 506 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 506 "root_numpy/src/tree.pyx"
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_names); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 506, __pyx_L6_error)

#line 506 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 506 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 506 "root_numpy/src/tree.pyx"
        __pyx_v_fieldnames = __pyx_t_6;

#line 506 "root_numpy/src/tree.pyx"
        __pyx_t_6 = 0;

        /* "root_numpy/src/tree.pyx":507
 * 
 *         fieldnames = arr.dtype.names
 *         fields = arr.dtype.fields             # <<<<<<<<<<<<<<
 * 
 *         # Determine the structure
 */

#line 507 "root_numpy/src/tree.pyx"
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_arr), __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 507, __pyx_L6_error)

#line 507 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 507 "root_numpy/src/tree.pyx"
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_fields); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 507, __pyx_L6_error)

#line 507 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 507 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 507 "root_numpy/src/tree.pyx"
        __pyx_v_fields = __pyx_t_5;

#line 507 "root_numpy/src/tree.pyx"
        __pyx_t_5 = 0;

        /* "root_numpy/src/tree.pyx":510
 * 
 *         # Determine the structure
 *         for icol in range(len(fieldnames)):             # <<<<<<<<<<<<<<
 *             fieldname = fieldnames[icol]
 *             # roffset is an offset of particular field in each record
 */

#line 510 "root_numpy/src/tree.pyx"
        __pyx_t_7 = PyObject_Length(__pyx_v_fieldnames); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(2, 510, __pyx_L6_error)

#line 510 "root_numpy/src/tree.pyx"
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {

#line 510 "root_numpy/src/tree.pyx"
          __pyx_v_icol = __pyx_t_8;

          /* "root_numpy/src/tree.pyx":511
 *         # Determine the structure
 *         for icol in range(len(fieldnames)):
 *             fieldname = fieldnames[icol]             # <<<<<<<<<<<<<<
 *             # roffset is an offset of particular field in each record
 *             dtype, roffset = fields[fieldname]
 */

#line 511 "root_numpy/src/tree.pyx"
          __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_fieldnames, __pyx_v_icol, unsigned int, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 511, __pyx_L6_error)

#line 511 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 511 "root_numpy/src/tree.pyx"
          __Pyx_XDECREF_SET(__pyx_v_fieldname, __pyx_t_5);

#line 511 "root_numpy/src/tree.pyx"
          __pyx_t_5 = 0;

          /* "root_numpy/src/tree.pyx":513
 *             fieldname = fieldnames[icol]
 *             # roffset is an offset of particular field in each record
 *             dtype, roffset = fields[fieldname]             # <<<<<<<<<<<<<<
 *             cvt = find_np2root_converter(tree, fieldname, dtype)
 *             if cvt != NULL:
 */

#line 513 "root_numpy/src/tree.pyx"
          __pyx_t_5 = PyObject_GetItem(__pyx_v_fields, __pyx_v_fieldname); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 513, __pyx_L6_error)

#line 513 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_5);

#line 513 "root_numpy/src/tree.pyx"
          if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {

#line 513 "root_numpy/src/tree.pyx"
            PyObject* sequence = __pyx_t_5;

#line 513 "root_numpy/src/tree.pyx"
            #if CYTHON_COMPILING_IN_CPYTHON

#line 513 "root_numpy/src/tree.pyx"
            Py_ssize_t size = Py_SIZE(sequence);

#line 513 "root_numpy/src/tree.pyx"
            #else

#line 513 "root_numpy/src/tree.pyx"
            Py_ssize_t size = PySequence_Size(sequence);

#line 513 "root_numpy/src/tree.pyx"
            #endif

#line 513 "root_numpy/src/tree.pyx"
            if (unlikely(size != 2)) {

#line 513 "root_numpy/src/tree.pyx"
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 513 "root_numpy/src/tree.pyx"
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 513 "root_numpy/src/tree.pyx"
              __PYX_ERR(2, 513, __pyx_L6_error)

#line 513 "root_numpy/src/tree.pyx"
            }

#line 513 "root_numpy/src/tree.pyx"
            #if CYTHON_COMPILING_IN_CPYTHON

#line 513 "root_numpy/src/tree.pyx"
            if (likely(PyTuple_CheckExact(sequence))) {

#line 513 "root_numpy/src/tree.pyx"
              __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 

#line 513 "root_numpy/src/tree.pyx"
              __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 

#line 513 "root_numpy/src/tree.pyx"
            } else {

#line 513 "root_numpy/src/tree.pyx"
              __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 

#line 513 "root_numpy/src/tree.pyx"
              __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 

#line 513 "root_numpy/src/tree.pyx"
            }

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_6);

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_9);

#line 513 "root_numpy/src/tree.pyx"
            #else

#line 513 "root_numpy/src/tree.pyx"
            __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 513, __pyx_L6_error)

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_6);

#line 513 "root_numpy/src/tree.pyx"
            __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 513, __pyx_L6_error)

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 513 "root_numpy/src/tree.pyx"
            #endif

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 513 "root_numpy/src/tree.pyx"
          } else {

#line 513 "root_numpy/src/tree.pyx"
            Py_ssize_t index = -1;

#line 513 "root_numpy/src/tree.pyx"
            __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 513, __pyx_L6_error)

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_10);

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 513 "root_numpy/src/tree.pyx"
            __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
            index = 0; __pyx_t_6 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_6)) 
#line 513 "root_numpy/src/tree.pyx"
goto __pyx_L17_unpacking_failed;

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_6);
            index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) 
#line 513 "root_numpy/src/tree.pyx"
goto __pyx_L17_unpacking_failed;

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 513 "root_numpy/src/tree.pyx"
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(2, 513, __pyx_L6_error)

#line 513 "root_numpy/src/tree.pyx"
            __pyx_t_11 = NULL;

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 513 "root_numpy/src/tree.pyx"
            goto __pyx_L18_unpacking_done;

#line 513 "root_numpy/src/tree.pyx"
            __pyx_L17_unpacking_failed:;

#line 513 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 513 "root_numpy/src/tree.pyx"
            __pyx_t_11 = NULL;

#line 513 "root_numpy/src/tree.pyx"
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 513 "root_numpy/src/tree.pyx"
            __PYX_ERR(2, 513, __pyx_L6_error)

#line 513 "root_numpy/src/tree.pyx"
            __pyx_L18_unpacking_done:;

#line 513 "root_numpy/src/tree.pyx"
          }

#line 513 "root_numpy/src/tree.pyx"
          __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 513, __pyx_L6_error)

#line 513 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 513 "root_numpy/src/tree.pyx"
          __Pyx_XDECREF_SET(__pyx_v_dtype, __pyx_t_6);

#line 513 "root_numpy/src/tree.pyx"
          __pyx_t_6 = 0;

#line 513 "root_numpy/src/tree.pyx"
          __pyx_v_roffset = __pyx_t_12;

          /* "root_numpy/src/tree.pyx":514
 *             # roffset is an offset of particular field in each record
 *             dtype, roffset = fields[fieldname]
 *             cvt = find_np2root_converter(tree, fieldname, dtype)             # <<<<<<<<<<<<<<
 *             if cvt != NULL:
 *                 roffsetarray.push_back(roffset)
 */

#line 514 "root_numpy/src/tree.pyx"
          __pyx_v_cvt = __pyx_f_13_librootnumpy_find_np2root_converter(__pyx_v_tree, __pyx_v_fieldname, __pyx_v_dtype);

          /* "root_numpy/src/tree.pyx":515
 *             dtype, roffset = fields[fieldname]
 *             cvt = find_np2root_converter(tree, fieldname, dtype)
 *             if cvt != NULL:             # <<<<<<<<<<<<<<
 *                 roffsetarray.push_back(roffset)
 *                 converters.push_back(cvt)
 */

#line 515 "root_numpy/src/tree.pyx"
          __pyx_t_4 = ((__pyx_v_cvt != NULL) != 0);

#line 515 "root_numpy/src/tree.pyx"
          if (__pyx_t_4) {

            /* "root_numpy/src/tree.pyx":516
 *             cvt = find_np2root_converter(tree, fieldname, dtype)
 *             if cvt != NULL:
 *                 roffsetarray.push_back(roffset)             # <<<<<<<<<<<<<<
 *                 converters.push_back(cvt)
 *             else:
 */

#line 516 "root_numpy/src/tree.pyx"
            try {

#line 516 "root_numpy/src/tree.pyx"
              __pyx_v_roffsetarray.push_back(__pyx_v_roffset);

#line 516 "root_numpy/src/tree.pyx"
            } catch(...) {

#line 516 "root_numpy/src/tree.pyx"
              __Pyx_CppExn2PyErr();

#line 516 "root_numpy/src/tree.pyx"
              __PYX_ERR(2, 516, __pyx_L6_error)

#line 516 "root_numpy/src/tree.pyx"
            }

            /* "root_numpy/src/tree.pyx":517
 *             if cvt != NULL:
 *                 roffsetarray.push_back(roffset)
 *                 converters.push_back(cvt)             # <<<<<<<<<<<<<<
 *             else:
 *                 warnings.warn("converter for {!r} is not "
 */

#line 517 "root_numpy/src/tree.pyx"
            try {

#line 517 "root_numpy/src/tree.pyx"
              __pyx_v_converters.push_back(__pyx_v_cvt);

#line 517 "root_numpy/src/tree.pyx"
            } catch(...) {

#line 517 "root_numpy/src/tree.pyx"
              __Pyx_CppExn2PyErr();

#line 517 "root_numpy/src/tree.pyx"
              __PYX_ERR(2, 517, __pyx_L6_error)

#line 517 "root_numpy/src/tree.pyx"
            }

            /* "root_numpy/src/tree.pyx":515
 *             dtype, roffset = fields[fieldname]
 *             cvt = find_np2root_converter(tree, fieldname, dtype)
 *             if cvt != NULL:             # <<<<<<<<<<<<<<
 *                 roffsetarray.push_back(roffset)
 *                 converters.push_back(cvt)
 */

#line 515 "root_numpy/src/tree.pyx"
            goto __pyx_L19;

#line 515 "root_numpy/src/tree.pyx"
          }

          /* "root_numpy/src/tree.pyx":519
 *                 converters.push_back(cvt)
 *             else:
 *                 warnings.warn("converter for {!r} is not "             # <<<<<<<<<<<<<<
 *                               "implemented (skipping)".format(dtype))
 * 
 */

#line 519 "root_numpy/src/tree.pyx"
          /*else*/ {

#line 519 "root_numpy/src/tree.pyx"
            __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 519, __pyx_L6_error)

#line 519 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 519 "root_numpy/src/tree.pyx"
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_warn); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 519, __pyx_L6_error)

#line 519 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_6);

#line 519 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

            /* "root_numpy/src/tree.pyx":520
 *             else:
 *                 warnings.warn("converter for {!r} is not "
 *                               "implemented (skipping)".format(dtype))             # <<<<<<<<<<<<<<
 * 
 *         # Fill the data
 */

#line 520 "root_numpy/src/tree.pyx"
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_converter_for_r_is_not_implement, __pyx_n_s_format); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 520, __pyx_L6_error)

#line 520 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_10);

#line 520 "root_numpy/src/tree.pyx"
            __pyx_t_13 = NULL;

#line 520 "root_numpy/src/tree.pyx"
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {

#line 520 "root_numpy/src/tree.pyx"
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_10);

#line 520 "root_numpy/src/tree.pyx"
              if (likely(__pyx_t_13)) {

#line 520 "root_numpy/src/tree.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);

#line 520 "root_numpy/src/tree.pyx"
                __Pyx_INCREF(__pyx_t_13);

#line 520 "root_numpy/src/tree.pyx"
                __Pyx_INCREF(function);

#line 520 "root_numpy/src/tree.pyx"
                __Pyx_DECREF_SET(__pyx_t_10, function);

#line 520 "root_numpy/src/tree.pyx"
              }

#line 520 "root_numpy/src/tree.pyx"
            }

#line 520 "root_numpy/src/tree.pyx"
            if (!__pyx_t_13) {

#line 520 "root_numpy/src/tree.pyx"
              __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_dtype); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 520, __pyx_L6_error)

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_GOTREF(__pyx_t_9);

#line 520 "root_numpy/src/tree.pyx"
            } else {

#line 520 "root_numpy/src/tree.pyx"
              __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 520, __pyx_L6_error)

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_GOTREF(__pyx_t_14);

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_v_dtype);

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_GIVEREF(__pyx_v_dtype);

#line 520 "root_numpy/src/tree.pyx"
              PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_v_dtype);

#line 520 "root_numpy/src/tree.pyx"
              __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_14, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 520, __pyx_L6_error)

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_GOTREF(__pyx_t_9);

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 520 "root_numpy/src/tree.pyx"
            }

#line 520 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 520 "root_numpy/src/tree.pyx"
            __pyx_t_10 = NULL;

#line 520 "root_numpy/src/tree.pyx"
            if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 520 "root_numpy/src/tree.pyx"
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);

#line 520 "root_numpy/src/tree.pyx"
              if (likely(__pyx_t_10)) {

#line 520 "root_numpy/src/tree.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 520 "root_numpy/src/tree.pyx"
                __Pyx_INCREF(__pyx_t_10);

#line 520 "root_numpy/src/tree.pyx"
                __Pyx_INCREF(function);

#line 520 "root_numpy/src/tree.pyx"
                __Pyx_DECREF_SET(__pyx_t_6, function);

#line 520 "root_numpy/src/tree.pyx"
              }

#line 520 "root_numpy/src/tree.pyx"
            }

#line 520 "root_numpy/src/tree.pyx"
            if (!__pyx_t_10) {

#line 520 "root_numpy/src/tree.pyx"
              __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 519, __pyx_L6_error)

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_GOTREF(__pyx_t_5);

#line 520 "root_numpy/src/tree.pyx"
            } else {

#line 520 "root_numpy/src/tree.pyx"
              __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 519, __pyx_L6_error)

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_GOTREF(__pyx_t_14);

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_10); __pyx_t_10 = NULL;

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_GIVEREF(__pyx_t_9);

#line 520 "root_numpy/src/tree.pyx"
              PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_9);

#line 520 "root_numpy/src/tree.pyx"
              __pyx_t_9 = 0;

#line 520 "root_numpy/src/tree.pyx"
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 519, __pyx_L6_error)

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_GOTREF(__pyx_t_5);

#line 520 "root_numpy/src/tree.pyx"
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 520 "root_numpy/src/tree.pyx"
            }

#line 520 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 520 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 520 "root_numpy/src/tree.pyx"
          }

#line 520 "root_numpy/src/tree.pyx"
          __pyx_L19:;

#line 520 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":523
 * 
 *         # Fill the data
 *         num_cols = converters.size()             # <<<<<<<<<<<<<<
 *         for idata in range(arr_len):
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 */

#line 523 "root_numpy/src/tree.pyx"
        __pyx_v_num_cols = __pyx_v_converters.size();

        /* "root_numpy/src/tree.pyx":524
 *         # Fill the data
 *         num_cols = converters.size()
 *         for idata in range(arr_len):             # <<<<<<<<<<<<<<
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 *             for icol in range(num_cols):
 */

#line 524 "root_numpy/src/tree.pyx"
        __pyx_t_15 = __pyx_v_arr_len;

#line 524 "root_numpy/src/tree.pyx"
        for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {

#line 524 "root_numpy/src/tree.pyx"
          __pyx_v_idata = __pyx_t_16;

          /* "root_numpy/src/tree.pyx":525
 *         num_cols = converters.size()
 *         for idata in range(arr_len):
 *             thisrow = np.PyArray_GETPTR1(arr, idata)             # <<<<<<<<<<<<<<
 *             for icol in range(num_cols):
 *                 roffset = roffsetarray[icol]
 */

#line 525 "root_numpy/src/tree.pyx"
          __pyx_v_thisrow = PyArray_GETPTR1(__pyx_v_arr, __pyx_v_idata);

          /* "root_numpy/src/tree.pyx":526
 *         for idata in range(arr_len):
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 *             for icol in range(num_cols):             # <<<<<<<<<<<<<<
 *                 roffset = roffsetarray[icol]
 *                 source = shift(thisrow, roffset)
 */

#line 526 "root_numpy/src/tree.pyx"
          __pyx_t_8 = __pyx_v_num_cols;

#line 526 "root_numpy/src/tree.pyx"
          for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_8; __pyx_t_17+=1) {

#line 526 "root_numpy/src/tree.pyx"
            __pyx_v_icol = __pyx_t_17;

            /* "root_numpy/src/tree.pyx":527
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 *             for icol in range(num_cols):
 *                 roffset = roffsetarray[icol]             # <<<<<<<<<<<<<<
 *                 source = shift(thisrow, roffset)
 *                 converters[icol].fill_from(source)
 */

#line 527 "root_numpy/src/tree.pyx"
            __pyx_v_roffset = (__pyx_v_roffsetarray[__pyx_v_icol]);

            /* "root_numpy/src/tree.pyx":528
 *             for icol in range(num_cols):
 *                 roffset = roffsetarray[icol]
 *                 source = shift(thisrow, roffset)             # <<<<<<<<<<<<<<
 *                 converters[icol].fill_from(source)
 * 
 */

#line 528 "root_numpy/src/tree.pyx"
            __pyx_v_source = shift(__pyx_v_thisrow, __pyx_v_roffset);

            /* "root_numpy/src/tree.pyx":529
 *                 roffset = roffsetarray[icol]
 *                 source = shift(thisrow, roffset)
 *                 converters[icol].fill_from(source)             # <<<<<<<<<<<<<<
 * 
 *         # Need to update the number of entries in the tree to match
 */

#line 529 "root_numpy/src/tree.pyx"
            (__pyx_v_converters[__pyx_v_icol])->fill_from(__pyx_v_source);

#line 529 "root_numpy/src/tree.pyx"
          }

#line 529 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":533
 *         # Need to update the number of entries in the tree to match
 *         # the number in the branches since each branch is filled separately.
 *         tree.SetEntries(-1)             # <<<<<<<<<<<<<<
 * 
 *     except:
 */

#line 533 "root_numpy/src/tree.pyx"
        __pyx_v_tree->SetEntries(-1LL);

        /* "root_numpy/src/tree.pyx":502
 *     cdef void* thisrow = NULL
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if tree == NULL:
 *             tree = new TTree(name.c_str(), name.c_str())
 */

#line 502 "root_numpy/src/tree.pyx"
      }

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 502 "root_numpy/src/tree.pyx"
      goto __pyx_L13_try_end;

#line 502 "root_numpy/src/tree.pyx"
      __pyx_L6_error:;

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "root_numpy/src/tree.pyx":535
 *         tree.SetEntries(-1)
 * 
 *     except:             # <<<<<<<<<<<<<<
 *         raise
 * 
 */

#line 535 "root_numpy/src/tree.pyx"
      /*except:*/ {

#line 535 "root_numpy/src/tree.pyx"
        __Pyx_AddTraceback("_librootnumpy.array2tree", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 535 "root_numpy/src/tree.pyx"
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_14) < 0) __PYX_ERR(2, 535, __pyx_L8_except_error)

#line 535 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 535 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 535 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_14);

        /* "root_numpy/src/tree.pyx":536
 * 
 *     except:
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */

#line 536 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_5);

#line 536 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_6);

#line 536 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_14);

#line 536 "root_numpy/src/tree.pyx"
        __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_14);
        __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_14 = 0; 
#line 536 "root_numpy/src/tree.pyx"


#line 536 "root_numpy/src/tree.pyx"
        __PYX_ERR(2, 536, __pyx_L8_except_error)

#line 536 "root_numpy/src/tree.pyx"
      }

#line 536 "root_numpy/src/tree.pyx"
      __pyx_L8_except_error:;

      /* "root_numpy/src/tree.pyx":502
 *     cdef void* thisrow = NULL
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if tree == NULL:
 *             tree = new TTree(name.c_str(), name.c_str())
 */

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_1);

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_2);

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_3);

#line 502 "root_numpy/src/tree.pyx"
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 502 "root_numpy/src/tree.pyx"
      goto __pyx_L4_error;

#line 502 "root_numpy/src/tree.pyx"
      __pyx_L13_try_end:;

#line 502 "root_numpy/src/tree.pyx"
    }

#line 502 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":539
 * 
 *     finally:
 *         for icol in range(converters.size()):             # <<<<<<<<<<<<<<
 *             del converters[icol]
 *         # TODO: clean up tree
 */

#line 539 "root_numpy/src/tree.pyx"
  /*finally:*/ {

#line 539 "root_numpy/src/tree.pyx"
    /*normal exit:*/{

#line 539 "root_numpy/src/tree.pyx"
      __pyx_t_18 = __pyx_v_converters.size();

#line 539 "root_numpy/src/tree.pyx"
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_18; __pyx_t_8+=1) {

#line 539 "root_numpy/src/tree.pyx"
        __pyx_v_icol = __pyx_t_8;

        /* "root_numpy/src/tree.pyx":540
 *     finally:
 *         for icol in range(converters.size()):
 *             del converters[icol]             # <<<<<<<<<<<<<<
 *         # TODO: clean up tree
 * 
 */

#line 540 "root_numpy/src/tree.pyx"
        delete (__pyx_v_converters[__pyx_v_icol]);

#line 540 "root_numpy/src/tree.pyx"
      }

#line 540 "root_numpy/src/tree.pyx"
      goto __pyx_L5;

#line 540 "root_numpy/src/tree.pyx"
    }

#line 540 "root_numpy/src/tree.pyx"
    /*exception exit:*/{

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_declare

#line 540 "root_numpy/src/tree.pyx"
      __pyx_L4_error:;

#line 540 "root_numpy/src/tree.pyx"
      __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 540 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);

#line 540 "root_numpy/src/tree.pyx"
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1) < 0)) __Pyx_ErrFetch(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_3);

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_2);

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_1);

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_21);

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_22);

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_23);

#line 540 "root_numpy/src/tree.pyx"
      __pyx_t_12 = __pyx_lineno; __pyx_t_19 = __pyx_clineno; __pyx_t_20 = __pyx_filename;

#line 540 "root_numpy/src/tree.pyx"
      {

        /* "root_numpy/src/tree.pyx":539
 * 
 *     finally:
 *         for icol in range(converters.size()):             # <<<<<<<<<<<<<<
 *             del converters[icol]
 *         # TODO: clean up tree
 */

#line 539 "root_numpy/src/tree.pyx"
        __pyx_t_18 = __pyx_v_converters.size();

#line 539 "root_numpy/src/tree.pyx"
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_18; __pyx_t_8+=1) {

#line 539 "root_numpy/src/tree.pyx"
          __pyx_v_icol = __pyx_t_8;

          /* "root_numpy/src/tree.pyx":540
 *     finally:
 *         for icol in range(converters.size()):
 *             del converters[icol]             # <<<<<<<<<<<<<<
 *         # TODO: clean up tree
 * 
 */

#line 540 "root_numpy/src/tree.pyx"
          delete (__pyx_v_converters[__pyx_v_icol]);

#line 540 "root_numpy/src/tree.pyx"
        }

#line 540 "root_numpy/src/tree.pyx"
      }

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_PyThreadState_assign

#line 540 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) {

#line 540 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_21);

#line 540 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_22);

#line 540 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_23);

#line 540 "root_numpy/src/tree.pyx"
        __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);

#line 540 "root_numpy/src/tree.pyx"
      }

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_3);

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_2);

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_1);

#line 540 "root_numpy/src/tree.pyx"
      __Pyx_ErrRestore(__pyx_t_3, __pyx_t_2, __pyx_t_1);

#line 540 "root_numpy/src/tree.pyx"
      __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;

#line 540 "root_numpy/src/tree.pyx"
      __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_19; __pyx_filename = __pyx_t_20;

#line 540 "root_numpy/src/tree.pyx"
      goto __pyx_L1_error;

#line 540 "root_numpy/src/tree.pyx"
    }

#line 540 "root_numpy/src/tree.pyx"
    __pyx_L5:;

#line 540 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":543
 *         # TODO: clean up tree
 * 
 *     return tree             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 543 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_tree;

#line 543 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":490
 * 
 * 
 * cdef TTree* array2tree(np.ndarray arr, string name='tree', TTree* tree=NULL) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[NP2ROOTConverter*] converters
 *     cdef NP2ROOTConverter* cvt
 */

#line 490 "root_numpy/src/tree.pyx"


#line 490 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 490 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_14);

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.array2tree", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 490 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 490 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_fieldnames);

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_fields);

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_fieldname);

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_dtype);

#line 490 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 490 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 490 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":546
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */

#line 546 "root_numpy/src/tree.pyx"


#line 546 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 546 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_17array2tree_toCObj(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_17array2tree_toCObj = 
#line 546 "root_numpy/src/tree.pyx"
{"array2tree_toCObj", (PyCFunction)__pyx_pw_13_librootnumpy_17array2tree_toCObj, METH_VARARGS|METH_KEYWORDS, 0};

#line 546 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_17array2tree_toCObj(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0
#line 546 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_name = 0
#line 546 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tree = 0
#line 546 "root_numpy/src/tree.pyx"
;

#line 546 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("array2tree_toCObj (wrapper)", 0);

#line 546 "root_numpy/src/tree.pyx"
  {

#line 546 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arr,&__pyx_n_s_name,&__pyx_n_s_tree,0};

#line 546 "root_numpy/src/tree.pyx"
    PyObject* values[3] = {0,0,0};

#line 546 "root_numpy/src/tree.pyx"
    values[1] = ((PyObject *)__pyx_n_s_tree);

#line 546 "root_numpy/src/tree.pyx"
    values[2] = ((PyObject *)Py_None);

#line 546 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 546 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 546 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 546 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  3: 
#line 546 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 546 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 546 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 546 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 546 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 546 "root_numpy/src/tree.pyx"
      }

#line 546 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 546 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 546 "root_numpy/src/tree.pyx"
        case  0:

#line 546 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arr)) != 0)) kw_args--;
        else 
#line 546 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 546 "root_numpy/src/tree.pyx"
        case  1:

#line 546 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 546 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);

#line 546 "root_numpy/src/tree.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 546 "root_numpy/src/tree.pyx"
        }

#line 546 "root_numpy/src/tree.pyx"
        case  2:

#line 546 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 546 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree);

#line 546 "root_numpy/src/tree.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 546 "root_numpy/src/tree.pyx"
        }

#line 546 "root_numpy/src/tree.pyx"
      }

#line 546 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 546 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "array2tree_toCObj") < 0)) __PYX_ERR(2, 546, __pyx_L3_error)

#line 546 "root_numpy/src/tree.pyx"
      }

#line 546 "root_numpy/src/tree.pyx"
    } else {

#line 546 "root_numpy/src/tree.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 546 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 546 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 546 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 546 "root_numpy/src/tree.pyx"
        break;
        default: 
#line 546 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 546 "root_numpy/src/tree.pyx"
      }

#line 546 "root_numpy/src/tree.pyx"
    }

#line 546 "root_numpy/src/tree.pyx"
    __pyx_v_arr = values[0];

#line 546 "root_numpy/src/tree.pyx"
    __pyx_v_name = values[1];

#line 546 "root_numpy/src/tree.pyx"
    __pyx_v_tree = values[2];

#line 546 "root_numpy/src/tree.pyx"
  }

#line 546 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 546 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("array2tree_toCObj", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 546 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 546, __pyx_L3_error)

#line 546 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.array2tree_toCObj", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 546 "root_numpy/src/tree.pyx"
  return NULL;

#line 546 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 546 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_16array2tree_toCObj(__pyx_self, __pyx_v_arr, __pyx_v_name, __pyx_v_tree);

#line 546 "root_numpy/src/tree.pyx"


#line 546 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 546 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 546 "root_numpy/src/tree.pyx"
}

#line 546 "root_numpy/src/tree.pyx"


#line 546 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_16array2tree_toCObj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_name, PyObject *__pyx_v_tree) {
  TTree *__pyx_v_intree
#line 546 "root_numpy/src/tree.pyx"
;
  TTree *__pyx_v_outtree
#line 546 "root_numpy/src/tree.pyx"
;

#line 546 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 546 "root_numpy/src/tree.pyx"
  int __pyx_t_1;

#line 546 "root_numpy/src/tree.pyx"
  int __pyx_t_2;

#line 546 "root_numpy/src/tree.pyx"
  void *__pyx_t_3;

#line 546 "root_numpy/src/tree.pyx"
  std::string __pyx_t_4;

#line 546 "root_numpy/src/tree.pyx"
  TTree *__pyx_t_5;

#line 546 "root_numpy/src/tree.pyx"
  struct __pyx_opt_args_13_librootnumpy_array2tree __pyx_t_6;

#line 546 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("array2tree_toCObj", 0);

  /* "root_numpy/src/tree.pyx":547
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):
 *     cdef TTree* intree = NULL             # <<<<<<<<<<<<<<
 *     cdef TTree* outtree = NULL
 *     if tree is not None:
 */

#line 547 "root_numpy/src/tree.pyx"
  __pyx_v_intree = NULL;

  /* "root_numpy/src/tree.pyx":548
 * def array2tree_toCObj(arr, name='tree', tree=None):
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL             # <<<<<<<<<<<<<<
 *     if tree is not None:
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 */

#line 548 "root_numpy/src/tree.pyx"
  __pyx_v_outtree = NULL;

  /* "root_numpy/src/tree.pyx":549
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 *     if tree is not None:             # <<<<<<<<<<<<<<
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)
 */

#line 549 "root_numpy/src/tree.pyx"
  __pyx_t_1 = (__pyx_v_tree != Py_None);

#line 549 "root_numpy/src/tree.pyx"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 549 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":550
 *     cdef TTree* outtree = NULL
 *     if tree is not None:
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)             # <<<<<<<<<<<<<<
 *     outtree = array2tree(arr, name=name, tree=intree)
 *     return PyCObject_FromVoidPtr(outtree, NULL)
 */

#line 550 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyCObject_AsVoidPtr(__pyx_v_tree); if (unlikely(__pyx_t_3 == NULL && PyErr_Occurred())) __PYX_ERR(2, 550, __pyx_L1_error)

#line 550 "root_numpy/src/tree.pyx"
    __pyx_v_intree = ((TTree *)__pyx_t_3);

    /* "root_numpy/src/tree.pyx":549
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 *     if tree is not None:             # <<<<<<<<<<<<<<
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)
 */

#line 549 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":551
 *     if tree is not None:
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)             # <<<<<<<<<<<<<<
 *     return PyCObject_FromVoidPtr(outtree, NULL)
 * 
 */

#line 551 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_v_arr) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_arr, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(2, 551, __pyx_L1_error)

#line 551 "root_numpy/src/tree.pyx"
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 551, __pyx_L1_error)

#line 551 "root_numpy/src/tree.pyx"
  __pyx_t_6.__pyx_n = 2;

#line 551 "root_numpy/src/tree.pyx"
  __pyx_t_6.name = __pyx_t_4;

#line 551 "root_numpy/src/tree.pyx"
  __pyx_t_6.tree = __pyx_v_intree;

#line 551 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __pyx_f_13_librootnumpy_array2tree(((PyArrayObject *)__pyx_v_arr), &__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 551, __pyx_L1_error)

#line 551 "root_numpy/src/tree.pyx"
  __pyx_v_outtree = __pyx_t_5;

  /* "root_numpy/src/tree.pyx":552
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)
 *     return PyCObject_FromVoidPtr(outtree, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 552 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 552 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCObject_FromVoidPtr(__pyx_v_outtree, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 552, __pyx_L1_error)

#line 552 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 552 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_7;

#line 552 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 552 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":546
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */

#line 546 "root_numpy/src/tree.pyx"


#line 546 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 546 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.array2tree_toCObj", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 546 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 546 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 546 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 546 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":555
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* rfile = Open(filename, mode)
 *     if rfile == NULL:
 */

#line 555 "root_numpy/src/tree.pyx"


#line 555 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 555 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_19array2root(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_19array2root = 
#line 555 "root_numpy/src/tree.pyx"
{"array2root", (PyCFunction)__pyx_pw_13_librootnumpy_19array2root, METH_VARARGS|METH_KEYWORDS, 0};

#line 555 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_19array2root(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0
#line 555 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_filename = 0
#line 555 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_treename = 0
#line 555 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_mode = 0
#line 555 "root_numpy/src/tree.pyx"
;

#line 555 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("array2root (wrapper)", 0);

#line 555 "root_numpy/src/tree.pyx"
  {

#line 555 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arr,&__pyx_n_s_filename,&__pyx_n_s_treename,&__pyx_n_s_mode,0};

#line 555 "root_numpy/src/tree.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 555 "root_numpy/src/tree.pyx"
    values[2] = ((PyObject *)__pyx_n_s_tree);

#line 555 "root_numpy/src/tree.pyx"
    values[3] = ((PyObject *)__pyx_n_s_update);

#line 555 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 555 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 555 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 555 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  4: 
#line 555 "root_numpy/src/tree.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 555 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 555 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 555 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 555 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 555 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 555 "root_numpy/src/tree.pyx"
      }

#line 555 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 555 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 555 "root_numpy/src/tree.pyx"
        case  0:

#line 555 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arr)) != 0)) kw_args--;
        else 
#line 555 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 555 "root_numpy/src/tree.pyx"
        case  1:

#line 555 "root_numpy/src/tree.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;

#line 555 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("array2root", 0, 2, 4, 1); 
#line 555 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 555, __pyx_L3_error)

#line 555 "root_numpy/src/tree.pyx"
        }

#line 555 "root_numpy/src/tree.pyx"
        case  2:

#line 555 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 555 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_treename);

#line 555 "root_numpy/src/tree.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 555 "root_numpy/src/tree.pyx"
        }

#line 555 "root_numpy/src/tree.pyx"
        case  3:

#line 555 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 555 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);

#line 555 "root_numpy/src/tree.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 555 "root_numpy/src/tree.pyx"
        }

#line 555 "root_numpy/src/tree.pyx"
      }

#line 555 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 555 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "array2root") < 0)) __PYX_ERR(2, 555, __pyx_L3_error)

#line 555 "root_numpy/src/tree.pyx"
      }

#line 555 "root_numpy/src/tree.pyx"
    } else {

#line 555 "root_numpy/src/tree.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 555 "root_numpy/src/tree.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 555 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 555 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 555 "root_numpy/src/tree.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 555 "root_numpy/src/tree.pyx"
        break;
        default: 
#line 555 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 555 "root_numpy/src/tree.pyx"
      }

#line 555 "root_numpy/src/tree.pyx"
    }

#line 555 "root_numpy/src/tree.pyx"
    __pyx_v_arr = values[0];

#line 555 "root_numpy/src/tree.pyx"
    __pyx_v_filename = values[1];

#line 555 "root_numpy/src/tree.pyx"
    __pyx_v_treename = values[2];

#line 555 "root_numpy/src/tree.pyx"
    __pyx_v_mode = values[3];

#line 555 "root_numpy/src/tree.pyx"
  }

#line 555 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 555 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("array2root", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 555 "root_numpy/src/tree.pyx"
__PYX_ERR(2, 555, __pyx_L3_error)

#line 555 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.array2root", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 555 "root_numpy/src/tree.pyx"
  return NULL;

#line 555 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 555 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_18array2root(__pyx_self, __pyx_v_arr, __pyx_v_filename, __pyx_v_treename, __pyx_v_mode);

#line 555 "root_numpy/src/tree.pyx"


#line 555 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 555 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 555 "root_numpy/src/tree.pyx"
}

#line 555 "root_numpy/src/tree.pyx"


#line 555 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_18array2root(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_filename, PyObject *__pyx_v_treename, PyObject *__pyx_v_mode) {
  TFile *__pyx_v_rfile
#line 555 "root_numpy/src/tree.pyx"
;
  TTree *__pyx_v_tree
#line 555 "root_numpy/src/tree.pyx"
;

#line 555 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 555 "root_numpy/src/tree.pyx"
  const char *__pyx_t_1;

#line 555 "root_numpy/src/tree.pyx"
  const char *__pyx_t_2;

#line 555 "root_numpy/src/tree.pyx"
  int __pyx_t_3;

#line 555 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 555 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 555 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 555 "root_numpy/src/tree.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 555 "root_numpy/src/tree.pyx"
  std::string __pyx_t_8;

#line 555 "root_numpy/src/tree.pyx"
  TTree *__pyx_t_9;

#line 555 "root_numpy/src/tree.pyx"
  struct __pyx_opt_args_13_librootnumpy_array2tree __pyx_t_10;

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("array2root", 0);

  /* "root_numpy/src/tree.pyx":556
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):
 *     cdef TFile* rfile = Open(filename, mode)             # <<<<<<<<<<<<<<
 *     if rfile == NULL:
 *         raise IOError("cannot open file {0}".format(filename))
 */

#line 556 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(2, 556, __pyx_L1_error)

#line 556 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_mode); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(2, 556, __pyx_L1_error)

#line 556 "root_numpy/src/tree.pyx"
  __pyx_v_rfile = TFile::Open(__pyx_t_1, __pyx_t_2);

  /* "root_numpy/src/tree.pyx":557
 * def array2root(arr, filename, treename='tree', mode='update'):
 *     cdef TFile* rfile = Open(filename, mode)
 *     if rfile == NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot open file {0}".format(filename))
 *     if not rfile.IsWritable():
 */

#line 557 "root_numpy/src/tree.pyx"
  __pyx_t_3 = ((__pyx_v_rfile == NULL) != 0);

#line 557 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/tree.pyx":558
 *     cdef TFile* rfile = Open(filename, mode)
 *     if rfile == NULL:
 *         raise IOError("cannot open file {0}".format(filename))             # <<<<<<<<<<<<<<
 *     if not rfile.IsWritable():
 *         raise IOError("file {0} is not writable".format(filename))
 */

#line 558 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_open_file_0, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 558, __pyx_L1_error)

#line 558 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 558 "root_numpy/src/tree.pyx"
    __pyx_t_6 = NULL;

#line 558 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {

#line 558 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);

#line 558 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_6)) {

#line 558 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 558 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_6);

#line 558 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 558 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 558 "root_numpy/src/tree.pyx"
      }

#line 558 "root_numpy/src/tree.pyx"
    }

#line 558 "root_numpy/src/tree.pyx"
    if (!__pyx_t_6) {

#line 558 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_filename); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 558, __pyx_L1_error)

#line 558 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 558 "root_numpy/src/tree.pyx"
    } else {

#line 558 "root_numpy/src/tree.pyx"
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 558, __pyx_L1_error)

#line 558 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 558 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;

#line 558 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_filename);

#line 558 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_filename);

#line 558 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_filename);

#line 558 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 558, __pyx_L1_error)

#line 558 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 558 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 558 "root_numpy/src/tree.pyx"
    }

#line 558 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 558 "root_numpy/src/tree.pyx"
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 558, __pyx_L1_error)

#line 558 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 558 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 558 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);

#line 558 "root_numpy/src/tree.pyx"
    __pyx_t_4 = 0;

#line 558 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 558, __pyx_L1_error)

#line 558 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 558 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 558 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 558 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 558 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 558, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":557
 * def array2root(arr, filename, treename='tree', mode='update'):
 *     cdef TFile* rfile = Open(filename, mode)
 *     if rfile == NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot open file {0}".format(filename))
 *     if not rfile.IsWritable():
 */

#line 557 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":559
 *     if rfile == NULL:
 *         raise IOError("cannot open file {0}".format(filename))
 *     if not rfile.IsWritable():             # <<<<<<<<<<<<<<
 *         raise IOError("file {0} is not writable".format(filename))
 *     # If a tree with that name exists, we want to update it
 */

#line 559 "root_numpy/src/tree.pyx"
  __pyx_t_3 = ((!(__pyx_v_rfile->IsWritable() != 0)) != 0);

#line 559 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/tree.pyx":560
 *         raise IOError("cannot open file {0}".format(filename))
 *     if not rfile.IsWritable():
 *         raise IOError("file {0} is not writable".format(filename))             # <<<<<<<<<<<<<<
 *     # If a tree with that name exists, we want to update it
 *     cdef TTree* tree = <TTree*> rfile.Get(treename)
 */

#line 560 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_file_0_is_not_writable, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 560, __pyx_L1_error)

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 560 "root_numpy/src/tree.pyx"
    __pyx_t_7 = NULL;

#line 560 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {

#line 560 "root_numpy/src/tree.pyx"
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);

#line 560 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_7)) {

#line 560 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 560 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_7);

#line 560 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 560 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 560 "root_numpy/src/tree.pyx"
      }

#line 560 "root_numpy/src/tree.pyx"
    }

#line 560 "root_numpy/src/tree.pyx"
    if (!__pyx_t_7) {

#line 560 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_filename); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 560, __pyx_L1_error)

#line 560 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 560 "root_numpy/src/tree.pyx"
    } else {

#line 560 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 560, __pyx_L1_error)

#line 560 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 560 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;

#line 560 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_filename);

#line 560 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_filename);

#line 560 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_filename);

#line 560 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 560, __pyx_L1_error)

#line 560 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 560 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 560 "root_numpy/src/tree.pyx"
    }

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 560 "root_numpy/src/tree.pyx"
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 560, __pyx_L1_error)

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 560 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);

#line 560 "root_numpy/src/tree.pyx"
    __pyx_t_4 = 0;

#line 560 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 560, __pyx_L1_error)

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 560 "root_numpy/src/tree.pyx"
    __PYX_ERR(2, 560, __pyx_L1_error)

    /* "root_numpy/src/tree.pyx":559
 *     if rfile == NULL:
 *         raise IOError("cannot open file {0}".format(filename))
 *     if not rfile.IsWritable():             # <<<<<<<<<<<<<<
 *         raise IOError("file {0} is not writable".format(filename))
 *     # If a tree with that name exists, we want to update it
 */

#line 559 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":562
 *         raise IOError("file {0} is not writable".format(filename))
 *     # If a tree with that name exists, we want to update it
 *     cdef TTree* tree = <TTree*> rfile.Get(treename)             # <<<<<<<<<<<<<<
 *     tree = array2tree(arr, name=treename, tree=tree)
 *     tree.Write(treename, kOverwrite)
 */

#line 562 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_treename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(2, 562, __pyx_L1_error)

#line 562 "root_numpy/src/tree.pyx"
  __pyx_v_tree = ((TTree *)__pyx_v_rfile->Get(__pyx_t_2));

  /* "root_numpy/src/tree.pyx":563
 *     # If a tree with that name exists, we want to update it
 *     cdef TTree* tree = <TTree*> rfile.Get(treename)
 *     tree = array2tree(arr, name=treename, tree=tree)             # <<<<<<<<<<<<<<
 *     tree.Write(treename, kOverwrite)
 *     rfile.Close()
 */

#line 563 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_v_arr) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_arr, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(2, 563, __pyx_L1_error)

#line 563 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_treename); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 563, __pyx_L1_error)

#line 563 "root_numpy/src/tree.pyx"
  __pyx_t_10.__pyx_n = 2;

#line 563 "root_numpy/src/tree.pyx"
  __pyx_t_10.name = __pyx_t_8;

#line 563 "root_numpy/src/tree.pyx"
  __pyx_t_10.tree = __pyx_v_tree;

#line 563 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __pyx_f_13_librootnumpy_array2tree(((PyArrayObject *)__pyx_v_arr), &__pyx_t_10); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 563, __pyx_L1_error)

#line 563 "root_numpy/src/tree.pyx"
  __pyx_v_tree = __pyx_t_9;

  /* "root_numpy/src/tree.pyx":564
 *     cdef TTree* tree = <TTree*> rfile.Get(treename)
 *     tree = array2tree(arr, name=treename, tree=tree)
 *     tree.Write(treename, kOverwrite)             # <<<<<<<<<<<<<<
 *     rfile.Close()
 *     # TODO: clean up tree
 */

#line 564 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_treename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(2, 564, __pyx_L1_error)

#line 564 "root_numpy/src/tree.pyx"
  __pyx_v_tree->Write(__pyx_t_2, TObject::kOverwrite);

  /* "root_numpy/src/tree.pyx":565
 *     tree = array2tree(arr, name=treename, tree=tree)
 *     tree.Write(treename, kOverwrite)
 *     rfile.Close()             # <<<<<<<<<<<<<<
 *     # TODO: clean up tree
 *     del rfile
 */

#line 565 "root_numpy/src/tree.pyx"
  __pyx_v_rfile->Close();

  /* "root_numpy/src/tree.pyx":567
 *     rfile.Close()
 *     # TODO: clean up tree
 *     del rfile             # <<<<<<<<<<<<<<
 */

#line 567 "root_numpy/src/tree.pyx"
  delete __pyx_v_rfile;

  /* "root_numpy/src/tree.pyx":555
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* rfile = Open(filename, mode)
 *     if rfile == NULL:
 */

#line 555 "root_numpy/src/tree.pyx"


#line 555 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 555 "root_numpy/src/tree.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 555 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

#line 555 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.array2root", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 555 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 555 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 555 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 555 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/array.pyx":4
 * ROOT TArray -> NumPy array conversion
 * """
 * cdef inline np.ndarray tonumpyarray(void* data, int size, int dtype) with gil:             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp dims = size
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 */

#line 4 "root_numpy/src/array.pyx"


#line 4 "root_numpy/src/array.pyx"
static CYTHON_INLINE PyArrayObject *__pyx_f_13_librootnumpy_tonumpyarray(void *__pyx_v_data, int __pyx_v_size, int __pyx_v_dtype) {
  npy_intp __pyx_v_dims
#line 4 "root_numpy/src/array.pyx"
;

#line 4 "root_numpy/src/array.pyx"
  PyArrayObject *__pyx_r = NULL;

#line 4 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 4 "root_numpy/src/array.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 4 "root_numpy/src/array.pyx"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 4 "root_numpy/src/array.pyx"
__pyx_gilstate_save = PyGILState_Ensure();

#line 4 "root_numpy/src/array.pyx"
  #endif

#line 4 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("tonumpyarray", 0);

  /* "root_numpy/src/array.pyx":5
 * """
 * cdef inline np.ndarray tonumpyarray(void* data, int size, int dtype) with gil:
 *     cdef np.npy_intp dims = size             # <<<<<<<<<<<<<<
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 */

#line 5 "root_numpy/src/array.pyx"
  __pyx_v_dims = __pyx_v_size;

  /* "root_numpy/src/array.pyx":7
 *     cdef np.npy_intp dims = size
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 7 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 7 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), __pyx_v_dtype, __pyx_v_data); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 7, __pyx_L1_error)

#line 7 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 7 "root_numpy/src/array.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 7, __pyx_L1_error)

#line 7 "root_numpy/src/array.pyx"
  __pyx_r = ((PyArrayObject *)__pyx_t_1);

#line 7 "root_numpy/src/array.pyx"
  __pyx_t_1 = 0;

#line 7 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":4
 * ROOT TArray -> NumPy array conversion
 * """
 * cdef inline np.ndarray tonumpyarray(void* data, int size, int dtype) with gil:             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp dims = size
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 */

#line 4 "root_numpy/src/array.pyx"


#line 4 "root_numpy/src/array.pyx"
  /* function exit code */

#line 4 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 4 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 4 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.tonumpyarray", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 4 "root_numpy/src/array.pyx"
  __pyx_r = 0;

#line 4 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 4 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 4 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 4 "root_numpy/src/array.pyx"
  #ifdef WITH_THREAD

#line 4 "root_numpy/src/array.pyx"
  PyGILState_Release(__pyx_gilstate_save);

#line 4 "root_numpy/src/array.pyx"
  #endif

#line 4 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 4 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":10
 * 
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */

#line 10 "root_numpy/src/array.pyx"


#line 10 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 10 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_21array_d(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_21array_d = 
#line 10 "root_numpy/src/array.pyx"
{"array_d", (PyCFunction)__pyx_pw_13_librootnumpy_21array_d, METH_O, 0};

#line 10 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_21array_d(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 10 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_d (wrapper)", 0);
  __pyx_r = 
#line 10 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_20array_d(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 10 "root_numpy/src/array.pyx"


#line 10 "root_numpy/src/array.pyx"
  /* function exit code */

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 10 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 10 "root_numpy/src/array.pyx"
}

#line 10 "root_numpy/src/array.pyx"


#line 10 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_20array_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayD *__pyx_v__arr
#line 10 "root_numpy/src/array.pyx"
;

#line 10 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 10 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 10 "root_numpy/src/array.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_d", 0);

  /* "root_numpy/src/array.pyx":11
 * 
 * def array_d(root_arr):
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 */

#line 11 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 11, __pyx_L1_error)

#line 11 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayD *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":12
 * def array_d(root_arr):
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 12 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 12 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_DOUBLE)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 12, __pyx_L1_error)

#line 12 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 12 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 12 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 12 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":10
 * 
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */

#line 10 "root_numpy/src/array.pyx"


#line 10 "root_numpy/src/array.pyx"
  /* function exit code */

#line 10 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 10 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 10 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 10 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 10 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 10 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 10 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 10 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":15
 * 
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */

#line 15 "root_numpy/src/array.pyx"


#line 15 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 15 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_23array_f(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_23array_f = 
#line 15 "root_numpy/src/array.pyx"
{"array_f", (PyCFunction)__pyx_pw_13_librootnumpy_23array_f, METH_O, 0};

#line 15 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_23array_f(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 15 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 15 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_f (wrapper)", 0);
  __pyx_r = 
#line 15 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_22array_f(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 15 "root_numpy/src/array.pyx"


#line 15 "root_numpy/src/array.pyx"
  /* function exit code */

#line 15 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 15 "root_numpy/src/array.pyx"
}

#line 15 "root_numpy/src/array.pyx"


#line 15 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_22array_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayF *__pyx_v__arr
#line 15 "root_numpy/src/array.pyx"
;

#line 15 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 15 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 15 "root_numpy/src/array.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 15 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_f", 0);

  /* "root_numpy/src/array.pyx":16
 * 
 * def array_f(root_arr):
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 */

#line 16 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 16, __pyx_L1_error)

#line 16 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayF *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":17
 * def array_f(root_arr):
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 17 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 17 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_FLOAT32)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 17, __pyx_L1_error)

#line 17 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 17 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 17 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 17 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":15
 * 
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */

#line 15 "root_numpy/src/array.pyx"


#line 15 "root_numpy/src/array.pyx"
  /* function exit code */

#line 15 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 15 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 15 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_f", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 15 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 15 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 15 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 15 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 15 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":20
 * 
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */

#line 20 "root_numpy/src/array.pyx"


#line 20 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 20 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_25array_l(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_25array_l = 
#line 20 "root_numpy/src/array.pyx"
{"array_l", (PyCFunction)__pyx_pw_13_librootnumpy_25array_l, METH_O, 0};

#line 20 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_25array_l(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 20 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 20 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 20 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_l (wrapper)", 0);
  __pyx_r = 
#line 20 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_24array_l(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 20 "root_numpy/src/array.pyx"


#line 20 "root_numpy/src/array.pyx"
  /* function exit code */

#line 20 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 20 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 20 "root_numpy/src/array.pyx"
}

#line 20 "root_numpy/src/array.pyx"


#line 20 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_24array_l(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayL *__pyx_v__arr
#line 20 "root_numpy/src/array.pyx"
;

#line 20 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 20 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 20 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 20 "root_numpy/src/array.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 20 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_l", 0);

  /* "root_numpy/src/array.pyx":21
 * 
 * def array_l(root_arr):
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 */

#line 21 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 21, __pyx_L1_error)

#line 21 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayL *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":22
 * def array_l(root_arr):
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 22 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 22 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_LONG)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 22, __pyx_L1_error)

#line 22 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 22 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 22 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 22 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":20
 * 
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */

#line 20 "root_numpy/src/array.pyx"


#line 20 "root_numpy/src/array.pyx"
  /* function exit code */

#line 20 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 20 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 20 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_l", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 20 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 20 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 20 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 20 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 20 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 20 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":25
 * 
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */

#line 25 "root_numpy/src/array.pyx"


#line 25 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 25 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_27array_i(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_27array_i = 
#line 25 "root_numpy/src/array.pyx"
{"array_i", (PyCFunction)__pyx_pw_13_librootnumpy_27array_i, METH_O, 0};

#line 25 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_27array_i(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 25 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 25 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 25 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_i (wrapper)", 0);
  __pyx_r = 
#line 25 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_26array_i(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 25 "root_numpy/src/array.pyx"


#line 25 "root_numpy/src/array.pyx"
  /* function exit code */

#line 25 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 25 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 25 "root_numpy/src/array.pyx"
}

#line 25 "root_numpy/src/array.pyx"


#line 25 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_26array_i(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayI *__pyx_v__arr
#line 25 "root_numpy/src/array.pyx"
;

#line 25 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 25 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 25 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 25 "root_numpy/src/array.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 25 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_i", 0);

  /* "root_numpy/src/array.pyx":26
 * 
 * def array_i(root_arr):
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 */

#line 26 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 26, __pyx_L1_error)

#line 26 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayI *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":27
 * def array_i(root_arr):
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 27 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 27 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_INT)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 27, __pyx_L1_error)

#line 27 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 27 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 27 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 27 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":25
 * 
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */

#line 25 "root_numpy/src/array.pyx"


#line 25 "root_numpy/src/array.pyx"
  /* function exit code */

#line 25 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 25 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 25 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_i", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 25 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 25 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 25 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 25 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 25 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 25 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":30
 * 
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */

#line 30 "root_numpy/src/array.pyx"


#line 30 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 30 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_29array_s(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_29array_s = 
#line 30 "root_numpy/src/array.pyx"
{"array_s", (PyCFunction)__pyx_pw_13_librootnumpy_29array_s, METH_O, 0};

#line 30 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_29array_s(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 30 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_s (wrapper)", 0);
  __pyx_r = 
#line 30 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_28array_s(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 30 "root_numpy/src/array.pyx"


#line 30 "root_numpy/src/array.pyx"
  /* function exit code */

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 30 "root_numpy/src/array.pyx"
}

#line 30 "root_numpy/src/array.pyx"


#line 30 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_28array_s(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayS *__pyx_v__arr
#line 30 "root_numpy/src/array.pyx"
;

#line 30 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 30 "root_numpy/src/array.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_s", 0);

  /* "root_numpy/src/array.pyx":31
 * 
 * def array_s(root_arr):
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 */

#line 31 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 31, __pyx_L1_error)

#line 31 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayS *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":32
 * def array_s(root_arr):
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 32 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 32 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_SHORT)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 32, __pyx_L1_error)

#line 32 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 32 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 32 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 32 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":30
 * 
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */

#line 30 "root_numpy/src/array.pyx"


#line 30 "root_numpy/src/array.pyx"
  /* function exit code */

#line 30 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 30 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 30 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_s", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 30 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 30 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 30 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 30 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":35
 * 
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 35 "root_numpy/src/array.pyx"


#line 35 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 35 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_31array_c(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_31array_c = 
#line 35 "root_numpy/src/array.pyx"
{"array_c", (PyCFunction)__pyx_pw_13_librootnumpy_31array_c, METH_O, 0};

#line 35 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_31array_c(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 35 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 35 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 35 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_c (wrapper)", 0);
  __pyx_r = 
#line 35 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_30array_c(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 35 "root_numpy/src/array.pyx"


#line 35 "root_numpy/src/array.pyx"
  /* function exit code */

#line 35 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 35 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 35 "root_numpy/src/array.pyx"
}

#line 35 "root_numpy/src/array.pyx"


#line 35 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_30array_c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayC *__pyx_v__arr
#line 35 "root_numpy/src/array.pyx"
;

#line 35 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 35 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 35 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 35 "root_numpy/src/array.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 35 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_c", 0);

  /* "root_numpy/src/array.pyx":36
 * 
 * def array_c(root_arr):
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 * 
 */

#line 36 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 36, __pyx_L1_error)

#line 36 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayC *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":37
 * def array_c(root_arr):
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 37 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 37 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_BYTE)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 37, __pyx_L1_error)

#line 37 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 37 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 37 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 37 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":35
 * 
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 35 "root_numpy/src/array.pyx"


#line 35 "root_numpy/src/array.pyx"
  /* function exit code */

#line 35 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 35 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 35 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_c", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 35 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 35 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 35 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 35 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 35 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 35 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":40
 * 
 * 
 * def array_h1c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 40 "root_numpy/src/array.pyx"


#line 40 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 40 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_33array_h1c(PyObject *__pyx_self, PyObject *__pyx_v_root_hist); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_33array_h1c = 
#line 40 "root_numpy/src/array.pyx"
{"array_h1c", (PyCFunction)__pyx_pw_13_librootnumpy_33array_h1c, METH_O, 0};

#line 40 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_33array_h1c(PyObject *__pyx_self, PyObject *__pyx_v_root_hist) {

#line 40 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 40 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 40 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_h1c (wrapper)", 0);
  __pyx_r = 
#line 40 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_32array_h1c(__pyx_self, ((PyObject *)__pyx_v_root_hist));

#line 40 "root_numpy/src/array.pyx"


#line 40 "root_numpy/src/array.pyx"
  /* function exit code */

#line 40 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 40 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 40 "root_numpy/src/array.pyx"
}

#line 40 "root_numpy/src/array.pyx"


#line 40 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_32array_h1c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist) {
  TH1C *__pyx_v__hist
#line 40 "root_numpy/src/array.pyx"
;
  TArrayC *__pyx_v__arr
#line 40 "root_numpy/src/array.pyx"
;

#line 40 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 40 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 40 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 40 "root_numpy/src/array.pyx"
  TArrayC *__pyx_t_2;

#line 40 "root_numpy/src/array.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 40 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_h1c", 0);

  /* "root_numpy/src/array.pyx":41
 * 
 * def array_h1c(root_hist):
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 41 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 41, __pyx_L1_error)

#line 41 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH1C *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":42
 * def array_h1c(root_hist):
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 * 
 */

#line 42 "root_numpy/src/array.pyx"
  try {

#line 42 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayC *>(__pyx_v__hist);

#line 42 "root_numpy/src/array.pyx"
  } catch(...) {

#line 42 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 42 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 42, __pyx_L1_error)

#line 42 "root_numpy/src/array.pyx"
  }

#line 42 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":43
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 43 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 43 "root_numpy/src/array.pyx"
  __pyx_t_3 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_BYTE)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 43, __pyx_L1_error)

#line 43 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 43 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_3;

#line 43 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 43 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":40
 * 
 * 
 * def array_h1c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 40 "root_numpy/src/array.pyx"


#line 40 "root_numpy/src/array.pyx"
  /* function exit code */

#line 40 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 40 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 40 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_h1c", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 40 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 40 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 40 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 40 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 40 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 40 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":46
 * 
 * 
 * def array_h2c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 46 "root_numpy/src/array.pyx"


#line 46 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 46 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_35array_h2c(PyObject *__pyx_self, PyObject *__pyx_v_root_hist); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_35array_h2c = 
#line 46 "root_numpy/src/array.pyx"
{"array_h2c", (PyCFunction)__pyx_pw_13_librootnumpy_35array_h2c, METH_O, 0};

#line 46 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_35array_h2c(PyObject *__pyx_self, PyObject *__pyx_v_root_hist) {

#line 46 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 46 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 46 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_h2c (wrapper)", 0);
  __pyx_r = 
#line 46 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_34array_h2c(__pyx_self, ((PyObject *)__pyx_v_root_hist));

#line 46 "root_numpy/src/array.pyx"


#line 46 "root_numpy/src/array.pyx"
  /* function exit code */

#line 46 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 46 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 46 "root_numpy/src/array.pyx"
}

#line 46 "root_numpy/src/array.pyx"


#line 46 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_34array_h2c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist) {
  TH2C *__pyx_v__hist
#line 46 "root_numpy/src/array.pyx"
;
  TArrayC *__pyx_v__arr
#line 46 "root_numpy/src/array.pyx"
;

#line 46 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 46 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 46 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 46 "root_numpy/src/array.pyx"
  TArrayC *__pyx_t_2;

#line 46 "root_numpy/src/array.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 46 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_h2c", 0);

  /* "root_numpy/src/array.pyx":47
 * 
 * def array_h2c(root_hist):
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 47 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH2C *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":48
 * def array_h2c(root_hist):
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 * 
 */

#line 48 "root_numpy/src/array.pyx"
  try {

#line 48 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayC *>(__pyx_v__hist);

#line 48 "root_numpy/src/array.pyx"
  } catch(...) {

#line 48 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 48 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 48, __pyx_L1_error)

#line 48 "root_numpy/src/array.pyx"
  }

#line 48 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":49
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 49 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 49 "root_numpy/src/array.pyx"
  __pyx_t_3 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_BYTE)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 49, __pyx_L1_error)

#line 49 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 49 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_3;

#line 49 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 49 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":46
 * 
 * 
 * def array_h2c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 46 "root_numpy/src/array.pyx"


#line 46 "root_numpy/src/array.pyx"
  /* function exit code */

#line 46 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 46 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 46 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_h2c", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 46 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 46 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 46 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 46 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 46 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 46 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":52
 * 
 * 
 * def array_h3c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 52 "root_numpy/src/array.pyx"


#line 52 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 52 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_37array_h3c(PyObject *__pyx_self, PyObject *__pyx_v_root_hist); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_37array_h3c = 
#line 52 "root_numpy/src/array.pyx"
{"array_h3c", (PyCFunction)__pyx_pw_13_librootnumpy_37array_h3c, METH_O, 0};

#line 52 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_37array_h3c(PyObject *__pyx_self, PyObject *__pyx_v_root_hist) {

#line 52 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 52 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 52 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_h3c (wrapper)", 0);
  __pyx_r = 
#line 52 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_36array_h3c(__pyx_self, ((PyObject *)__pyx_v_root_hist));

#line 52 "root_numpy/src/array.pyx"


#line 52 "root_numpy/src/array.pyx"
  /* function exit code */

#line 52 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 52 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 52 "root_numpy/src/array.pyx"
}

#line 52 "root_numpy/src/array.pyx"


#line 52 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_36array_h3c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist) {
  TH3C *__pyx_v__hist
#line 52 "root_numpy/src/array.pyx"
;
  TArrayC *__pyx_v__arr
#line 52 "root_numpy/src/array.pyx"
;

#line 52 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 52 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 52 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 52 "root_numpy/src/array.pyx"
  TArrayC *__pyx_t_2;

#line 52 "root_numpy/src/array.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 52 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_h3c", 0);

  /* "root_numpy/src/array.pyx":53
 * 
 * def array_h3c(root_hist):
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 53 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 53, __pyx_L1_error)

#line 53 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH3C *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":54
 * def array_h3c(root_hist):
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 * 
 */

#line 54 "root_numpy/src/array.pyx"
  try {

#line 54 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayC *>(__pyx_v__hist);

#line 54 "root_numpy/src/array.pyx"
  } catch(...) {

#line 54 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 54 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 54, __pyx_L1_error)

#line 54 "root_numpy/src/array.pyx"
  }

#line 54 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":55
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)             # <<<<<<<<<<<<<<
 * 
 * """
 */

#line 55 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 55 "root_numpy/src/array.pyx"
  __pyx_t_3 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_BYTE)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 55, __pyx_L1_error)

#line 55 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 55 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_3;

#line 55 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 55 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":52
 * 
 * 
 * def array_h3c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 52 "root_numpy/src/array.pyx"


#line 52 "root_numpy/src/array.pyx"
  /* function exit code */

#line 52 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 52 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 52 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_h3c", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 52 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 52 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 52 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 52 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 52 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 52 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":62
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1D* _hist = <TH1D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 62 "root_numpy/src/array.pyx"


#line 62 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 62 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_39h1d_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_39h1d_array = 
#line 62 "root_numpy/src/array.pyx"
{"h1d_array", (PyCFunction)__pyx_pw_13_librootnumpy_39h1d_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 62 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_39h1d_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 62 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 62 "root_numpy/src/array.pyx"
;

#line 62 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 62 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 62 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h1d_array (wrapper)", 0);

#line 62 "root_numpy/src/array.pyx"
  {

#line 62 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 62 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 62 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 62 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 62 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 62 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 62 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 62 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 62 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 62 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 62 "root_numpy/src/array.pyx"
      }

#line 62 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 62 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 62 "root_numpy/src/array.pyx"
        case  0:

#line 62 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 62 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 62 "root_numpy/src/array.pyx"
        case  1:

#line 62 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 62 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h1d_array", 1, 2, 2, 1); 
#line 62 "root_numpy/src/array.pyx"
__PYX_ERR(3, 62, __pyx_L3_error)

#line 62 "root_numpy/src/array.pyx"
        }

#line 62 "root_numpy/src/array.pyx"
      }

#line 62 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 62 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h1d_array") < 0)) __PYX_ERR(3, 62, __pyx_L3_error)

#line 62 "root_numpy/src/array.pyx"
      }

#line 62 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 62 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 62 "root_numpy/src/array.pyx"
    } else {

#line 62 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 62 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 62 "root_numpy/src/array.pyx"
    }

#line 62 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 62 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 62 "root_numpy/src/array.pyx"
  }

#line 62 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 62 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h1d_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 62 "root_numpy/src/array.pyx"
__PYX_ERR(3, 62, __pyx_L3_error)

#line 62 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 62 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h1d_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 62 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 62 "root_numpy/src/array.pyx"
  return NULL;

#line 62 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 62 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 62, __pyx_L1_error)
  __pyx_r = 
#line 62 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_38h1d_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 62 "root_numpy/src/array.pyx"


#line 62 "root_numpy/src/array.pyx"
  /* function exit code */

#line 62 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 62 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 62 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 62 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 62 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 62 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 62 "root_numpy/src/array.pyx"
}

#line 62 "root_numpy/src/array.pyx"


#line 62 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_38h1d_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH1D *__pyx_v__hist
#line 62 "root_numpy/src/array.pyx"
;
  TArrayD *__pyx_v__arr
#line 62 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 62 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 62 "root_numpy/src/array.pyx"
;

#line 62 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 62 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 62 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 62 "root_numpy/src/array.pyx"
  TArrayD *__pyx_t_2;

#line 62 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 62 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h1d_array", 0);

#line 62 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 62 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 62 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 62 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 62 "root_numpy/src/array.pyx"
  {

#line 62 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 62 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 62, __pyx_L1_error)

#line 62 "root_numpy/src/array.pyx"
  }

#line 62 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":63
 * @cython.wraparound(False)
 * def h1d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):
 *     cdef TH1D* _hist = <TH1D*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 63 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 63, __pyx_L1_error)

#line 63 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH1D *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":64
 * def h1d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):
 *     cdef TH1D* _hist = <TH1D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 64 "root_numpy/src/array.pyx"
  try {

#line 64 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayD *>(__pyx_v__hist);

#line 64 "root_numpy/src/array.pyx"
  } catch(...) {

#line 64 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 64 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 64, __pyx_L1_error)

#line 64 "root_numpy/src/array.pyx"
  }

#line 64 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":65
 *     cdef TH1D* _hist = <TH1D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 65 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 65 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":62
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1D* _hist = <TH1D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 62 "root_numpy/src/array.pyx"


#line 62 "root_numpy/src/array.pyx"
  /* function exit code */

#line 62 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 62 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 62 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 62 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 62 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 62 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 62 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 62 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 62 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 62 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h1d_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 62 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 62 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 62 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 62 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 62 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 62 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 62 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 62 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 62 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":70
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2D* _hist = <TH2D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 70 "root_numpy/src/array.pyx"


#line 70 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 70 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_41h2d_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_41h2d_array = 
#line 70 "root_numpy/src/array.pyx"
{"h2d_array", (PyCFunction)__pyx_pw_13_librootnumpy_41h2d_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 70 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_41h2d_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 70 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 70 "root_numpy/src/array.pyx"
;

#line 70 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 70 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 70 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h2d_array (wrapper)", 0);

#line 70 "root_numpy/src/array.pyx"
  {

#line 70 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 70 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 70 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 70 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 70 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 70 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 70 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 70 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 70 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 70 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 70 "root_numpy/src/array.pyx"
      }

#line 70 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 70 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 70 "root_numpy/src/array.pyx"
        case  0:

#line 70 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 70 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 70 "root_numpy/src/array.pyx"
        case  1:

#line 70 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 70 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h2d_array", 1, 2, 2, 1); 
#line 70 "root_numpy/src/array.pyx"
__PYX_ERR(3, 70, __pyx_L3_error)

#line 70 "root_numpy/src/array.pyx"
        }

#line 70 "root_numpy/src/array.pyx"
      }

#line 70 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 70 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h2d_array") < 0)) __PYX_ERR(3, 70, __pyx_L3_error)

#line 70 "root_numpy/src/array.pyx"
      }

#line 70 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 70 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 70 "root_numpy/src/array.pyx"
    } else {

#line 70 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 70 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 70 "root_numpy/src/array.pyx"
    }

#line 70 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 70 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 70 "root_numpy/src/array.pyx"
  }

#line 70 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 70 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h2d_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 70 "root_numpy/src/array.pyx"
__PYX_ERR(3, 70, __pyx_L3_error)

#line 70 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 70 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h2d_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 70 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 70 "root_numpy/src/array.pyx"
  return NULL;

#line 70 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 70 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 70, __pyx_L1_error)
  __pyx_r = 
#line 70 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_40h2d_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 70 "root_numpy/src/array.pyx"


#line 70 "root_numpy/src/array.pyx"
  /* function exit code */

#line 70 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 70 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 70 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 70 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 70 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 70 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 70 "root_numpy/src/array.pyx"
}

#line 70 "root_numpy/src/array.pyx"


#line 70 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_40h2d_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH2D *__pyx_v__hist
#line 70 "root_numpy/src/array.pyx"
;
  TArrayD *__pyx_v__arr
#line 70 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 70 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 70 "root_numpy/src/array.pyx"
;

#line 70 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 70 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 70 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 70 "root_numpy/src/array.pyx"
  TArrayD *__pyx_t_2;

#line 70 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 70 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h2d_array", 0);

#line 70 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 70 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 70 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 70 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 70 "root_numpy/src/array.pyx"
  {

#line 70 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 70 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 70, __pyx_L1_error)

#line 70 "root_numpy/src/array.pyx"
  }

#line 70 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":71
 * @cython.wraparound(False)
 * def h2d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):
 *     cdef TH2D* _hist = <TH2D*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 71 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 71, __pyx_L1_error)

#line 71 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH2D *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":72
 * def h2d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):
 *     cdef TH2D* _hist = <TH2D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 72 "root_numpy/src/array.pyx"
  try {

#line 72 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayD *>(__pyx_v__hist);

#line 72 "root_numpy/src/array.pyx"
  } catch(...) {

#line 72 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 72 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 72, __pyx_L1_error)

#line 72 "root_numpy/src/array.pyx"
  }

#line 72 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":73
 *     cdef TH2D* _hist = <TH2D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 73 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 73 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":70
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2D* _hist = <TH2D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 70 "root_numpy/src/array.pyx"


#line 70 "root_numpy/src/array.pyx"
  /* function exit code */

#line 70 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 70 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 70 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 70 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 70 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 70 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 70 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 70 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 70 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 70 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h2d_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 70 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 70 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 70 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 70 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 70 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 70 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 70 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 70 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 70 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":78
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3D* _hist = <TH3D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 78 "root_numpy/src/array.pyx"


#line 78 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 78 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_43h3d_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_43h3d_array = 
#line 78 "root_numpy/src/array.pyx"
{"h3d_array", (PyCFunction)__pyx_pw_13_librootnumpy_43h3d_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 78 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_43h3d_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 78 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 78 "root_numpy/src/array.pyx"
;

#line 78 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 78 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 78 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h3d_array (wrapper)", 0);

#line 78 "root_numpy/src/array.pyx"
  {

#line 78 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 78 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 78 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 78 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 78 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 78 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 78 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 78 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 78 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 78 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "root_numpy/src/array.pyx"
      }

#line 78 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 78 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 78 "root_numpy/src/array.pyx"
        case  0:

#line 78 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 78 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "root_numpy/src/array.pyx"
        case  1:

#line 78 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 78 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h3d_array", 1, 2, 2, 1); 
#line 78 "root_numpy/src/array.pyx"
__PYX_ERR(3, 78, __pyx_L3_error)

#line 78 "root_numpy/src/array.pyx"
        }

#line 78 "root_numpy/src/array.pyx"
      }

#line 78 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 78 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h3d_array") < 0)) __PYX_ERR(3, 78, __pyx_L3_error)

#line 78 "root_numpy/src/array.pyx"
      }

#line 78 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 78 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 78 "root_numpy/src/array.pyx"
    } else {

#line 78 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 78 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 78 "root_numpy/src/array.pyx"
    }

#line 78 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 78 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 78 "root_numpy/src/array.pyx"
  }

#line 78 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 78 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h3d_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 78 "root_numpy/src/array.pyx"
__PYX_ERR(3, 78, __pyx_L3_error)

#line 78 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 78 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h3d_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 78 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "root_numpy/src/array.pyx"
  return NULL;

#line 78 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 78 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 78, __pyx_L1_error)
  __pyx_r = 
#line 78 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_42h3d_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 78 "root_numpy/src/array.pyx"


#line 78 "root_numpy/src/array.pyx"
  /* function exit code */

#line 78 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 78 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 78 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 78 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 78 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 78 "root_numpy/src/array.pyx"
}

#line 78 "root_numpy/src/array.pyx"


#line 78 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_42h3d_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH3D *__pyx_v__hist
#line 78 "root_numpy/src/array.pyx"
;
  TArrayD *__pyx_v__arr
#line 78 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 78 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 78 "root_numpy/src/array.pyx"
;

#line 78 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 78 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 78 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 78 "root_numpy/src/array.pyx"
  TArrayD *__pyx_t_2;

#line 78 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 78 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h3d_array", 0);

#line 78 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 78 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 78 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 78 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 78 "root_numpy/src/array.pyx"
  {

#line 78 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 78 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 78, __pyx_L1_error)

#line 78 "root_numpy/src/array.pyx"
  }

#line 78 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":79
 * @cython.wraparound(False)
 * def h3d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):
 *     cdef TH3D* _hist = <TH3D*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 79 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 79, __pyx_L1_error)

#line 79 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH3D *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":80
 * def h3d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):
 *     cdef TH3D* _hist = <TH3D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 80 "root_numpy/src/array.pyx"
  try {

#line 80 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayD *>(__pyx_v__hist);

#line 80 "root_numpy/src/array.pyx"
  } catch(...) {

#line 80 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 80 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 80, __pyx_L1_error)

#line 80 "root_numpy/src/array.pyx"
  }

#line 80 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":81
 *     cdef TH3D* _hist = <TH3D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 81 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 81 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":78
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3D* _hist = <TH3D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 78 "root_numpy/src/array.pyx"


#line 78 "root_numpy/src/array.pyx"
  /* function exit code */

#line 78 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 78 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 78 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 78 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 78 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 78 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 78 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 78 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 78 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 78 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h3d_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 78 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 78 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 78 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 78 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 78 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 78 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 78 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 78 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":86
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1F* _hist = <TH1F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 86 "root_numpy/src/array.pyx"


#line 86 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 86 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_45h1f_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_45h1f_array = 
#line 86 "root_numpy/src/array.pyx"
{"h1f_array", (PyCFunction)__pyx_pw_13_librootnumpy_45h1f_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 86 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_45h1f_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 86 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 86 "root_numpy/src/array.pyx"
;

#line 86 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 86 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 86 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h1f_array (wrapper)", 0);

#line 86 "root_numpy/src/array.pyx"
  {

#line 86 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 86 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 86 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 86 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 86 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 86 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 86 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 86 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 86 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 86 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 86 "root_numpy/src/array.pyx"
      }

#line 86 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 86 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 86 "root_numpy/src/array.pyx"
        case  0:

#line 86 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 86 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 86 "root_numpy/src/array.pyx"
        case  1:

#line 86 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 86 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h1f_array", 1, 2, 2, 1); 
#line 86 "root_numpy/src/array.pyx"
__PYX_ERR(3, 86, __pyx_L3_error)

#line 86 "root_numpy/src/array.pyx"
        }

#line 86 "root_numpy/src/array.pyx"
      }

#line 86 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 86 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h1f_array") < 0)) __PYX_ERR(3, 86, __pyx_L3_error)

#line 86 "root_numpy/src/array.pyx"
      }

#line 86 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 86 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 86 "root_numpy/src/array.pyx"
    } else {

#line 86 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 86 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 86 "root_numpy/src/array.pyx"
    }

#line 86 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 86 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 86 "root_numpy/src/array.pyx"
  }

#line 86 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 86 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h1f_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 86 "root_numpy/src/array.pyx"
__PYX_ERR(3, 86, __pyx_L3_error)

#line 86 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 86 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h1f_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 86 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 86 "root_numpy/src/array.pyx"
  return NULL;

#line 86 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 86 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 86, __pyx_L1_error)
  __pyx_r = 
#line 86 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_44h1f_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 86 "root_numpy/src/array.pyx"


#line 86 "root_numpy/src/array.pyx"
  /* function exit code */

#line 86 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 86 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 86 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 86 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 86 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 86 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 86 "root_numpy/src/array.pyx"
}

#line 86 "root_numpy/src/array.pyx"


#line 86 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_44h1f_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH1F *__pyx_v__hist
#line 86 "root_numpy/src/array.pyx"
;
  TArrayF *__pyx_v__arr
#line 86 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 86 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 86 "root_numpy/src/array.pyx"
;

#line 86 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 86 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 86 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 86 "root_numpy/src/array.pyx"
  TArrayF *__pyx_t_2;

#line 86 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 86 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h1f_array", 0);

#line 86 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 86 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 86 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 86 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 86 "root_numpy/src/array.pyx"
  {

#line 86 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 86 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 86, __pyx_L1_error)

#line 86 "root_numpy/src/array.pyx"
  }

#line 86 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":87
 * @cython.wraparound(False)
 * def h1f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):
 *     cdef TH1F* _hist = <TH1F*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 87 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 87, __pyx_L1_error)

#line 87 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH1F *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":88
 * def h1f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):
 *     cdef TH1F* _hist = <TH1F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 88 "root_numpy/src/array.pyx"
  try {

#line 88 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayF *>(__pyx_v__hist);

#line 88 "root_numpy/src/array.pyx"
  } catch(...) {

#line 88 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 88 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 88, __pyx_L1_error)

#line 88 "root_numpy/src/array.pyx"
  }

#line 88 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":89
 *     cdef TH1F* _hist = <TH1F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 89 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 89 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":86
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1F* _hist = <TH1F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 86 "root_numpy/src/array.pyx"


#line 86 "root_numpy/src/array.pyx"
  /* function exit code */

#line 86 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 86 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 86 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 86 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 86 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 86 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 86 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 86 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 86 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 86 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h1f_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 86 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 86 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 86 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 86 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 86 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 86 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 86 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 86 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 86 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2F* _hist = <TH2F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 94 "root_numpy/src/array.pyx"


#line 94 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 94 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_47h2f_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_47h2f_array = 
#line 94 "root_numpy/src/array.pyx"
{"h2f_array", (PyCFunction)__pyx_pw_13_librootnumpy_47h2f_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 94 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_47h2f_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 94 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 94 "root_numpy/src/array.pyx"
;

#line 94 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 94 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 94 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h2f_array (wrapper)", 0);

#line 94 "root_numpy/src/array.pyx"
  {

#line 94 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 94 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 94 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 94 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 94 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 94 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 94 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 94 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 94 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 94 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 94 "root_numpy/src/array.pyx"
      }

#line 94 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 94 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 94 "root_numpy/src/array.pyx"
        case  0:

#line 94 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 94 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 94 "root_numpy/src/array.pyx"
        case  1:

#line 94 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 94 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h2f_array", 1, 2, 2, 1); 
#line 94 "root_numpy/src/array.pyx"
__PYX_ERR(3, 94, __pyx_L3_error)

#line 94 "root_numpy/src/array.pyx"
        }

#line 94 "root_numpy/src/array.pyx"
      }

#line 94 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 94 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h2f_array") < 0)) __PYX_ERR(3, 94, __pyx_L3_error)

#line 94 "root_numpy/src/array.pyx"
      }

#line 94 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 94 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 94 "root_numpy/src/array.pyx"
    } else {

#line 94 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 94 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 94 "root_numpy/src/array.pyx"
    }

#line 94 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 94 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 94 "root_numpy/src/array.pyx"
  }

#line 94 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 94 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h2f_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 94 "root_numpy/src/array.pyx"
__PYX_ERR(3, 94, __pyx_L3_error)

#line 94 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 94 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h2f_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 94 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "root_numpy/src/array.pyx"
  return NULL;

#line 94 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 94 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 94, __pyx_L1_error)
  __pyx_r = 
#line 94 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_46h2f_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 94 "root_numpy/src/array.pyx"


#line 94 "root_numpy/src/array.pyx"
  /* function exit code */

#line 94 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 94 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 94 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 94 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 94 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 94 "root_numpy/src/array.pyx"
}

#line 94 "root_numpy/src/array.pyx"


#line 94 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_46h2f_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH2F *__pyx_v__hist
#line 94 "root_numpy/src/array.pyx"
;
  TArrayF *__pyx_v__arr
#line 94 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 94 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 94 "root_numpy/src/array.pyx"
;

#line 94 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 94 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 94 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 94 "root_numpy/src/array.pyx"
  TArrayF *__pyx_t_2;

#line 94 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 94 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h2f_array", 0);

#line 94 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 94 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 94 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 94 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 94 "root_numpy/src/array.pyx"
  {

#line 94 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 94 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 94, __pyx_L1_error)

#line 94 "root_numpy/src/array.pyx"
  }

#line 94 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":95
 * @cython.wraparound(False)
 * def h2f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):
 *     cdef TH2F* _hist = <TH2F*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 95 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 95, __pyx_L1_error)

#line 95 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH2F *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":96
 * def h2f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):
 *     cdef TH2F* _hist = <TH2F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 96 "root_numpy/src/array.pyx"
  try {

#line 96 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayF *>(__pyx_v__hist);

#line 96 "root_numpy/src/array.pyx"
  } catch(...) {

#line 96 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 96 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 96, __pyx_L1_error)

#line 96 "root_numpy/src/array.pyx"
  }

#line 96 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":97
 *     cdef TH2F* _hist = <TH2F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 97 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 97 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2F* _hist = <TH2F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 94 "root_numpy/src/array.pyx"


#line 94 "root_numpy/src/array.pyx"
  /* function exit code */

#line 94 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 94 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 94 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 94 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 94 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 94 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 94 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 94 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 94 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 94 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h2f_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 94 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 94 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 94 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 94 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 94 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 94 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 94 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 94 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":102
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3F* _hist = <TH3F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 102 "root_numpy/src/array.pyx"


#line 102 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 102 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_49h3f_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_49h3f_array = 
#line 102 "root_numpy/src/array.pyx"
{"h3f_array", (PyCFunction)__pyx_pw_13_librootnumpy_49h3f_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 102 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_49h3f_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 102 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 102 "root_numpy/src/array.pyx"
;

#line 102 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 102 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 102 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h3f_array (wrapper)", 0);

#line 102 "root_numpy/src/array.pyx"
  {

#line 102 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 102 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 102 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 102 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 102 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 102 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 102 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 102 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 102 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 102 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 102 "root_numpy/src/array.pyx"
      }

#line 102 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 102 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 102 "root_numpy/src/array.pyx"
        case  0:

#line 102 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 102 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 102 "root_numpy/src/array.pyx"
        case  1:

#line 102 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 102 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h3f_array", 1, 2, 2, 1); 
#line 102 "root_numpy/src/array.pyx"
__PYX_ERR(3, 102, __pyx_L3_error)

#line 102 "root_numpy/src/array.pyx"
        }

#line 102 "root_numpy/src/array.pyx"
      }

#line 102 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 102 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h3f_array") < 0)) __PYX_ERR(3, 102, __pyx_L3_error)

#line 102 "root_numpy/src/array.pyx"
      }

#line 102 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 102 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 102 "root_numpy/src/array.pyx"
    } else {

#line 102 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 102 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 102 "root_numpy/src/array.pyx"
    }

#line 102 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 102 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 102 "root_numpy/src/array.pyx"
  }

#line 102 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 102 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h3f_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 102 "root_numpy/src/array.pyx"
__PYX_ERR(3, 102, __pyx_L3_error)

#line 102 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 102 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h3f_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 102 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 102 "root_numpy/src/array.pyx"
  return NULL;

#line 102 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 102 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 102, __pyx_L1_error)
  __pyx_r = 
#line 102 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_48h3f_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 102 "root_numpy/src/array.pyx"


#line 102 "root_numpy/src/array.pyx"
  /* function exit code */

#line 102 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 102 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 102 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 102 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 102 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 102 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 102 "root_numpy/src/array.pyx"
}

#line 102 "root_numpy/src/array.pyx"


#line 102 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_48h3f_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH3F *__pyx_v__hist
#line 102 "root_numpy/src/array.pyx"
;
  TArrayF *__pyx_v__arr
#line 102 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 102 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 102 "root_numpy/src/array.pyx"
;

#line 102 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 102 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 102 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 102 "root_numpy/src/array.pyx"
  TArrayF *__pyx_t_2;

#line 102 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 102 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h3f_array", 0);

#line 102 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 102 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 102 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 102 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 102 "root_numpy/src/array.pyx"
  {

#line 102 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 102 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 102, __pyx_L1_error)

#line 102 "root_numpy/src/array.pyx"
  }

#line 102 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":103
 * @cython.wraparound(False)
 * def h3f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):
 *     cdef TH3F* _hist = <TH3F*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 103 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH3F *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":104
 * def h3f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):
 *     cdef TH3F* _hist = <TH3F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 104 "root_numpy/src/array.pyx"
  try {

#line 104 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayF *>(__pyx_v__hist);

#line 104 "root_numpy/src/array.pyx"
  } catch(...) {

#line 104 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 104 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 104, __pyx_L1_error)

#line 104 "root_numpy/src/array.pyx"
  }

#line 104 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":105
 *     cdef TH3F* _hist = <TH3F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 105 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 105 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":102
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3F* _hist = <TH3F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 102 "root_numpy/src/array.pyx"


#line 102 "root_numpy/src/array.pyx"
  /* function exit code */

#line 102 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 102 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 102 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 102 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 102 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 102 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 102 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 102 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 102 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 102 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h3f_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 102 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 102 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 102 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 102 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 102 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 102 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 102 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 102 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 102 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":110
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1I* _hist = <TH1I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 110 "root_numpy/src/array.pyx"


#line 110 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 110 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_51h1i_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_51h1i_array = 
#line 110 "root_numpy/src/array.pyx"
{"h1i_array", (PyCFunction)__pyx_pw_13_librootnumpy_51h1i_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 110 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_51h1i_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 110 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 110 "root_numpy/src/array.pyx"
;

#line 110 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 110 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 110 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h1i_array (wrapper)", 0);

#line 110 "root_numpy/src/array.pyx"
  {

#line 110 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 110 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 110 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 110 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 110 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 110 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 110 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 110 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 110 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 110 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 110 "root_numpy/src/array.pyx"
      }

#line 110 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 110 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 110 "root_numpy/src/array.pyx"
        case  0:

#line 110 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 110 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 110 "root_numpy/src/array.pyx"
        case  1:

#line 110 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 110 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h1i_array", 1, 2, 2, 1); 
#line 110 "root_numpy/src/array.pyx"
__PYX_ERR(3, 110, __pyx_L3_error)

#line 110 "root_numpy/src/array.pyx"
        }

#line 110 "root_numpy/src/array.pyx"
      }

#line 110 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 110 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h1i_array") < 0)) __PYX_ERR(3, 110, __pyx_L3_error)

#line 110 "root_numpy/src/array.pyx"
      }

#line 110 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 110 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 110 "root_numpy/src/array.pyx"
    } else {

#line 110 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 110 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 110 "root_numpy/src/array.pyx"
    }

#line 110 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 110 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 110 "root_numpy/src/array.pyx"
  }

#line 110 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 110 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h1i_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 110 "root_numpy/src/array.pyx"
__PYX_ERR(3, 110, __pyx_L3_error)

#line 110 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 110 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h1i_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 110 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 110 "root_numpy/src/array.pyx"
  return NULL;

#line 110 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 110 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 110, __pyx_L1_error)
  __pyx_r = 
#line 110 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_50h1i_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 110 "root_numpy/src/array.pyx"


#line 110 "root_numpy/src/array.pyx"
  /* function exit code */

#line 110 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 110 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 110 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 110 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 110 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 110 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 110 "root_numpy/src/array.pyx"
}

#line 110 "root_numpy/src/array.pyx"


#line 110 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_50h1i_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH1I *__pyx_v__hist
#line 110 "root_numpy/src/array.pyx"
;
  TArrayI *__pyx_v__arr
#line 110 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 110 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 110 "root_numpy/src/array.pyx"
;

#line 110 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 110 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 110 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 110 "root_numpy/src/array.pyx"
  TArrayI *__pyx_t_2;

#line 110 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 110 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h1i_array", 0);

#line 110 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 110 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 110 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 110 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 110 "root_numpy/src/array.pyx"
  {

#line 110 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 110 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 110, __pyx_L1_error)

#line 110 "root_numpy/src/array.pyx"
  }

#line 110 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":111
 * @cython.wraparound(False)
 * def h1i_array(root_hist, np.ndarray[int, ndim=1] array):
 *     cdef TH1I* _hist = <TH1I*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 111 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 111, __pyx_L1_error)

#line 111 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH1I *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":112
 * def h1i_array(root_hist, np.ndarray[int, ndim=1] array):
 *     cdef TH1I* _hist = <TH1I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 112 "root_numpy/src/array.pyx"
  try {

#line 112 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayI *>(__pyx_v__hist);

#line 112 "root_numpy/src/array.pyx"
  } catch(...) {

#line 112 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 112 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 112, __pyx_L1_error)

#line 112 "root_numpy/src/array.pyx"
  }

#line 112 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":113
 *     cdef TH1I* _hist = <TH1I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 113 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 113 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(int *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":110
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1I* _hist = <TH1I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 110 "root_numpy/src/array.pyx"


#line 110 "root_numpy/src/array.pyx"
  /* function exit code */

#line 110 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 110 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 110 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 110 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 110 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 110 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 110 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 110 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 110 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 110 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h1i_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 110 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 110 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 110 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 110 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 110 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 110 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 110 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 110 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 110 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":118
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2I* _hist = <TH2I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 118 "root_numpy/src/array.pyx"


#line 118 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 118 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_53h2i_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_53h2i_array = 
#line 118 "root_numpy/src/array.pyx"
{"h2i_array", (PyCFunction)__pyx_pw_13_librootnumpy_53h2i_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 118 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_53h2i_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 118 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 118 "root_numpy/src/array.pyx"
;

#line 118 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 118 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 118 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h2i_array (wrapper)", 0);

#line 118 "root_numpy/src/array.pyx"
  {

#line 118 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 118 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 118 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 118 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 118 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 118 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 118 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 118 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 118 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 118 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 118 "root_numpy/src/array.pyx"
      }

#line 118 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 118 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 118 "root_numpy/src/array.pyx"
        case  0:

#line 118 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 118 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 118 "root_numpy/src/array.pyx"
        case  1:

#line 118 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 118 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h2i_array", 1, 2, 2, 1); 
#line 118 "root_numpy/src/array.pyx"
__PYX_ERR(3, 118, __pyx_L3_error)

#line 118 "root_numpy/src/array.pyx"
        }

#line 118 "root_numpy/src/array.pyx"
      }

#line 118 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 118 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h2i_array") < 0)) __PYX_ERR(3, 118, __pyx_L3_error)

#line 118 "root_numpy/src/array.pyx"
      }

#line 118 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 118 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 118 "root_numpy/src/array.pyx"
    } else {

#line 118 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 118 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 118 "root_numpy/src/array.pyx"
    }

#line 118 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 118 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 118 "root_numpy/src/array.pyx"
  }

#line 118 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 118 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h2i_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 118 "root_numpy/src/array.pyx"
__PYX_ERR(3, 118, __pyx_L3_error)

#line 118 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 118 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h2i_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 118 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 118 "root_numpy/src/array.pyx"
  return NULL;

#line 118 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 118 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 118, __pyx_L1_error)
  __pyx_r = 
#line 118 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_52h2i_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 118 "root_numpy/src/array.pyx"


#line 118 "root_numpy/src/array.pyx"
  /* function exit code */

#line 118 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 118 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 118 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 118 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 118 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 118 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 118 "root_numpy/src/array.pyx"
}

#line 118 "root_numpy/src/array.pyx"


#line 118 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_52h2i_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH2I *__pyx_v__hist
#line 118 "root_numpy/src/array.pyx"
;
  TArrayI *__pyx_v__arr
#line 118 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 118 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 118 "root_numpy/src/array.pyx"
;

#line 118 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 118 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 118 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 118 "root_numpy/src/array.pyx"
  TArrayI *__pyx_t_2;

#line 118 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 118 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h2i_array", 0);

#line 118 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 118 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 118 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 118 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 118 "root_numpy/src/array.pyx"
  {

#line 118 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 118 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "root_numpy/src/array.pyx"
  }

#line 118 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":119
 * @cython.wraparound(False)
 * def h2i_array(root_hist, np.ndarray[int, ndim=1] array):
 *     cdef TH2I* _hist = <TH2I*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 119 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 119, __pyx_L1_error)

#line 119 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH2I *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":120
 * def h2i_array(root_hist, np.ndarray[int, ndim=1] array):
 *     cdef TH2I* _hist = <TH2I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 120 "root_numpy/src/array.pyx"
  try {

#line 120 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayI *>(__pyx_v__hist);

#line 120 "root_numpy/src/array.pyx"
  } catch(...) {

#line 120 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 120 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 120, __pyx_L1_error)

#line 120 "root_numpy/src/array.pyx"
  }

#line 120 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":121
 *     cdef TH2I* _hist = <TH2I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 121 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 121 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(int *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":118
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2I* _hist = <TH2I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 118 "root_numpy/src/array.pyx"


#line 118 "root_numpy/src/array.pyx"
  /* function exit code */

#line 118 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 118 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 118 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 118 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 118 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 118 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 118 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 118 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 118 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 118 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h2i_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 118 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 118 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 118 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 118 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 118 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 118 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 118 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 118 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 118 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":126
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3I* _hist = <TH3I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 126 "root_numpy/src/array.pyx"


#line 126 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 126 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_55h3i_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_55h3i_array = 
#line 126 "root_numpy/src/array.pyx"
{"h3i_array", (PyCFunction)__pyx_pw_13_librootnumpy_55h3i_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 126 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_55h3i_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 126 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 126 "root_numpy/src/array.pyx"
;

#line 126 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 126 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 126 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h3i_array (wrapper)", 0);

#line 126 "root_numpy/src/array.pyx"
  {

#line 126 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 126 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 126 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 126 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 126 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 126 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 126 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 126 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 126 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 126 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 126 "root_numpy/src/array.pyx"
      }

#line 126 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 126 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 126 "root_numpy/src/array.pyx"
        case  0:

#line 126 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 126 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 126 "root_numpy/src/array.pyx"
        case  1:

#line 126 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 126 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h3i_array", 1, 2, 2, 1); 
#line 126 "root_numpy/src/array.pyx"
__PYX_ERR(3, 126, __pyx_L3_error)

#line 126 "root_numpy/src/array.pyx"
        }

#line 126 "root_numpy/src/array.pyx"
      }

#line 126 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 126 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h3i_array") < 0)) __PYX_ERR(3, 126, __pyx_L3_error)

#line 126 "root_numpy/src/array.pyx"
      }

#line 126 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 126 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 126 "root_numpy/src/array.pyx"
    } else {

#line 126 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 126 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 126 "root_numpy/src/array.pyx"
    }

#line 126 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 126 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 126 "root_numpy/src/array.pyx"
  }

#line 126 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 126 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h3i_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 126 "root_numpy/src/array.pyx"
__PYX_ERR(3, 126, __pyx_L3_error)

#line 126 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 126 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h3i_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 126 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 126 "root_numpy/src/array.pyx"
  return NULL;

#line 126 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 126 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 126, __pyx_L1_error)
  __pyx_r = 
#line 126 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_54h3i_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 126 "root_numpy/src/array.pyx"


#line 126 "root_numpy/src/array.pyx"
  /* function exit code */

#line 126 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 126 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 126 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 126 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 126 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 126 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 126 "root_numpy/src/array.pyx"
}

#line 126 "root_numpy/src/array.pyx"


#line 126 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_54h3i_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH3I *__pyx_v__hist
#line 126 "root_numpy/src/array.pyx"
;
  TArrayI *__pyx_v__arr
#line 126 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 126 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 126 "root_numpy/src/array.pyx"
;

#line 126 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 126 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 126 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 126 "root_numpy/src/array.pyx"
  TArrayI *__pyx_t_2;

#line 126 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 126 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h3i_array", 0);

#line 126 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 126 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 126 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 126 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 126 "root_numpy/src/array.pyx"
  {

#line 126 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 126 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 126, __pyx_L1_error)

#line 126 "root_numpy/src/array.pyx"
  }

#line 126 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":127
 * @cython.wraparound(False)
 * def h3i_array(root_hist, np.ndarray[int, ndim=1] array):
 *     cdef TH3I* _hist = <TH3I*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 127 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH3I *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":128
 * def h3i_array(root_hist, np.ndarray[int, ndim=1] array):
 *     cdef TH3I* _hist = <TH3I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 128 "root_numpy/src/array.pyx"
  try {

#line 128 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayI *>(__pyx_v__hist);

#line 128 "root_numpy/src/array.pyx"
  } catch(...) {

#line 128 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 128 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 128, __pyx_L1_error)

#line 128 "root_numpy/src/array.pyx"
  }

#line 128 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":129
 *     cdef TH3I* _hist = <TH3I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 129 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 129 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(int *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":126
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3I* _hist = <TH3I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 126 "root_numpy/src/array.pyx"


#line 126 "root_numpy/src/array.pyx"
  /* function exit code */

#line 126 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 126 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 126 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 126 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 126 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 126 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 126 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 126 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 126 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 126 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h3i_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 126 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 126 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 126 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 126 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 126 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 126 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 126 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 126 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 126 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":134
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1S* _hist = <TH1S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 134 "root_numpy/src/array.pyx"


#line 134 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 134 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_57h1s_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_57h1s_array = 
#line 134 "root_numpy/src/array.pyx"
{"h1s_array", (PyCFunction)__pyx_pw_13_librootnumpy_57h1s_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 134 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_57h1s_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 134 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 134 "root_numpy/src/array.pyx"
;

#line 134 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 134 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 134 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h1s_array (wrapper)", 0);

#line 134 "root_numpy/src/array.pyx"
  {

#line 134 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 134 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 134 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 134 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 134 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 134 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 134 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 134 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 134 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 134 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 134 "root_numpy/src/array.pyx"
      }

#line 134 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 134 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 134 "root_numpy/src/array.pyx"
        case  0:

#line 134 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 134 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 134 "root_numpy/src/array.pyx"
        case  1:

#line 134 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 134 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h1s_array", 1, 2, 2, 1); 
#line 134 "root_numpy/src/array.pyx"
__PYX_ERR(3, 134, __pyx_L3_error)

#line 134 "root_numpy/src/array.pyx"
        }

#line 134 "root_numpy/src/array.pyx"
      }

#line 134 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 134 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h1s_array") < 0)) __PYX_ERR(3, 134, __pyx_L3_error)

#line 134 "root_numpy/src/array.pyx"
      }

#line 134 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 134 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 134 "root_numpy/src/array.pyx"
    } else {

#line 134 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 134 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 134 "root_numpy/src/array.pyx"
    }

#line 134 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 134 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 134 "root_numpy/src/array.pyx"
  }

#line 134 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 134 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h1s_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 134 "root_numpy/src/array.pyx"
__PYX_ERR(3, 134, __pyx_L3_error)

#line 134 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 134 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h1s_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 134 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 134 "root_numpy/src/array.pyx"
  return NULL;

#line 134 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 134 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 134, __pyx_L1_error)
  __pyx_r = 
#line 134 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_56h1s_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 134 "root_numpy/src/array.pyx"


#line 134 "root_numpy/src/array.pyx"
  /* function exit code */

#line 134 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 134 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 134 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 134 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 134 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 134 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 134 "root_numpy/src/array.pyx"
}

#line 134 "root_numpy/src/array.pyx"


#line 134 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_56h1s_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH1S *__pyx_v__hist
#line 134 "root_numpy/src/array.pyx"
;
  TArrayS *__pyx_v__arr
#line 134 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 134 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 134 "root_numpy/src/array.pyx"
;

#line 134 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 134 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 134 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 134 "root_numpy/src/array.pyx"
  TArrayS *__pyx_t_2;

#line 134 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 134 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h1s_array", 0);

#line 134 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 134 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 134 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 134 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 134 "root_numpy/src/array.pyx"
  {

#line 134 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 134 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_short, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 134, __pyx_L1_error)

#line 134 "root_numpy/src/array.pyx"
  }

#line 134 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":135
 * @cython.wraparound(False)
 * def h1s_array(root_hist, np.ndarray[short, ndim=1] array):
 *     cdef TH1S* _hist = <TH1S*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 135 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 135, __pyx_L1_error)

#line 135 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH1S *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":136
 * def h1s_array(root_hist, np.ndarray[short, ndim=1] array):
 *     cdef TH1S* _hist = <TH1S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 136 "root_numpy/src/array.pyx"
  try {

#line 136 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayS *>(__pyx_v__hist);

#line 136 "root_numpy/src/array.pyx"
  } catch(...) {

#line 136 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 136 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 136, __pyx_L1_error)

#line 136 "root_numpy/src/array.pyx"
  }

#line 136 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":137
 *     cdef TH1S* _hist = <TH1S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 137 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 137 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(short *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":134
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1S* _hist = <TH1S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 134 "root_numpy/src/array.pyx"


#line 134 "root_numpy/src/array.pyx"
  /* function exit code */

#line 134 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 134 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 134 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 134 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 134 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 134 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 134 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 134 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 134 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 134 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h1s_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 134 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 134 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 134 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 134 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 134 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 134 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 134 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 134 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 134 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":142
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2S* _hist = <TH2S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 142 "root_numpy/src/array.pyx"


#line 142 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 142 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_59h2s_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_59h2s_array = 
#line 142 "root_numpy/src/array.pyx"
{"h2s_array", (PyCFunction)__pyx_pw_13_librootnumpy_59h2s_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 142 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_59h2s_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 142 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 142 "root_numpy/src/array.pyx"
;

#line 142 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 142 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 142 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h2s_array (wrapper)", 0);

#line 142 "root_numpy/src/array.pyx"
  {

#line 142 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 142 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 142 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 142 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 142 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 142 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 142 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 142 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 142 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 142 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 142 "root_numpy/src/array.pyx"
      }

#line 142 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 142 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 142 "root_numpy/src/array.pyx"
        case  0:

#line 142 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 142 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 142 "root_numpy/src/array.pyx"
        case  1:

#line 142 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 142 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h2s_array", 1, 2, 2, 1); 
#line 142 "root_numpy/src/array.pyx"
__PYX_ERR(3, 142, __pyx_L3_error)

#line 142 "root_numpy/src/array.pyx"
        }

#line 142 "root_numpy/src/array.pyx"
      }

#line 142 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 142 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h2s_array") < 0)) __PYX_ERR(3, 142, __pyx_L3_error)

#line 142 "root_numpy/src/array.pyx"
      }

#line 142 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 142 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 142 "root_numpy/src/array.pyx"
    } else {

#line 142 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 142 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 142 "root_numpy/src/array.pyx"
    }

#line 142 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 142 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 142 "root_numpy/src/array.pyx"
  }

#line 142 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 142 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h2s_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 142 "root_numpy/src/array.pyx"
__PYX_ERR(3, 142, __pyx_L3_error)

#line 142 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 142 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h2s_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 142 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 142 "root_numpy/src/array.pyx"
  return NULL;

#line 142 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 142 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 142, __pyx_L1_error)
  __pyx_r = 
#line 142 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_58h2s_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 142 "root_numpy/src/array.pyx"


#line 142 "root_numpy/src/array.pyx"
  /* function exit code */

#line 142 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 142 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 142 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 142 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 142 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 142 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 142 "root_numpy/src/array.pyx"
}

#line 142 "root_numpy/src/array.pyx"


#line 142 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_58h2s_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH2S *__pyx_v__hist
#line 142 "root_numpy/src/array.pyx"
;
  TArrayS *__pyx_v__arr
#line 142 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 142 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 142 "root_numpy/src/array.pyx"
;

#line 142 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 142 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 142 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 142 "root_numpy/src/array.pyx"
  TArrayS *__pyx_t_2;

#line 142 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 142 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h2s_array", 0);

#line 142 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 142 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 142 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 142 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 142 "root_numpy/src/array.pyx"
  {

#line 142 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 142 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_short, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 142, __pyx_L1_error)

#line 142 "root_numpy/src/array.pyx"
  }

#line 142 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":143
 * @cython.wraparound(False)
 * def h2s_array(root_hist, np.ndarray[short, ndim=1] array):
 *     cdef TH2S* _hist = <TH2S*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 143 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 143, __pyx_L1_error)

#line 143 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH2S *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":144
 * def h2s_array(root_hist, np.ndarray[short, ndim=1] array):
 *     cdef TH2S* _hist = <TH2S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 144 "root_numpy/src/array.pyx"
  try {

#line 144 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayS *>(__pyx_v__hist);

#line 144 "root_numpy/src/array.pyx"
  } catch(...) {

#line 144 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 144 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 144, __pyx_L1_error)

#line 144 "root_numpy/src/array.pyx"
  }

#line 144 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":145
 *     cdef TH2S* _hist = <TH2S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 145 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 145 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(short *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":142
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2S* _hist = <TH2S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 142 "root_numpy/src/array.pyx"


#line 142 "root_numpy/src/array.pyx"
  /* function exit code */

#line 142 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 142 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 142 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 142 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 142 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 142 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 142 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 142 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 142 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 142 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h2s_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 142 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 142 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 142 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 142 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 142 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 142 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 142 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 142 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 142 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":150
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3S* _hist = <TH3S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 150 "root_numpy/src/array.pyx"


#line 150 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 150 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_61h3s_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_61h3s_array = 
#line 150 "root_numpy/src/array.pyx"
{"h3s_array", (PyCFunction)__pyx_pw_13_librootnumpy_61h3s_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 150 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_61h3s_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 150 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 150 "root_numpy/src/array.pyx"
;

#line 150 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 150 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 150 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h3s_array (wrapper)", 0);

#line 150 "root_numpy/src/array.pyx"
  {

#line 150 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 150 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 150 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 150 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 150 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 150 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 150 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 150 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 150 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 150 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 150 "root_numpy/src/array.pyx"
      }

#line 150 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 150 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 150 "root_numpy/src/array.pyx"
        case  0:

#line 150 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 150 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 150 "root_numpy/src/array.pyx"
        case  1:

#line 150 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 150 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h3s_array", 1, 2, 2, 1); 
#line 150 "root_numpy/src/array.pyx"
__PYX_ERR(3, 150, __pyx_L3_error)

#line 150 "root_numpy/src/array.pyx"
        }

#line 150 "root_numpy/src/array.pyx"
      }

#line 150 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 150 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h3s_array") < 0)) __PYX_ERR(3, 150, __pyx_L3_error)

#line 150 "root_numpy/src/array.pyx"
      }

#line 150 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 150 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 150 "root_numpy/src/array.pyx"
    } else {

#line 150 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 150 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 150 "root_numpy/src/array.pyx"
    }

#line 150 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 150 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 150 "root_numpy/src/array.pyx"
  }

#line 150 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 150 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h3s_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 150 "root_numpy/src/array.pyx"
__PYX_ERR(3, 150, __pyx_L3_error)

#line 150 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 150 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h3s_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 150 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 150 "root_numpy/src/array.pyx"
  return NULL;

#line 150 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 150 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 150, __pyx_L1_error)
  __pyx_r = 
#line 150 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_60h3s_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 150 "root_numpy/src/array.pyx"


#line 150 "root_numpy/src/array.pyx"
  /* function exit code */

#line 150 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 150 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 150 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 150 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 150 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 150 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 150 "root_numpy/src/array.pyx"
}

#line 150 "root_numpy/src/array.pyx"


#line 150 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_60h3s_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH3S *__pyx_v__hist
#line 150 "root_numpy/src/array.pyx"
;
  TArrayS *__pyx_v__arr
#line 150 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 150 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 150 "root_numpy/src/array.pyx"
;

#line 150 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 150 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 150 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 150 "root_numpy/src/array.pyx"
  TArrayS *__pyx_t_2;

#line 150 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 150 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h3s_array", 0);

#line 150 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 150 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 150 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 150 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 150 "root_numpy/src/array.pyx"
  {

#line 150 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 150 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_short, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 150, __pyx_L1_error)

#line 150 "root_numpy/src/array.pyx"
  }

#line 150 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":151
 * @cython.wraparound(False)
 * def h3s_array(root_hist, np.ndarray[short, ndim=1] array):
 *     cdef TH3S* _hist = <TH3S*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])
 */

#line 151 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 151, __pyx_L1_error)

#line 151 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH3S *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":152
 * def h3s_array(root_hist, np.ndarray[short, ndim=1] array):
 *     cdef TH3S* _hist = <TH3S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], &array[0])
 * 
 */

#line 152 "root_numpy/src/array.pyx"
  try {

#line 152 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayS *>(__pyx_v__hist);

#line 152 "root_numpy/src/array.pyx"
  } catch(...) {

#line 152 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 152 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 152, __pyx_L1_error)

#line 152 "root_numpy/src/array.pyx"
  }

#line 152 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":153
 *     cdef TH3S* _hist = <TH3S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 *     _arr.Set(array.shape[0], &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 153 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 153 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), (&(*__Pyx_BufPtrStrided1d(short *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides))));

  /* "root_numpy/src/array.pyx":150
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3S* _hist = <TH3S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 150 "root_numpy/src/array.pyx"


#line 150 "root_numpy/src/array.pyx"
  /* function exit code */

#line 150 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 150 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 150 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 150 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 150 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 150 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 150 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 150 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 150 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 150 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h3s_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 150 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 150 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 150 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 150 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 150 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 150 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 150 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 150 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 150 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":158
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 158 "root_numpy/src/array.pyx"


#line 158 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 158 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_63h1c_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_63h1c_array = 
#line 158 "root_numpy/src/array.pyx"
{"h1c_array", (PyCFunction)__pyx_pw_13_librootnumpy_63h1c_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 158 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_63h1c_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 158 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 158 "root_numpy/src/array.pyx"
;

#line 158 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 158 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 158 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h1c_array (wrapper)", 0);

#line 158 "root_numpy/src/array.pyx"
  {

#line 158 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 158 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 158 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 158 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 158 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 158 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 158 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 158 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 158 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 158 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 158 "root_numpy/src/array.pyx"
      }

#line 158 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 158 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 158 "root_numpy/src/array.pyx"
        case  0:

#line 158 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 158 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 158 "root_numpy/src/array.pyx"
        case  1:

#line 158 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 158 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h1c_array", 1, 2, 2, 1); 
#line 158 "root_numpy/src/array.pyx"
__PYX_ERR(3, 158, __pyx_L3_error)

#line 158 "root_numpy/src/array.pyx"
        }

#line 158 "root_numpy/src/array.pyx"
      }

#line 158 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 158 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h1c_array") < 0)) __PYX_ERR(3, 158, __pyx_L3_error)

#line 158 "root_numpy/src/array.pyx"
      }

#line 158 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 158 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 158 "root_numpy/src/array.pyx"
    } else {

#line 158 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 158 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 158 "root_numpy/src/array.pyx"
    }

#line 158 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 158 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 158 "root_numpy/src/array.pyx"
  }

#line 158 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 158 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h1c_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 158 "root_numpy/src/array.pyx"
__PYX_ERR(3, 158, __pyx_L3_error)

#line 158 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 158 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h1c_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 158 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 158 "root_numpy/src/array.pyx"
  return NULL;

#line 158 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 158 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 158, __pyx_L1_error)
  __pyx_r = 
#line 158 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_62h1c_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 158 "root_numpy/src/array.pyx"


#line 158 "root_numpy/src/array.pyx"
  /* function exit code */

#line 158 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 158 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 158 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 158 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 158 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 158 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 158 "root_numpy/src/array.pyx"
}

#line 158 "root_numpy/src/array.pyx"


#line 158 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_62h1c_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH1C *__pyx_v__hist
#line 158 "root_numpy/src/array.pyx"
;
  TArrayC *__pyx_v__arr
#line 158 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 158 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 158 "root_numpy/src/array.pyx"
;

#line 158 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 158 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 158 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 158 "root_numpy/src/array.pyx"
  TArrayC *__pyx_t_2;

#line 158 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 158 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h1c_array", 0);

#line 158 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 158 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 158 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 158 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 158 "root_numpy/src/array.pyx"
  {

#line 158 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 158 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 158, __pyx_L1_error)

#line 158 "root_numpy/src/array.pyx"
  }

#line 158 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":159
 * @cython.wraparound(False)
 * def h1c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     _arr.Set(array.shape[0], <char*> &array[0])
 */

#line 159 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 159, __pyx_L1_error)

#line 159 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH1C *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":160
 * def h1c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], <char*> &array[0])
 * 
 */

#line 160 "root_numpy/src/array.pyx"
  try {

#line 160 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayC *>(__pyx_v__hist);

#line 160 "root_numpy/src/array.pyx"
  } catch(...) {

#line 160 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 160 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 160, __pyx_L1_error)

#line 160 "root_numpy/src/array.pyx"
  }

#line 160 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":161
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     _arr.Set(array.shape[0], <char*> &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 161 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 161 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), ((char *)(&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides)))));

  /* "root_numpy/src/array.pyx":158
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 158 "root_numpy/src/array.pyx"


#line 158 "root_numpy/src/array.pyx"
  /* function exit code */

#line 158 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 158 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 158 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 158 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 158 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 158 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 158 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 158 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 158 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 158 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h1c_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 158 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 158 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 158 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 158 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 158 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 158 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 158 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 158 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 158 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":166
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 166 "root_numpy/src/array.pyx"


#line 166 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 166 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_65h2c_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_65h2c_array = 
#line 166 "root_numpy/src/array.pyx"
{"h2c_array", (PyCFunction)__pyx_pw_13_librootnumpy_65h2c_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 166 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_65h2c_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 166 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 166 "root_numpy/src/array.pyx"
;

#line 166 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 166 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 166 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h2c_array (wrapper)", 0);

#line 166 "root_numpy/src/array.pyx"
  {

#line 166 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 166 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 166 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 166 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 166 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 166 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 166 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 166 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 166 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 166 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 166 "root_numpy/src/array.pyx"
      }

#line 166 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 166 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 166 "root_numpy/src/array.pyx"
        case  0:

#line 166 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 166 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 166 "root_numpy/src/array.pyx"
        case  1:

#line 166 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 166 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h2c_array", 1, 2, 2, 1); 
#line 166 "root_numpy/src/array.pyx"
__PYX_ERR(3, 166, __pyx_L3_error)

#line 166 "root_numpy/src/array.pyx"
        }

#line 166 "root_numpy/src/array.pyx"
      }

#line 166 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 166 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h2c_array") < 0)) __PYX_ERR(3, 166, __pyx_L3_error)

#line 166 "root_numpy/src/array.pyx"
      }

#line 166 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 166 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 166 "root_numpy/src/array.pyx"
    } else {

#line 166 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 166 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 166 "root_numpy/src/array.pyx"
    }

#line 166 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 166 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 166 "root_numpy/src/array.pyx"
  }

#line 166 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 166 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h2c_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 166 "root_numpy/src/array.pyx"
__PYX_ERR(3, 166, __pyx_L3_error)

#line 166 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 166 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h2c_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 166 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 166 "root_numpy/src/array.pyx"
  return NULL;

#line 166 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 166 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 166, __pyx_L1_error)
  __pyx_r = 
#line 166 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_64h2c_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 166 "root_numpy/src/array.pyx"


#line 166 "root_numpy/src/array.pyx"
  /* function exit code */

#line 166 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 166 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 166 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 166 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 166 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 166 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 166 "root_numpy/src/array.pyx"
}

#line 166 "root_numpy/src/array.pyx"


#line 166 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_64h2c_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH2C *__pyx_v__hist
#line 166 "root_numpy/src/array.pyx"
;
  TArrayC *__pyx_v__arr
#line 166 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 166 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 166 "root_numpy/src/array.pyx"
;

#line 166 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 166 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 166 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 166 "root_numpy/src/array.pyx"
  TArrayC *__pyx_t_2;

#line 166 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 166 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h2c_array", 0);

#line 166 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 166 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 166 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 166 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 166 "root_numpy/src/array.pyx"
  {

#line 166 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 166 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 166, __pyx_L1_error)

#line 166 "root_numpy/src/array.pyx"
  }

#line 166 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":167
 * @cython.wraparound(False)
 * def h2c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     _arr.Set(array.shape[0], <char*> &array[0])
 */

#line 167 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 167, __pyx_L1_error)

#line 167 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH2C *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":168
 * def h2c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], <char*> &array[0])
 * 
 */

#line 168 "root_numpy/src/array.pyx"
  try {

#line 168 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayC *>(__pyx_v__hist);

#line 168 "root_numpy/src/array.pyx"
  } catch(...) {

#line 168 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 168 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 168, __pyx_L1_error)

#line 168 "root_numpy/src/array.pyx"
  }

#line 168 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":169
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     _arr.Set(array.shape[0], <char*> &array[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 169 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 169 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), ((char *)(&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides)))));

  /* "root_numpy/src/array.pyx":166
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 166 "root_numpy/src/array.pyx"


#line 166 "root_numpy/src/array.pyx"
  /* function exit code */

#line 166 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 166 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 166 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 166 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 166 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 166 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 166 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 166 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 166 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 166 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h2c_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 166 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 166 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 166 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 166 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 166 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 166 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 166 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 166 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 166 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":174
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 174 "root_numpy/src/array.pyx"


#line 174 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 174 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_67h3c_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_67h3c_array = 
#line 174 "root_numpy/src/array.pyx"
{"h3c_array", (PyCFunction)__pyx_pw_13_librootnumpy_67h3c_array, METH_VARARGS|METH_KEYWORDS, 0};

#line 174 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_67h3c_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root_hist = 0
#line 174 "root_numpy/src/array.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 174 "root_numpy/src/array.pyx"
;

#line 174 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 174 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 174 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h3c_array (wrapper)", 0);

#line 174 "root_numpy/src/array.pyx"
  {

#line 174 "root_numpy/src/array.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root_hist,&__pyx_n_s_array,0};

#line 174 "root_numpy/src/array.pyx"
    PyObject* values[2] = {0,0};

#line 174 "root_numpy/src/array.pyx"
    if (unlikely(__pyx_kwds)) {

#line 174 "root_numpy/src/array.pyx"
      Py_ssize_t kw_args;

#line 174 "root_numpy/src/array.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 174 "root_numpy/src/array.pyx"
      switch (pos_args) {
        case  2: 
#line 174 "root_numpy/src/array.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 174 "root_numpy/src/array.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 174 "root_numpy/src/array.pyx"
        case  0: break;
        default: 
#line 174 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 174 "root_numpy/src/array.pyx"
      }

#line 174 "root_numpy/src/array.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 174 "root_numpy/src/array.pyx"
      switch (pos_args) {

#line 174 "root_numpy/src/array.pyx"
        case  0:

#line 174 "root_numpy/src/array.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_hist)) != 0)) kw_args--;
        else 
#line 174 "root_numpy/src/array.pyx"
goto __pyx_L5_argtuple_error;

#line 174 "root_numpy/src/array.pyx"
        case  1:

#line 174 "root_numpy/src/array.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 174 "root_numpy/src/array.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("h3c_array", 1, 2, 2, 1); 
#line 174 "root_numpy/src/array.pyx"
__PYX_ERR(3, 174, __pyx_L3_error)

#line 174 "root_numpy/src/array.pyx"
        }

#line 174 "root_numpy/src/array.pyx"
      }

#line 174 "root_numpy/src/array.pyx"
      if (unlikely(kw_args > 0)) {

#line 174 "root_numpy/src/array.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "h3c_array") < 0)) __PYX_ERR(3, 174, __pyx_L3_error)

#line 174 "root_numpy/src/array.pyx"
      }

#line 174 "root_numpy/src/array.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 174 "root_numpy/src/array.pyx"
      goto __pyx_L5_argtuple_error;

#line 174 "root_numpy/src/array.pyx"
    } else {

#line 174 "root_numpy/src/array.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 174 "root_numpy/src/array.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 174 "root_numpy/src/array.pyx"
    }

#line 174 "root_numpy/src/array.pyx"
    __pyx_v_root_hist = values[0];

#line 174 "root_numpy/src/array.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 174 "root_numpy/src/array.pyx"
  }

#line 174 "root_numpy/src/array.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 174 "root_numpy/src/array.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("h3c_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 174 "root_numpy/src/array.pyx"
__PYX_ERR(3, 174, __pyx_L3_error)

#line 174 "root_numpy/src/array.pyx"
  __pyx_L3_error:;

#line 174 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h3c_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 174 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 174 "root_numpy/src/array.pyx"
  return NULL;

#line 174 "root_numpy/src/array.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 174 "root_numpy/src/array.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(3, 174, __pyx_L1_error)
  __pyx_r = 
#line 174 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_66h3c_array(__pyx_self, __pyx_v_root_hist, __pyx_v_array);

#line 174 "root_numpy/src/array.pyx"


#line 174 "root_numpy/src/array.pyx"
  /* function exit code */

#line 174 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 174 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 174 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 174 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 174 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 174 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 174 "root_numpy/src/array.pyx"
}

#line 174 "root_numpy/src/array.pyx"


#line 174 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_66h3c_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_hist, PyArrayObject *__pyx_v_array) {
  TH3C *__pyx_v__hist
#line 174 "root_numpy/src/array.pyx"
;
  TArrayC *__pyx_v__arr
#line 174 "root_numpy/src/array.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 174 "root_numpy/src/array.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 174 "root_numpy/src/array.pyx"
;

#line 174 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;

#line 174 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 174 "root_numpy/src/array.pyx"
  void *__pyx_t_1;

#line 174 "root_numpy/src/array.pyx"
  TArrayC *__pyx_t_2;

#line 174 "root_numpy/src/array.pyx"
  Py_ssize_t __pyx_t_3;

#line 174 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("h3c_array", 0);

#line 174 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 174 "root_numpy/src/array.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 174 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 174 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 174 "root_numpy/src/array.pyx"
  {

#line 174 "root_numpy/src/array.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 174 "root_numpy/src/array.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 174, __pyx_L1_error)

#line 174 "root_numpy/src/array.pyx"
  }

#line 174 "root_numpy/src/array.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/array.pyx":175
 * @cython.wraparound(False)
 * def h3c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     _arr.Set(array.shape[0], <char*> &array[0])
 */

#line 175 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "root_numpy/src/array.pyx"
  __pyx_v__hist = ((TH3C *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":176
 * def h3c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)             # <<<<<<<<<<<<<<
 *     _arr.Set(array.shape[0], <char*> &array[0])
 */

#line 176 "root_numpy/src/array.pyx"
  try {

#line 176 "root_numpy/src/array.pyx"
    __pyx_t_2 = dynamic_cast<TArrayC *>(__pyx_v__hist);

#line 176 "root_numpy/src/array.pyx"
  } catch(...) {

#line 176 "root_numpy/src/array.pyx"
    __Pyx_CppExn2PyErr();

#line 176 "root_numpy/src/array.pyx"
    __PYX_ERR(3, 176, __pyx_L1_error)

#line 176 "root_numpy/src/array.pyx"
  }

#line 176 "root_numpy/src/array.pyx"
  __pyx_v__arr = __pyx_t_2;

  /* "root_numpy/src/array.pyx":177
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 *     _arr.Set(array.shape[0], <char*> &array[0])             # <<<<<<<<<<<<<<
 */

#line 177 "root_numpy/src/array.pyx"
  __pyx_t_3 = 0;

#line 177 "root_numpy/src/array.pyx"
  __pyx_v__arr->Set((__pyx_v_array->dimensions[0]), ((char *)(&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides)))));

  /* "root_numpy/src/array.pyx":174
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 174 "root_numpy/src/array.pyx"


#line 174 "root_numpy/src/array.pyx"
  /* function exit code */

#line 174 "root_numpy/src/array.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 174 "root_numpy/src/array.pyx"
  goto __pyx_L0;

#line 174 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 174 "root_numpy/src/array.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 174 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_declare

#line 174 "root_numpy/src/array.pyx"
    __Pyx_PyThreadState_assign

#line 174 "root_numpy/src/array.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 174 "root_numpy/src/array.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 174 "root_numpy/src/array.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 174 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.h3c_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 174 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 174 "root_numpy/src/array.pyx"
  goto __pyx_L2;

#line 174 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 174 "root_numpy/src/array.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 174 "root_numpy/src/array.pyx"
  __pyx_L2:;

#line 174 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 174 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 174 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 174 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/matrix.pyx":6
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */

#line 6 "root_numpy/src/matrix.pyx"


#line 6 "root_numpy/src/matrix.pyx"
/* Python wrapper */

#line 6 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pw_13_librootnumpy_69matrix_d(PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_69matrix_d = 
#line 6 "root_numpy/src/matrix.pyx"
{"matrix_d", (PyCFunction)__pyx_pw_13_librootnumpy_69matrix_d, METH_O, 0};

#line 6 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pw_13_librootnumpy_69matrix_d(PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {

#line 6 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_r = 0;

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyDeclarations

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannySetupContext("matrix_d (wrapper)", 0);
  __pyx_r = 
#line 6 "root_numpy/src/matrix.pyx"
__pyx_pf_13_librootnumpy_68matrix_d(__pyx_self, ((PyObject *)__pyx_v_root_mat));

#line 6 "root_numpy/src/matrix.pyx"


#line 6 "root_numpy/src/matrix.pyx"
  /* function exit code */

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyFinishContext();

#line 6 "root_numpy/src/matrix.pyx"
  return __pyx_r;

#line 6 "root_numpy/src/matrix.pyx"
}

#line 6 "root_numpy/src/matrix.pyx"


#line 6 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pf_13_librootnumpy_68matrix_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {
  TMatrixDBase *__pyx_v__mat
#line 6 "root_numpy/src/matrix.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 6 "root_numpy/src/matrix.pyx"
;
  int __pyx_v_i
#line 6 "root_numpy/src/matrix.pyx"
;
  int __pyx_v_j
#line 6 "root_numpy/src/matrix.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 6 "root_numpy/src/matrix.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 6 "root_numpy/src/matrix.pyx"
;

#line 6 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_r = NULL;

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyDeclarations

#line 6 "root_numpy/src/matrix.pyx"
  void *__pyx_t_1;

#line 6 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 6 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 6 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 6 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 6 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 6 "root_numpy/src/matrix.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 6 "root_numpy/src/matrix.pyx"
  int __pyx_t_8;

#line 6 "root_numpy/src/matrix.pyx"
  int __pyx_t_9;

#line 6 "root_numpy/src/matrix.pyx"
  Py_ssize_t __pyx_t_10;

#line 6 "root_numpy/src/matrix.pyx"
  Py_ssize_t __pyx_t_11;

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannySetupContext("matrix_d", 0);

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/matrix.pyx":7
 * @cython.wraparound(False)
 * def matrix_d(root_mat):
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 *     cdef int i
 */

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_mat); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(4, 7, __pyx_L1_error)

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_v__mat = ((TMatrixDBase *)__pyx_t_1);

  /* "root_numpy/src/matrix.pyx":8
 * def matrix_d(root_mat):
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int j
 */

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNrows()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNcols()); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 8 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 8 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = 0;

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = 0;

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 8 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = 0;

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 8 "root_numpy/src/matrix.pyx"
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 8 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 8 "root_numpy/src/matrix.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(4, 8, __pyx_L1_error)

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 8 "root_numpy/src/matrix.pyx"
  {

#line 8 "root_numpy/src/matrix.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 8 "root_numpy/src/matrix.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 8 "root_numpy/src/matrix.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 8 "root_numpy/src/matrix.pyx"
      __PYX_ERR(4, 8, __pyx_L1_error)
    } else {
#line 8 "root_numpy/src/matrix.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 8 "root_numpy/src/matrix.pyx"
    }

#line 8 "root_numpy/src/matrix.pyx"
  }

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = 0;

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 8 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/matrix.pyx":11
 *     cdef int i
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 */

#line 11 "root_numpy/src/matrix.pyx"
  __pyx_t_8 = __pyx_v__mat->GetNrows();

#line 11 "root_numpy/src/matrix.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/matrix.pyx":12
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():             # <<<<<<<<<<<<<<
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)
 */

#line 12 "root_numpy/src/matrix.pyx"
    __pyx_t_9 = __pyx_v__mat->GetNcols();

#line 12 "root_numpy/src/matrix.pyx"
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_9; __pyx_v_j++) {

      /* "root_numpy/src/matrix.pyx":13
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)             # <<<<<<<<<<<<<<
 *     return np.matrix(arr)
 * 
 */

#line 13 "root_numpy/src/matrix.pyx"
      __pyx_t_10 = __pyx_v_i;

#line 13 "root_numpy/src/matrix.pyx"
      __pyx_t_11 = __pyx_v_j;

#line 13 "root_numpy/src/matrix.pyx"
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v__mat->operator()(__pyx_v_i, __pyx_v_j);

#line 13 "root_numpy/src/matrix.pyx"
    }

#line 13 "root_numpy/src/matrix.pyx"
  }

  /* "root_numpy/src/matrix.pyx":14
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 14 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 14 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 14, __pyx_L1_error)

#line 14 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 14 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 14, __pyx_L1_error)

#line 14 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 14 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 14 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = NULL;

#line 14 "root_numpy/src/matrix.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 14 "root_numpy/src/matrix.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 14 "root_numpy/src/matrix.pyx"
    if (likely(__pyx_t_5)) {

#line 14 "root_numpy/src/matrix.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 14 "root_numpy/src/matrix.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 14 "root_numpy/src/matrix.pyx"
      __Pyx_INCREF(function);

#line 14 "root_numpy/src/matrix.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 14 "root_numpy/src/matrix.pyx"
    }

#line 14 "root_numpy/src/matrix.pyx"
  }

#line 14 "root_numpy/src/matrix.pyx"
  if (!__pyx_t_5) {

#line 14 "root_numpy/src/matrix.pyx"
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_arr)); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 14, __pyx_L1_error)

#line 14 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 14 "root_numpy/src/matrix.pyx"
  } else {

#line 14 "root_numpy/src/matrix.pyx"
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 14, __pyx_L1_error)

#line 14 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 14 "root_numpy/src/matrix.pyx"
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 14 "root_numpy/src/matrix.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 14 "root_numpy/src/matrix.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_arr));

#line 14 "root_numpy/src/matrix.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, ((PyObject *)__pyx_v_arr));

#line 14 "root_numpy/src/matrix.pyx"
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 14, __pyx_L1_error)

#line 14 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 14 "root_numpy/src/matrix.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 14 "root_numpy/src/matrix.pyx"
  }

#line 14 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 14 "root_numpy/src/matrix.pyx"
  __pyx_r = __pyx_t_6;

#line 14 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = 0;

#line 14 "root_numpy/src/matrix.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/matrix.pyx":6
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */

#line 6 "root_numpy/src/matrix.pyx"


#line 6 "root_numpy/src/matrix.pyx"
  /* function exit code */

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_L1_error:;

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 6 "root_numpy/src/matrix.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 6 "root_numpy/src/matrix.pyx"
    __Pyx_PyThreadState_declare

#line 6 "root_numpy/src/matrix.pyx"
    __Pyx_PyThreadState_assign

#line 6 "root_numpy/src/matrix.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 6 "root_numpy/src/matrix.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_AddTraceback("_librootnumpy.matrix_d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_r = NULL;

#line 6 "root_numpy/src/matrix.pyx"
  goto __pyx_L2;

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_L0:;

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_L2:;

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyFinishContext();

#line 6 "root_numpy/src/matrix.pyx"
  return __pyx_r;

#line 6 "root_numpy/src/matrix.pyx"
}

/* "root_numpy/src/matrix.pyx":19
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */

#line 19 "root_numpy/src/matrix.pyx"


#line 19 "root_numpy/src/matrix.pyx"
/* Python wrapper */

#line 19 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pw_13_librootnumpy_71matrix_f(PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_71matrix_f = 
#line 19 "root_numpy/src/matrix.pyx"
{"matrix_f", (PyCFunction)__pyx_pw_13_librootnumpy_71matrix_f, METH_O, 0};

#line 19 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pw_13_librootnumpy_71matrix_f(PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {

#line 19 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_r = 0;

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyDeclarations

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannySetupContext("matrix_f (wrapper)", 0);
  __pyx_r = 
#line 19 "root_numpy/src/matrix.pyx"
__pyx_pf_13_librootnumpy_70matrix_f(__pyx_self, ((PyObject *)__pyx_v_root_mat));

#line 19 "root_numpy/src/matrix.pyx"


#line 19 "root_numpy/src/matrix.pyx"
  /* function exit code */

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyFinishContext();

#line 19 "root_numpy/src/matrix.pyx"
  return __pyx_r;

#line 19 "root_numpy/src/matrix.pyx"
}

#line 19 "root_numpy/src/matrix.pyx"


#line 19 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pf_13_librootnumpy_70matrix_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {
  TMatrixFBase *__pyx_v__mat
#line 19 "root_numpy/src/matrix.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 19 "root_numpy/src/matrix.pyx"
;
  int __pyx_v_i
#line 19 "root_numpy/src/matrix.pyx"
;
  int __pyx_v_j
#line 19 "root_numpy/src/matrix.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 19 "root_numpy/src/matrix.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 19 "root_numpy/src/matrix.pyx"
;

#line 19 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_r = NULL;

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyDeclarations

#line 19 "root_numpy/src/matrix.pyx"
  void *__pyx_t_1;

#line 19 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 19 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 19 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 19 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 19 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 19 "root_numpy/src/matrix.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 19 "root_numpy/src/matrix.pyx"
  int __pyx_t_8;

#line 19 "root_numpy/src/matrix.pyx"
  int __pyx_t_9;

#line 19 "root_numpy/src/matrix.pyx"
  Py_ssize_t __pyx_t_10;

#line 19 "root_numpy/src/matrix.pyx"
  Py_ssize_t __pyx_t_11;

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannySetupContext("matrix_f", 0);

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/matrix.pyx":20
 * @cython.wraparound(False)
 * def matrix_f(root_mat):
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 *     cdef int i
 */

#line 20 "root_numpy/src/matrix.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_mat); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(4, 20, __pyx_L1_error)

#line 20 "root_numpy/src/matrix.pyx"
  __pyx_v__mat = ((TMatrixFBase *)__pyx_t_1);

  /* "root_numpy/src/matrix.pyx":21
 * def matrix_f(root_mat):
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int j
 */

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNrows()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNcols()); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 21 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 21 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = 0;

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = 0;

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 21 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = 0;

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 21 "root_numpy/src/matrix.pyx"
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 21 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 21 "root_numpy/src/matrix.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(4, 21, __pyx_L1_error)

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 21 "root_numpy/src/matrix.pyx"
  {

#line 21 "root_numpy/src/matrix.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 21 "root_numpy/src/matrix.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 21 "root_numpy/src/matrix.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 21 "root_numpy/src/matrix.pyx"
      __PYX_ERR(4, 21, __pyx_L1_error)
    } else {
#line 21 "root_numpy/src/matrix.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 21 "root_numpy/src/matrix.pyx"
    }

#line 21 "root_numpy/src/matrix.pyx"
  }

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = 0;

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 21 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/matrix.pyx":24
 *     cdef int i
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 */

#line 24 "root_numpy/src/matrix.pyx"
  __pyx_t_8 = __pyx_v__mat->GetNrows();

#line 24 "root_numpy/src/matrix.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/matrix.pyx":25
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():             # <<<<<<<<<<<<<<
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)
 */

#line 25 "root_numpy/src/matrix.pyx"
    __pyx_t_9 = __pyx_v__mat->GetNcols();

#line 25 "root_numpy/src/matrix.pyx"
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_9; __pyx_v_j++) {

      /* "root_numpy/src/matrix.pyx":26
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)             # <<<<<<<<<<<<<<
 *     return np.matrix(arr)
 */

#line 26 "root_numpy/src/matrix.pyx"
      __pyx_t_10 = __pyx_v_i;

#line 26 "root_numpy/src/matrix.pyx"
      __pyx_t_11 = __pyx_v_j;

#line 26 "root_numpy/src/matrix.pyx"
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v__mat->operator()(__pyx_v_i, __pyx_v_j);

#line 26 "root_numpy/src/matrix.pyx"
    }

#line 26 "root_numpy/src/matrix.pyx"
  }

  /* "root_numpy/src/matrix.pyx":27
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)             # <<<<<<<<<<<<<<
 */

#line 27 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 27 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 27, __pyx_L1_error)

#line 27 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 27 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 27, __pyx_L1_error)

#line 27 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 27 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 27 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = NULL;

#line 27 "root_numpy/src/matrix.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 27 "root_numpy/src/matrix.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 27 "root_numpy/src/matrix.pyx"
    if (likely(__pyx_t_5)) {

#line 27 "root_numpy/src/matrix.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 27 "root_numpy/src/matrix.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 27 "root_numpy/src/matrix.pyx"
      __Pyx_INCREF(function);

#line 27 "root_numpy/src/matrix.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 27 "root_numpy/src/matrix.pyx"
    }

#line 27 "root_numpy/src/matrix.pyx"
  }

#line 27 "root_numpy/src/matrix.pyx"
  if (!__pyx_t_5) {

#line 27 "root_numpy/src/matrix.pyx"
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_arr)); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 27, __pyx_L1_error)

#line 27 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 27 "root_numpy/src/matrix.pyx"
  } else {

#line 27 "root_numpy/src/matrix.pyx"
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 27, __pyx_L1_error)

#line 27 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 27 "root_numpy/src/matrix.pyx"
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 27 "root_numpy/src/matrix.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 27 "root_numpy/src/matrix.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_arr));

#line 27 "root_numpy/src/matrix.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, ((PyObject *)__pyx_v_arr));

#line 27 "root_numpy/src/matrix.pyx"
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 27, __pyx_L1_error)

#line 27 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 27 "root_numpy/src/matrix.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 27 "root_numpy/src/matrix.pyx"
  }

#line 27 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 27 "root_numpy/src/matrix.pyx"
  __pyx_r = __pyx_t_6;

#line 27 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = 0;

#line 27 "root_numpy/src/matrix.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/matrix.pyx":19
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */

#line 19 "root_numpy/src/matrix.pyx"


#line 19 "root_numpy/src/matrix.pyx"
  /* function exit code */

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_L1_error:;

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 19 "root_numpy/src/matrix.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 19 "root_numpy/src/matrix.pyx"
    __Pyx_PyThreadState_declare

#line 19 "root_numpy/src/matrix.pyx"
    __Pyx_PyThreadState_assign

#line 19 "root_numpy/src/matrix.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 19 "root_numpy/src/matrix.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_AddTraceback("_librootnumpy.matrix_f", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_r = NULL;

#line 19 "root_numpy/src/matrix.pyx"
  goto __pyx_L2;

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_L0:;

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_L2:;

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyFinishContext();

#line 19 "root_numpy/src/matrix.pyx"
  return __pyx_r;

#line 19 "root_numpy/src/matrix.pyx"
}

/* "root_numpy/src/sample.pyx":6
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f1(f1, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef SIZE_t i
 */

#line 6 "root_numpy/src/sample.pyx"


#line 6 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 6 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_73sample_f1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_73sample_f1 = 
#line 6 "root_numpy/src/sample.pyx"
{"sample_f1", (PyCFunction)__pyx_pw_13_librootnumpy_73sample_f1, METH_VARARGS|METH_KEYWORDS, 0};

#line 6 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_73sample_f1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f1 = 0
#line 6 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples
#line 6 "root_numpy/src/sample.pyx"
;

#line 6 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f1 (wrapper)", 0);

#line 6 "root_numpy/src/sample.pyx"
  {

#line 6 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f1,&__pyx_n_s_n_samples,0};

#line 6 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 6 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 6 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 6 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 6 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 6 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 6 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 6 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 6 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 6 "root_numpy/src/sample.pyx"
      }

#line 6 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 6 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 6 "root_numpy/src/sample.pyx"
        case  0:

#line 6 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f1)) != 0)) kw_args--;
        else 
#line 6 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 6 "root_numpy/src/sample.pyx"
        case  1:

#line 6 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 6 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_f1", 1, 2, 2, 1); 
#line 6 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 6, __pyx_L3_error)

#line 6 "root_numpy/src/sample.pyx"
        }

#line 6 "root_numpy/src/sample.pyx"
      }

#line 6 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 6 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_f1") < 0)) __PYX_ERR(5, 6, __pyx_L3_error)

#line 6 "root_numpy/src/sample.pyx"
      }

#line 6 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 6 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 6 "root_numpy/src/sample.pyx"
    } else {

#line 6 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 6 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 6 "root_numpy/src/sample.pyx"
    }

#line 6 "root_numpy/src/sample.pyx"
    __pyx_v_f1 = values[0];

#line 6 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_n_samples == (npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(5, 6, __pyx_L3_error)

#line 6 "root_numpy/src/sample.pyx"
  }

#line 6 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 6 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_f1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 6 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 6, __pyx_L3_error)

#line 6 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 6 "root_numpy/src/sample.pyx"
  return NULL;

#line 6 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 6 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_72sample_f1(__pyx_self, __pyx_v_f1, __pyx_v_n_samples);

#line 6 "root_numpy/src/sample.pyx"


#line 6 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 6 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 6 "root_numpy/src/sample.pyx"
}

#line 6 "root_numpy/src/sample.pyx"


#line 6 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_72sample_f1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f1, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples) {
  TF1 *__pyx_v_f1_
#line 6 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 6 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 6 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 6 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 6 "root_numpy/src/sample.pyx"
;

#line 6 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 6 "root_numpy/src/sample.pyx"
  void *__pyx_t_1;

#line 6 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 6 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 6 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 6 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 6 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 6 "root_numpy/src/sample.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 6 "root_numpy/src/sample.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 6 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_9;

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f1", 0);

#line 6 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 6 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 6 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 6 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":7
 * @cython.wraparound(False)
 * def sample_f1(f1, SIZE_t n_samples):
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 */

#line 7 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_f1); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(5, 7, __pyx_L1_error)

#line 7 "root_numpy/src/sample.pyx"
  __pyx_v_f1_ = ((TF1 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":9
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         arr[i] = f1_.GetRandom()
 */

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 9, __pyx_L1_error)

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 9, __pyx_L1_error)

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 9, __pyx_L1_error)

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 9, __pyx_L1_error)

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 9 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 9, __pyx_L1_error)

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 9, __pyx_L1_error)

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 9, __pyx_L1_error)

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 9 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(5, 9, __pyx_L1_error)

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 9, __pyx_L1_error)

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 9 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 9 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(5, 9, __pyx_L1_error)

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 9 "root_numpy/src/sample.pyx"
  {

#line 9 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 9 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 9 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 9 "root_numpy/src/sample.pyx"
      __PYX_ERR(5, 9, __pyx_L1_error)
    } else {
#line 9 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0];

#line 9 "root_numpy/src/sample.pyx"
    }

#line 9 "root_numpy/src/sample.pyx"
  }

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 9 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":10
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         arr[i] = f1_.GetRandom()
 *     return arr
 */

#line 10 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 10 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":11
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         arr[i] = f1_.GetRandom()             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 11 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 11 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides) = __pyx_v_f1_->GetRandom();

#line 11 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":12
 *     for i from 0 <= i < n_samples:
 *         arr[i] = f1_.GetRandom()
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 12 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 12 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 12 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 12 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":6
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f1(f1, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef SIZE_t i
 */

#line 6 "root_numpy/src/sample.pyx"


#line 6 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 6 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 6 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 6 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_declare

#line 6 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_assign

#line 6 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 6 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 6 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 6 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 6 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 6 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 6 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 6 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/sample.pyx":17
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h1(h1, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef SIZE_t i
 */

#line 17 "root_numpy/src/sample.pyx"


#line 17 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 17 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_75sample_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_75sample_h1 = 
#line 17 "root_numpy/src/sample.pyx"
{"sample_h1", (PyCFunction)__pyx_pw_13_librootnumpy_75sample_h1, METH_VARARGS|METH_KEYWORDS, 0};

#line 17 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_75sample_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_h1 = 0
#line 17 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples
#line 17 "root_numpy/src/sample.pyx"
;

#line 17 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h1 (wrapper)", 0);

#line 17 "root_numpy/src/sample.pyx"
  {

#line 17 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h1,&__pyx_n_s_n_samples,0};

#line 17 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 17 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 17 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 17 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 17 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 17 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 17 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 17 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 17 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 17 "root_numpy/src/sample.pyx"
      }

#line 17 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 17 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 17 "root_numpy/src/sample.pyx"
        case  0:

#line 17 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h1)) != 0)) kw_args--;
        else 
#line 17 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 17 "root_numpy/src/sample.pyx"
        case  1:

#line 17 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 17 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_h1", 1, 2, 2, 1); 
#line 17 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 17, __pyx_L3_error)

#line 17 "root_numpy/src/sample.pyx"
        }

#line 17 "root_numpy/src/sample.pyx"
      }

#line 17 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 17 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_h1") < 0)) __PYX_ERR(5, 17, __pyx_L3_error)

#line 17 "root_numpy/src/sample.pyx"
      }

#line 17 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 17 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 17 "root_numpy/src/sample.pyx"
    } else {

#line 17 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 17 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 17 "root_numpy/src/sample.pyx"
    }

#line 17 "root_numpy/src/sample.pyx"
    __pyx_v_h1 = values[0];

#line 17 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_n_samples == (npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(5, 17, __pyx_L3_error)

#line 17 "root_numpy/src/sample.pyx"
  }

#line 17 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_h1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 17 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 17, __pyx_L3_error)

#line 17 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 17 "root_numpy/src/sample.pyx"
  return NULL;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 17 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_74sample_h1(__pyx_self, __pyx_v_h1, __pyx_v_n_samples);

#line 17 "root_numpy/src/sample.pyx"


#line 17 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 17 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 17 "root_numpy/src/sample.pyx"
}

#line 17 "root_numpy/src/sample.pyx"


#line 17 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_74sample_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h1, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples) {
  TH1 *__pyx_v_h1_
#line 17 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 17 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 17 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 17 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 17 "root_numpy/src/sample.pyx"
;

#line 17 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 17 "root_numpy/src/sample.pyx"
  void *__pyx_t_1;

#line 17 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 17 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 17 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 17 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 17 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 17 "root_numpy/src/sample.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 17 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_9;

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h1", 0);

#line 17 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":18
 * @cython.wraparound(False)
 * def sample_h1(h1, SIZE_t n_samples):
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 */

#line 18 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_h1); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(5, 18, __pyx_L1_error)

#line 18 "root_numpy/src/sample.pyx"
  __pyx_v_h1_ = ((TH1 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":20
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         arr[i] = h1_.GetRandom()
 */

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 20 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 20 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 20 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 20 "root_numpy/src/sample.pyx"
  {

#line 20 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 20 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 20 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 20 "root_numpy/src/sample.pyx"
      __PYX_ERR(5, 20, __pyx_L1_error)
    } else {
#line 20 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0];

#line 20 "root_numpy/src/sample.pyx"
    }

#line 20 "root_numpy/src/sample.pyx"
  }

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 20 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 20 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":21
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         arr[i] = h1_.GetRandom()
 *     return arr
 */

#line 21 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 21 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":22
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         arr[i] = h1_.GetRandom()             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 22 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 22 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides) = __pyx_v_h1_->GetRandom();

#line 22 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":23
 *     for i from 0 <= i < n_samples:
 *         arr[i] = h1_.GetRandom()
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 23 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 23 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":17
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h1(h1, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef SIZE_t i
 */

#line 17 "root_numpy/src/sample.pyx"


#line 17 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 17 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 17 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 17 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_declare

#line 17 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_assign

#line 17 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 17 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 17 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 17 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 17 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 17 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 17 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/sample.pyx":28
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f2(f2, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef SIZE_t i
 */

#line 28 "root_numpy/src/sample.pyx"


#line 28 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 28 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_77sample_f2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_77sample_f2 = 
#line 28 "root_numpy/src/sample.pyx"
{"sample_f2", (PyCFunction)__pyx_pw_13_librootnumpy_77sample_f2, METH_VARARGS|METH_KEYWORDS, 0};

#line 28 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_77sample_f2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f2 = 0
#line 28 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples
#line 28 "root_numpy/src/sample.pyx"
;

#line 28 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f2 (wrapper)", 0);

#line 28 "root_numpy/src/sample.pyx"
  {

#line 28 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f2,&__pyx_n_s_n_samples,0};

#line 28 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 28 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 28 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 28 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 28 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 28 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 28 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 28 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 28 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 28 "root_numpy/src/sample.pyx"
      }

#line 28 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 28 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 28 "root_numpy/src/sample.pyx"
        case  0:

#line 28 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f2)) != 0)) kw_args--;
        else 
#line 28 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 28 "root_numpy/src/sample.pyx"
        case  1:

#line 28 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 28 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_f2", 1, 2, 2, 1); 
#line 28 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 28, __pyx_L3_error)

#line 28 "root_numpy/src/sample.pyx"
        }

#line 28 "root_numpy/src/sample.pyx"
      }

#line 28 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 28 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_f2") < 0)) __PYX_ERR(5, 28, __pyx_L3_error)

#line 28 "root_numpy/src/sample.pyx"
      }

#line 28 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 28 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 28 "root_numpy/src/sample.pyx"
    } else {

#line 28 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 28 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 28 "root_numpy/src/sample.pyx"
    }

#line 28 "root_numpy/src/sample.pyx"
    __pyx_v_f2 = values[0];

#line 28 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_n_samples == (npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(5, 28, __pyx_L3_error)

#line 28 "root_numpy/src/sample.pyx"
  }

#line 28 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_f2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 28 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 28, __pyx_L3_error)

#line 28 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 28 "root_numpy/src/sample.pyx"
  return NULL;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 28 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_76sample_f2(__pyx_self, __pyx_v_f2, __pyx_v_n_samples);

#line 28 "root_numpy/src/sample.pyx"


#line 28 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 28 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 28 "root_numpy/src/sample.pyx"
}

#line 28 "root_numpy/src/sample.pyx"


#line 28 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_76sample_f2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f2, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples) {
  TF2 *__pyx_v_f2_
#line 28 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 28 "root_numpy/src/sample.pyx"
;
  double __pyx_v_x
#line 28 "root_numpy/src/sample.pyx"
;
  double __pyx_v_y
#line 28 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 28 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 28 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 28 "root_numpy/src/sample.pyx"
;

#line 28 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 28 "root_numpy/src/sample.pyx"
  void *__pyx_t_1;

#line 28 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 28 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 28 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 28 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 28 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 28 "root_numpy/src/sample.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 28 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_9;

#line 28 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_10;

#line 28 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_11;

#line 28 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_12;

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f2", 0);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":29
 * @cython.wraparound(False)
 * def sample_f2(f2, SIZE_t n_samples):
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef double x = 0
 */

#line 29 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_f2); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(5, 29, __pyx_L1_error)

#line 29 "root_numpy/src/sample.pyx"
  __pyx_v_f2_ = ((TF2 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":31
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef SIZE_t i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 */

#line 31 "root_numpy/src/sample.pyx"
  __pyx_v_x = 0.0;

  /* "root_numpy/src/sample.pyx":32
 *     cdef SIZE_t i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */

#line 32 "root_numpy/src/sample.pyx"
  __pyx_v_y = 0.0;

  /* "root_numpy/src/sample.pyx":33
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         f2_.GetRandom2(x, y)
 */

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 33 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(__pyx_int_2);

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_int_2);

#line 33 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 33 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_4 = 0;

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 33 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 33 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(5, 33, __pyx_L1_error)

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 33 "root_numpy/src/sample.pyx"
  {

#line 33 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 33 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 33 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 33 "root_numpy/src/sample.pyx"
      __PYX_ERR(5, 33, __pyx_L1_error)
    } else {
#line 33 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 33 "root_numpy/src/sample.pyx"
    }

#line 33 "root_numpy/src/sample.pyx"
  }

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 33 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 33 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":34
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         f2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 */

#line 34 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 34 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":35
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         f2_.GetRandom2(x, y)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */

#line 35 "root_numpy/src/sample.pyx"
    __pyx_v_f2_->GetRandom2(__pyx_v_x, __pyx_v_y);

    /* "root_numpy/src/sample.pyx":36
 *     for i from 0 <= i < n_samples:
 *         f2_.GetRandom2(x, y)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *     return arr
 */

#line 36 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 36 "root_numpy/src/sample.pyx"
    __pyx_t_10 = 0;

#line 36 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "root_numpy/src/sample.pyx":37
 *         f2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 37 "root_numpy/src/sample.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 37 "root_numpy/src/sample.pyx"
    __pyx_t_12 = 1;

#line 37 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;

#line 37 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":38
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 38 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 38 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 38 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 38 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":28
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f2(f2, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef SIZE_t i
 */

#line 28 "root_numpy/src/sample.pyx"


#line 28 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 28 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 28 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 28 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_declare

#line 28 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_assign

#line 28 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 28 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 28 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 28 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 28 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/sample.pyx":43
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h2(h2, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef SIZE_t i
 */

#line 43 "root_numpy/src/sample.pyx"


#line 43 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 43 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_79sample_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_79sample_h2 = 
#line 43 "root_numpy/src/sample.pyx"
{"sample_h2", (PyCFunction)__pyx_pw_13_librootnumpy_79sample_h2, METH_VARARGS|METH_KEYWORDS, 0};

#line 43 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_79sample_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_h2 = 0
#line 43 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples
#line 43 "root_numpy/src/sample.pyx"
;

#line 43 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h2 (wrapper)", 0);

#line 43 "root_numpy/src/sample.pyx"
  {

#line 43 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h2,&__pyx_n_s_n_samples,0};

#line 43 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 43 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 43 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 43 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 43 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 43 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 43 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 43 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 43 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 43 "root_numpy/src/sample.pyx"
      }

#line 43 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 43 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 43 "root_numpy/src/sample.pyx"
        case  0:

#line 43 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h2)) != 0)) kw_args--;
        else 
#line 43 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 43 "root_numpy/src/sample.pyx"
        case  1:

#line 43 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 43 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_h2", 1, 2, 2, 1); 
#line 43 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 43, __pyx_L3_error)

#line 43 "root_numpy/src/sample.pyx"
        }

#line 43 "root_numpy/src/sample.pyx"
      }

#line 43 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 43 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_h2") < 0)) __PYX_ERR(5, 43, __pyx_L3_error)

#line 43 "root_numpy/src/sample.pyx"
      }

#line 43 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 43 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 43 "root_numpy/src/sample.pyx"
    } else {

#line 43 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 43 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 43 "root_numpy/src/sample.pyx"
    }

#line 43 "root_numpy/src/sample.pyx"
    __pyx_v_h2 = values[0];

#line 43 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_n_samples == (npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(5, 43, __pyx_L3_error)

#line 43 "root_numpy/src/sample.pyx"
  }

#line 43 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 43 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_h2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 43 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 43, __pyx_L3_error)

#line 43 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 43 "root_numpy/src/sample.pyx"
  return NULL;

#line 43 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 43 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_78sample_h2(__pyx_self, __pyx_v_h2, __pyx_v_n_samples);

#line 43 "root_numpy/src/sample.pyx"


#line 43 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 43 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 43 "root_numpy/src/sample.pyx"
}

#line 43 "root_numpy/src/sample.pyx"


#line 43 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_78sample_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h2, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples) {
  TH2 *__pyx_v_h2_
#line 43 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 43 "root_numpy/src/sample.pyx"
;
  double __pyx_v_x
#line 43 "root_numpy/src/sample.pyx"
;
  double __pyx_v_y
#line 43 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 43 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 43 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 43 "root_numpy/src/sample.pyx"
;

#line 43 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 43 "root_numpy/src/sample.pyx"
  void *__pyx_t_1;

#line 43 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 43 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 43 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 43 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 43 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 43 "root_numpy/src/sample.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 43 "root_numpy/src/sample.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 43 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_9;

#line 43 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_10;

#line 43 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_11;

#line 43 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_12;

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h2", 0);

#line 43 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 43 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 43 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 43 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":44
 * @cython.wraparound(False)
 * def sample_h2(h2, SIZE_t n_samples):
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef double x = 0
 */

#line 44 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_h2); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(5, 44, __pyx_L1_error)

#line 44 "root_numpy/src/sample.pyx"
  __pyx_v_h2_ = ((TH2 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":46
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef SIZE_t i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 */

#line 46 "root_numpy/src/sample.pyx"
  __pyx_v_x = 0.0;

  /* "root_numpy/src/sample.pyx":47
 *     cdef SIZE_t i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */

#line 47 "root_numpy/src/sample.pyx"
  __pyx_v_y = 0.0;

  /* "root_numpy/src/sample.pyx":48
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         h2_.GetRandom2(x, y)
 */

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 48 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(__pyx_int_2);

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_int_2);

#line 48 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 48 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_4 = 0;

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 48 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 48 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 48 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(5, 48, __pyx_L1_error)

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 48 "root_numpy/src/sample.pyx"
  {

#line 48 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 48 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 48 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 48 "root_numpy/src/sample.pyx"
      __PYX_ERR(5, 48, __pyx_L1_error)
    } else {
#line 48 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 48 "root_numpy/src/sample.pyx"
    }

#line 48 "root_numpy/src/sample.pyx"
  }

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 48 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 48 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":49
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         h2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 */

#line 49 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 49 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":50
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         h2_.GetRandom2(x, y)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */

#line 50 "root_numpy/src/sample.pyx"
    __pyx_v_h2_->GetRandom2(__pyx_v_x, __pyx_v_y);

    /* "root_numpy/src/sample.pyx":51
 *     for i from 0 <= i < n_samples:
 *         h2_.GetRandom2(x, y)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *     return arr
 */

#line 51 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 51 "root_numpy/src/sample.pyx"
    __pyx_t_10 = 0;

#line 51 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "root_numpy/src/sample.pyx":52
 *         h2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 52 "root_numpy/src/sample.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 52 "root_numpy/src/sample.pyx"
    __pyx_t_12 = 1;

#line 52 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;

#line 52 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":53
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 53 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 53 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 53 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 53 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":43
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h2(h2, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef SIZE_t i
 */

#line 43 "root_numpy/src/sample.pyx"


#line 43 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 43 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 43 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 43 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_declare

#line 43 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_assign

#line 43 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 43 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 43 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 43 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 43 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 43 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 43 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 43 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/sample.pyx":58
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f3(f3, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef SIZE_t i
 */

#line 58 "root_numpy/src/sample.pyx"


#line 58 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 58 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_81sample_f3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_81sample_f3 = 
#line 58 "root_numpy/src/sample.pyx"
{"sample_f3", (PyCFunction)__pyx_pw_13_librootnumpy_81sample_f3, METH_VARARGS|METH_KEYWORDS, 0};

#line 58 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_81sample_f3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f3 = 0
#line 58 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples
#line 58 "root_numpy/src/sample.pyx"
;

#line 58 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f3 (wrapper)", 0);

#line 58 "root_numpy/src/sample.pyx"
  {

#line 58 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f3,&__pyx_n_s_n_samples,0};

#line 58 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 58 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 58 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 58 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 58 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 58 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 58 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 58 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 58 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 58 "root_numpy/src/sample.pyx"
      }

#line 58 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 58 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 58 "root_numpy/src/sample.pyx"
        case  0:

#line 58 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f3)) != 0)) kw_args--;
        else 
#line 58 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 58 "root_numpy/src/sample.pyx"
        case  1:

#line 58 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 58 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_f3", 1, 2, 2, 1); 
#line 58 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 58, __pyx_L3_error)

#line 58 "root_numpy/src/sample.pyx"
        }

#line 58 "root_numpy/src/sample.pyx"
      }

#line 58 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 58 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_f3") < 0)) __PYX_ERR(5, 58, __pyx_L3_error)

#line 58 "root_numpy/src/sample.pyx"
      }

#line 58 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 58 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 58 "root_numpy/src/sample.pyx"
    } else {

#line 58 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 58 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 58 "root_numpy/src/sample.pyx"
    }

#line 58 "root_numpy/src/sample.pyx"
    __pyx_v_f3 = values[0];

#line 58 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_n_samples == (npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(5, 58, __pyx_L3_error)

#line 58 "root_numpy/src/sample.pyx"
  }

#line 58 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 58 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_f3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 58 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 58, __pyx_L3_error)

#line 58 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 58 "root_numpy/src/sample.pyx"
  return NULL;

#line 58 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 58 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_80sample_f3(__pyx_self, __pyx_v_f3, __pyx_v_n_samples);

#line 58 "root_numpy/src/sample.pyx"


#line 58 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 58 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 58 "root_numpy/src/sample.pyx"
}

#line 58 "root_numpy/src/sample.pyx"


#line 58 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_80sample_f3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f3, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples) {
  TF3 *__pyx_v_f3_
#line 58 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 58 "root_numpy/src/sample.pyx"
;
  double __pyx_v_x
#line 58 "root_numpy/src/sample.pyx"
;
  double __pyx_v_y
#line 58 "root_numpy/src/sample.pyx"
;
  double __pyx_v_z
#line 58 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 58 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 58 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 58 "root_numpy/src/sample.pyx"
;

#line 58 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 58 "root_numpy/src/sample.pyx"
  void *__pyx_t_1;

#line 58 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 58 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 58 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 58 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 58 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 58 "root_numpy/src/sample.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 58 "root_numpy/src/sample.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 58 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_9;

#line 58 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_10;

#line 58 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_11;

#line 58 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_12;

#line 58 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_13;

#line 58 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_14;

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f3", 0);

#line 58 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 58 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 58 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 58 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":59
 * @cython.wraparound(False)
 * def sample_f3(f3, SIZE_t n_samples):
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef double x = 0
 */

#line 59 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_f3); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(5, 59, __pyx_L1_error)

#line 59 "root_numpy/src/sample.pyx"
  __pyx_v_f3_ = ((TF3 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":61
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef SIZE_t i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef double z = 0
 */

#line 61 "root_numpy/src/sample.pyx"
  __pyx_v_x = 0.0;

  /* "root_numpy/src/sample.pyx":62
 *     cdef SIZE_t i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 */

#line 62 "root_numpy/src/sample.pyx"
  __pyx_v_y = 0.0;

  /* "root_numpy/src/sample.pyx":63
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef double z = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */

#line 63 "root_numpy/src/sample.pyx"
  __pyx_v_z = 0.0;

  /* "root_numpy/src/sample.pyx":64
 *     cdef double y = 0
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         f3_.GetRandom3(x, y, z)
 */

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 64 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(__pyx_int_3);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_int_3);

#line 64 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 64 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_4 = 0;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 64 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 64 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(5, 64, __pyx_L1_error)

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 64 "root_numpy/src/sample.pyx"
  {

#line 64 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 64 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 64 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 64 "root_numpy/src/sample.pyx"
      __PYX_ERR(5, 64, __pyx_L1_error)
    } else {
#line 64 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 64 "root_numpy/src/sample.pyx"
    }

#line 64 "root_numpy/src/sample.pyx"
  }

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":65
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         f3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 */

#line 65 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 65 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":66
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         f3_.GetRandom3(x, y, z)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */

#line 66 "root_numpy/src/sample.pyx"
    __pyx_v_f3_->GetRandom3(__pyx_v_x, __pyx_v_y, __pyx_v_z);

    /* "root_numpy/src/sample.pyx":67
 *     for i from 0 <= i < n_samples:
 *         f3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 */

#line 67 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 67 "root_numpy/src/sample.pyx"
    __pyx_t_10 = 0;

#line 67 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "root_numpy/src/sample.pyx":68
 *         f3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *         arr[i, 2] = z
 *     return arr
 */

#line 68 "root_numpy/src/sample.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 68 "root_numpy/src/sample.pyx"
    __pyx_t_12 = 1;

#line 68 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;

    /* "root_numpy/src/sample.pyx":69
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *         arr[i, 2] = z             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 69 "root_numpy/src/sample.pyx"
    __pyx_t_13 = __pyx_v_i;

#line 69 "root_numpy/src/sample.pyx"
    __pyx_t_14 = 2;

#line 69 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_z;

#line 69 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":70
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 70 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 70 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":58
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f3(f3, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef SIZE_t i
 */

#line 58 "root_numpy/src/sample.pyx"


#line 58 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 58 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 58 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 58 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_declare

#line 58 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_assign

#line 58 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 58 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 58 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 58 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 58 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 58 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 58 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 58 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/sample.pyx":75
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h3(h3, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef SIZE_t i
 */

#line 75 "root_numpy/src/sample.pyx"


#line 75 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 75 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_83sample_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_83sample_h3 = 
#line 75 "root_numpy/src/sample.pyx"
{"sample_h3", (PyCFunction)__pyx_pw_13_librootnumpy_83sample_h3, METH_VARARGS|METH_KEYWORDS, 0};

#line 75 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_83sample_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_h3 = 0
#line 75 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples
#line 75 "root_numpy/src/sample.pyx"
;

#line 75 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h3 (wrapper)", 0);

#line 75 "root_numpy/src/sample.pyx"
  {

#line 75 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h3,&__pyx_n_s_n_samples,0};

#line 75 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 75 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 75 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 75 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 75 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 75 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 75 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 75 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 75 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 75 "root_numpy/src/sample.pyx"
      }

#line 75 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 75 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 75 "root_numpy/src/sample.pyx"
        case  0:

#line 75 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h3)) != 0)) kw_args--;
        else 
#line 75 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 75 "root_numpy/src/sample.pyx"
        case  1:

#line 75 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 75 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_h3", 1, 2, 2, 1); 
#line 75 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 75, __pyx_L3_error)

#line 75 "root_numpy/src/sample.pyx"
        }

#line 75 "root_numpy/src/sample.pyx"
      }

#line 75 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 75 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_h3") < 0)) __PYX_ERR(5, 75, __pyx_L3_error)

#line 75 "root_numpy/src/sample.pyx"
      }

#line 75 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 75 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 75 "root_numpy/src/sample.pyx"
    } else {

#line 75 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 75 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 75 "root_numpy/src/sample.pyx"
    }

#line 75 "root_numpy/src/sample.pyx"
    __pyx_v_h3 = values[0];

#line 75 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_Py_intptr_t(values[1]); if (unlikely((__pyx_v_n_samples == (npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(5, 75, __pyx_L3_error)

#line 75 "root_numpy/src/sample.pyx"
  }

#line 75 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 75 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_h3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 75 "root_numpy/src/sample.pyx"
__PYX_ERR(5, 75, __pyx_L3_error)

#line 75 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 75 "root_numpy/src/sample.pyx"
  return NULL;

#line 75 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 75 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_82sample_h3(__pyx_self, __pyx_v_h3, __pyx_v_n_samples);

#line 75 "root_numpy/src/sample.pyx"


#line 75 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 75 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 75 "root_numpy/src/sample.pyx"
}

#line 75 "root_numpy/src/sample.pyx"


#line 75 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_82sample_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h3, __pyx_t_13_librootnumpy_SIZE_t __pyx_v_n_samples) {
  TH3 *__pyx_v_h3_
#line 75 "root_numpy/src/sample.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 75 "root_numpy/src/sample.pyx"
;
  double __pyx_v_x
#line 75 "root_numpy/src/sample.pyx"
;
  double __pyx_v_y
#line 75 "root_numpy/src/sample.pyx"
;
  double __pyx_v_z
#line 75 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 75 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 75 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 75 "root_numpy/src/sample.pyx"
;

#line 75 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 75 "root_numpy/src/sample.pyx"
  void *__pyx_t_1;

#line 75 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 75 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 75 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 75 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 75 "root_numpy/src/sample.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 75 "root_numpy/src/sample.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 75 "root_numpy/src/sample.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 75 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_9;

#line 75 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_10;

#line 75 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_11;

#line 75 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_12;

#line 75 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_13;

#line 75 "root_numpy/src/sample.pyx"
  Py_ssize_t __pyx_t_14;

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h3", 0);

#line 75 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 75 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 75 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 75 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":76
 * @cython.wraparound(False)
 * def sample_h3(h3, SIZE_t n_samples):
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef double x = 0
 */

#line 76 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_h3); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(5, 76, __pyx_L1_error)

#line 76 "root_numpy/src/sample.pyx"
  __pyx_v_h3_ = ((TH3 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":78
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef SIZE_t i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef double z = 0
 */

#line 78 "root_numpy/src/sample.pyx"
  __pyx_v_x = 0.0;

  /* "root_numpy/src/sample.pyx":79
 *     cdef SIZE_t i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 */

#line 79 "root_numpy/src/sample.pyx"
  __pyx_v_y = 0.0;

  /* "root_numpy/src/sample.pyx":80
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef double z = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */

#line 80 "root_numpy/src/sample.pyx"
  __pyx_v_z = 0.0;

  /* "root_numpy/src/sample.pyx":81
 *     cdef double y = 0
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         h3_.GetRandom3(x, y, z)
 */

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 81 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(__pyx_int_3);

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_int_3);

#line 81 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 81 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_4 = 0;

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 81 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 81 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 81 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(5, 81, __pyx_L1_error)

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 81 "root_numpy/src/sample.pyx"
  {

#line 81 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 81 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 81 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 81 "root_numpy/src/sample.pyx"
      __PYX_ERR(5, 81, __pyx_L1_error)
    } else {
#line 81 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 81 "root_numpy/src/sample.pyx"
    }

#line 81 "root_numpy/src/sample.pyx"
  }

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 81 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 81 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":82
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         h3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 */

#line 82 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 82 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":83
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         h3_.GetRandom3(x, y, z)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */

#line 83 "root_numpy/src/sample.pyx"
    __pyx_v_h3_->GetRandom3(__pyx_v_x, __pyx_v_y, __pyx_v_z);

    /* "root_numpy/src/sample.pyx":84
 *     for i from 0 <= i < n_samples:
 *         h3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 */

#line 84 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 84 "root_numpy/src/sample.pyx"
    __pyx_t_10 = 0;

#line 84 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "root_numpy/src/sample.pyx":85
 *         h3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *         arr[i, 2] = z
 *     return arr
 */

#line 85 "root_numpy/src/sample.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 85 "root_numpy/src/sample.pyx"
    __pyx_t_12 = 1;

#line 85 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;

    /* "root_numpy/src/sample.pyx":86
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *         arr[i, 2] = z             # <<<<<<<<<<<<<<
 *     return arr
 */

#line 86 "root_numpy/src/sample.pyx"
    __pyx_t_13 = __pyx_v_i;

#line 86 "root_numpy/src/sample.pyx"
    __pyx_t_14 = 2;

#line 86 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_z;

#line 86 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":87
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 *     return arr             # <<<<<<<<<<<<<<
 */

#line 87 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 87 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 87 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 87 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":75
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h3(h3, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef SIZE_t i
 */

#line 75 "root_numpy/src/sample.pyx"


#line 75 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 75 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 75 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 75 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_declare

#line 75 "root_numpy/src/sample.pyx"
    __Pyx_PyThreadState_assign

#line 75 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 75 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 75 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 75 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 75 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 75 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 75 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 75 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/hist.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 3 "root_numpy/src/hist.pyx"


#line 3 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 3 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_85fill_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_85fill_h1 = 
#line 3 "root_numpy/src/hist.pyx"
{"fill_h1", (PyCFunction)__pyx_pw_13_librootnumpy_85fill_h1, METH_VARARGS|METH_KEYWORDS, 0};

#line 3 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_85fill_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 3 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 3 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 3 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 3 "root_numpy/src/hist.pyx"
;

#line 3 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h1 (wrapper)", 0);

#line 3 "root_numpy/src/hist.pyx"
  {

#line 3 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 3 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":5
 * def fill_h1(hist,
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 5 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 5 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 5 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 5 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 5 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 5 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 5 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 5 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 5 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 5 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 5 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 5 "root_numpy/src/hist.pyx"
      }

#line 5 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 5 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 5 "root_numpy/src/hist.pyx"
        case  0:

#line 5 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 5 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 5 "root_numpy/src/hist.pyx"
        case  1:

#line 5 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 5 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_h1", 0, 2, 4, 1); 
#line 5 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 3, __pyx_L3_error)

#line 5 "root_numpy/src/hist.pyx"
        }

#line 5 "root_numpy/src/hist.pyx"
        case  2:

#line 5 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 5 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 5 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 5 "root_numpy/src/hist.pyx"
        }

#line 5 "root_numpy/src/hist.pyx"
        case  3:

#line 5 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 5 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 5 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 5 "root_numpy/src/hist.pyx"
        }

#line 5 "root_numpy/src/hist.pyx"
      }

#line 5 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 5 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_h1") < 0)) __PYX_ERR(6, 3, __pyx_L3_error)

#line 5 "root_numpy/src/hist.pyx"
      }

#line 5 "root_numpy/src/hist.pyx"
    } else {

#line 5 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 5 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 5 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 5 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 5 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 5 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 5 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 5 "root_numpy/src/hist.pyx"
      }

#line 5 "root_numpy/src/hist.pyx"
    }

#line 5 "root_numpy/src/hist.pyx"
    __pyx_v_hist = values[0];

#line 5 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 5 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 5 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 5 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) __PYX_ERR(6, 6, __pyx_L3_error)

#line 5 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":6
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */

#line 6 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 6 "root_numpy/src/hist.pyx"
    }

#line 6 "root_numpy/src/hist.pyx"
  }

#line 6 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 6 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_h1", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 6 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 3, __pyx_L3_error)

#line 6 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 6 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 6 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 6 "root_numpy/src/hist.pyx"
  return NULL;

#line 6 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 6 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(6, 4, __pyx_L1_error)

#line 6 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) __PYX_ERR(6, 5, __pyx_L1_error)
  __pyx_r = 
#line 6 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_84fill_h1(__pyx_self, __pyx_v_hist, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 3 "root_numpy/src/hist.pyx"


#line 3 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 3 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 3 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 3 "root_numpy/src/hist.pyx"
}

#line 3 "root_numpy/src/hist.pyx"


#line 3 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_84fill_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TH1 *__pyx_v__hist
#line 3 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 3 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 3 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 3 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 3 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 3 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 3 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 3 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 3 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 3 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 3 "root_numpy/src/hist.pyx"
;

#line 3 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 3 "root_numpy/src/hist.pyx"
  void *__pyx_t_1;

#line 3 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 3 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 3 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 3 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 3 "root_numpy/src/hist.pyx"
  PyArrayObject *__pyx_t_6 = NULL;

#line 3 "root_numpy/src/hist.pyx"
  int __pyx_t_7;

#line 3 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 3 "root_numpy/src/hist.pyx"
  int __pyx_t_9;

#line 3 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 3 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 3 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 3 "root_numpy/src/hist.pyx"
  int __pyx_t_13;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_14;

#line 3 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_15;

#line 3 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_16;

#line 3 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_17;

#line 3 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_18;

#line 3 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_19;

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h1", 0);

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 3 "root_numpy/src/hist.pyx"
  {

#line 3 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 3 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(6, 3, __pyx_L1_error)

#line 3 "root_numpy/src/hist.pyx"
  }

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

#line 3 "root_numpy/src/hist.pyx"
  {

#line 3 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 3 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(6, 3, __pyx_L1_error)

#line 3 "root_numpy/src/hist.pyx"
  }

#line 3 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":8
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 8 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(6, 8, __pyx_L1_error)

#line 8 "root_numpy/src/hist.pyx"
  __pyx_v__hist = ((TH1 *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":9
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef SIZE_t i
 */

#line 9 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":10
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 10 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 10, __pyx_L1_error)

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 10 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 10, __pyx_L1_error)

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 10 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 10, __pyx_L1_error)

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 10 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 10, __pyx_L1_error)

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 10 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 10, __pyx_L1_error)

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 10 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(6, 10, __pyx_L1_error)

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 10 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__39, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 10, __pyx_L1_error)

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 10 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 10, __pyx_L1_error)

#line 10 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 10 "root_numpy/src/hist.pyx"
  {

#line 10 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 10 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 10 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 10 "root_numpy/src/hist.pyx"
      __PYX_ERR(6, 10, __pyx_L1_error)
    } else {
#line 10 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 10 "root_numpy/src/hist.pyx"
    }

#line 10 "root_numpy/src/hist.pyx"
  }

#line 10 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 10 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 10 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":13
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 13 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 13 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":14
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 14 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 14 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 14 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 14 "root_numpy/src/hist.pyx"
    {

#line 14 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 14 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 14 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 14 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 14 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 14 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 14 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 14 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 14 "root_numpy/src/hist.pyx"
        } else {

#line 14 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 14 "root_numpy/src/hist.pyx"
        }

#line 14 "root_numpy/src/hist.pyx"
      }

#line 14 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 14 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(6, 14, __pyx_L1_error)

#line 14 "root_numpy/src/hist.pyx"
    }

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 14 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

    /* "root_numpy/src/hist.pyx":13
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 13 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":15
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])
 */

#line 15 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 15 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 15 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":16
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i], weights[i])
 *             if return_indices:
 */

#line 16 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 16 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":17
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 17 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 17 "root_numpy/src/hist.pyx"
      __pyx_t_16 = __pyx_v_i;

#line 17 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":18
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 18 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 18 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":19
 *             bin_idx = _hist.Fill(array[i], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 19 "root_numpy/src/hist.pyx"
        __pyx_t_17 = __pyx_v_i;

#line 19 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":18
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 18 "root_numpy/src/hist.pyx"
      }

#line 18 "root_numpy/src/hist.pyx"
    }

    /* "root_numpy/src/hist.pyx":15
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])
 */

#line 15 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 15 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":21
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i])
 *             if return_indices:
 */

#line 21 "root_numpy/src/hist.pyx"
  /*else*/ {

#line 21 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 21 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":22
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 22 "root_numpy/src/hist.pyx"
      __pyx_t_18 = __pyx_v_i;

#line 22 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_array.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":23
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 23 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 23 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":24
 *             bin_idx = _hist.Fill(array[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 24 "root_numpy/src/hist.pyx"
        __pyx_t_19 = __pyx_v_i;

#line 24 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":23
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 23 "root_numpy/src/hist.pyx"
      }

#line 23 "root_numpy/src/hist.pyx"
    }

#line 23 "root_numpy/src/hist.pyx"
  }

#line 23 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":25
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 25 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 25 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":26
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 26 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 26 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 26 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 26 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/hist.pyx":25
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 25 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 3 "root_numpy/src/hist.pyx"


#line 3 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 3 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 3 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 3 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 3 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_declare

#line 3 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_assign

#line 3 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 3 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 3 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 3 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 3 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 3 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 3 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 3 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 3 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":31
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 31 "root_numpy/src/hist.pyx"


#line 31 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 31 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_87fill_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_87fill_h2 = 
#line 31 "root_numpy/src/hist.pyx"
{"fill_h2", (PyCFunction)__pyx_pw_13_librootnumpy_87fill_h2, METH_VARARGS|METH_KEYWORDS, 0};

#line 31 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_87fill_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 31 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 31 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 31 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 31 "root_numpy/src/hist.pyx"
;

#line 31 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h2 (wrapper)", 0);

#line 31 "root_numpy/src/hist.pyx"
  {

#line 31 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 31 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":33
 * def fill_h2(hist,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 33 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 33 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 33 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 33 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 33 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 33 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 33 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 33 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 33 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 33 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 33 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 33 "root_numpy/src/hist.pyx"
      }

#line 33 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 33 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 33 "root_numpy/src/hist.pyx"
        case  0:

#line 33 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 33 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 33 "root_numpy/src/hist.pyx"
        case  1:

#line 33 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 33 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_h2", 0, 2, 4, 1); 
#line 33 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 31, __pyx_L3_error)

#line 33 "root_numpy/src/hist.pyx"
        }

#line 33 "root_numpy/src/hist.pyx"
        case  2:

#line 33 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 33 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 33 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 33 "root_numpy/src/hist.pyx"
        }

#line 33 "root_numpy/src/hist.pyx"
        case  3:

#line 33 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 33 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 33 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 33 "root_numpy/src/hist.pyx"
        }

#line 33 "root_numpy/src/hist.pyx"
      }

#line 33 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 33 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_h2") < 0)) __PYX_ERR(6, 31, __pyx_L3_error)

#line 33 "root_numpy/src/hist.pyx"
      }

#line 33 "root_numpy/src/hist.pyx"
    } else {

#line 33 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 33 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 33 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 33 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 33 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 33 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 33 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 33 "root_numpy/src/hist.pyx"
      }

#line 33 "root_numpy/src/hist.pyx"
    }

#line 33 "root_numpy/src/hist.pyx"
    __pyx_v_hist = values[0];

#line 33 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 33 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 33 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 33 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) __PYX_ERR(6, 34, __pyx_L3_error)

#line 33 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":34
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */

#line 34 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 34 "root_numpy/src/hist.pyx"
    }

#line 34 "root_numpy/src/hist.pyx"
  }

#line 34 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 34 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_h2", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 34 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 31, __pyx_L3_error)

#line 34 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 34 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 34 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "root_numpy/src/hist.pyx"
  return NULL;

#line 34 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 34 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(6, 32, __pyx_L1_error)

#line 34 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) __PYX_ERR(6, 33, __pyx_L1_error)
  __pyx_r = 
#line 34 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_86fill_h2(__pyx_self, __pyx_v_hist, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":31
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 31 "root_numpy/src/hist.pyx"


#line 31 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 31 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 31 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 31 "root_numpy/src/hist.pyx"
}

#line 31 "root_numpy/src/hist.pyx"


#line 31 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_86fill_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TH2 *__pyx_v__hist
#line 31 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 31 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 31 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 31 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 31 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 31 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 31 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 31 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 31 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 31 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 31 "root_numpy/src/hist.pyx"
;

#line 31 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 31 "root_numpy/src/hist.pyx"
  void *__pyx_t_1;

#line 31 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 31 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 31 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 31 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 31 "root_numpy/src/hist.pyx"
  PyArrayObject *__pyx_t_6 = NULL;

#line 31 "root_numpy/src/hist.pyx"
  int __pyx_t_7;

#line 31 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 31 "root_numpy/src/hist.pyx"
  int __pyx_t_9;

#line 31 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 31 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 31 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 31 "root_numpy/src/hist.pyx"
  int __pyx_t_13;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_14;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_15;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_16;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_17;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_18;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_19;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_20;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_21;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_22;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_23;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_24;

#line 31 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_25;

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h2", 0);

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 31 "root_numpy/src/hist.pyx"
  {

#line 31 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 31 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(6, 31, __pyx_L1_error)

#line 31 "root_numpy/src/hist.pyx"
  }

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

#line 31 "root_numpy/src/hist.pyx"
  {

#line 31 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 31 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(6, 31, __pyx_L1_error)

#line 31 "root_numpy/src/hist.pyx"
  }

#line 31 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":36
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 36 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(6, 36, __pyx_L1_error)

#line 36 "root_numpy/src/hist.pyx"
  __pyx_v__hist = ((TH2 *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":37
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef SIZE_t i
 */

#line 37 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":38
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 38 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__40, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 38 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 38 "root_numpy/src/hist.pyx"
  {

#line 38 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 38 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 38 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 38 "root_numpy/src/hist.pyx"
      __PYX_ERR(6, 38, __pyx_L1_error)
    } else {
#line 38 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 38 "root_numpy/src/hist.pyx"
    }

#line 38 "root_numpy/src/hist.pyx"
  }

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 38 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":41
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 41 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 41 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":42
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 42 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 42 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 42 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 42 "root_numpy/src/hist.pyx"
    {

#line 42 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 42 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 42 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 42 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 42 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 42 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 42 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 42 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 42 "root_numpy/src/hist.pyx"
        } else {

#line 42 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 42 "root_numpy/src/hist.pyx"
        }

#line 42 "root_numpy/src/hist.pyx"
      }

#line 42 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 42 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(6, 42, __pyx_L1_error)

#line 42 "root_numpy/src/hist.pyx"
    }

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 42 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 42 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

    /* "root_numpy/src/hist.pyx":41
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 41 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":43
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 */

#line 43 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 43 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 43 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":44
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:
 */

#line 44 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 44 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":45
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_16 = 0;

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_17 = __pyx_v_i;

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_18 = 1;

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_19 = __pyx_v_i;

#line 45 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":46
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 46 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 46 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":47
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 47 "root_numpy/src/hist.pyx"
        __pyx_t_20 = __pyx_v_i;

#line 47 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":46
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 46 "root_numpy/src/hist.pyx"
      }

#line 46 "root_numpy/src/hist.pyx"
    }

    /* "root_numpy/src/hist.pyx":43
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 */

#line 43 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 43 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":49
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])
 *             if return_indices:
 */

#line 49 "root_numpy/src/hist.pyx"
  /*else*/ {

#line 49 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 49 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":50
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 50 "root_numpy/src/hist.pyx"
      __pyx_t_21 = __pyx_v_i;

#line 50 "root_numpy/src/hist.pyx"
      __pyx_t_22 = 0;

#line 50 "root_numpy/src/hist.pyx"
      __pyx_t_23 = __pyx_v_i;

#line 50 "root_numpy/src/hist.pyx"
      __pyx_t_24 = 1;

#line 50 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "root_numpy/src/hist.pyx":51
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 51 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 51 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":52
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 52 "root_numpy/src/hist.pyx"
        __pyx_t_25 = __pyx_v_i;

#line 52 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":51
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 51 "root_numpy/src/hist.pyx"
      }

#line 51 "root_numpy/src/hist.pyx"
    }

#line 51 "root_numpy/src/hist.pyx"
  }

#line 51 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":53
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 53 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 53 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":54
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 54 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 54 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 54 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 54 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/hist.pyx":53
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 53 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":31
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 31 "root_numpy/src/hist.pyx"


#line 31 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 31 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 31 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 31 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 31 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_declare

#line 31 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_assign

#line 31 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 31 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 31 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 31 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 31 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 31 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 31 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 31 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 31 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 31 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":59
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 59 "root_numpy/src/hist.pyx"


#line 59 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 59 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_89fill_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_89fill_h3 = 
#line 59 "root_numpy/src/hist.pyx"
{"fill_h3", (PyCFunction)__pyx_pw_13_librootnumpy_89fill_h3, METH_VARARGS|METH_KEYWORDS, 0};

#line 59 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_89fill_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 59 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 59 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 59 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 59 "root_numpy/src/hist.pyx"
;

#line 59 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h3 (wrapper)", 0);

#line 59 "root_numpy/src/hist.pyx"
  {

#line 59 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 59 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":61
 * def fill_h3(hist,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 61 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 61 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 61 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 61 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 61 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 61 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 61 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 61 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 61 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 61 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 61 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 61 "root_numpy/src/hist.pyx"
      }

#line 61 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 61 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 61 "root_numpy/src/hist.pyx"
        case  0:

#line 61 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 61 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 61 "root_numpy/src/hist.pyx"
        case  1:

#line 61 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 61 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_h3", 0, 2, 4, 1); 
#line 61 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 59, __pyx_L3_error)

#line 61 "root_numpy/src/hist.pyx"
        }

#line 61 "root_numpy/src/hist.pyx"
        case  2:

#line 61 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 61 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 61 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 61 "root_numpy/src/hist.pyx"
        }

#line 61 "root_numpy/src/hist.pyx"
        case  3:

#line 61 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 61 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 61 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 61 "root_numpy/src/hist.pyx"
        }

#line 61 "root_numpy/src/hist.pyx"
      }

#line 61 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 61 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_h3") < 0)) __PYX_ERR(6, 59, __pyx_L3_error)

#line 61 "root_numpy/src/hist.pyx"
      }

#line 61 "root_numpy/src/hist.pyx"
    } else {

#line 61 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 61 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 61 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 61 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 61 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 61 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 61 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 61 "root_numpy/src/hist.pyx"
      }

#line 61 "root_numpy/src/hist.pyx"
    }

#line 61 "root_numpy/src/hist.pyx"
    __pyx_v_hist = values[0];

#line 61 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 61 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 61 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 61 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) __PYX_ERR(6, 62, __pyx_L3_error)

#line 61 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":62
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */

#line 62 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 62 "root_numpy/src/hist.pyx"
    }

#line 62 "root_numpy/src/hist.pyx"
  }

#line 62 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 62 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_h3", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 62 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 59, __pyx_L3_error)

#line 62 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 62 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 62 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 62 "root_numpy/src/hist.pyx"
  return NULL;

#line 62 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 62 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(6, 60, __pyx_L1_error)

#line 62 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) __PYX_ERR(6, 61, __pyx_L1_error)
  __pyx_r = 
#line 62 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_88fill_h3(__pyx_self, __pyx_v_hist, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":59
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 59 "root_numpy/src/hist.pyx"


#line 59 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 59 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 59 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 59 "root_numpy/src/hist.pyx"
}

#line 59 "root_numpy/src/hist.pyx"


#line 59 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_88fill_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TH3 *__pyx_v__hist
#line 59 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 59 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 59 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 59 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 59 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 59 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 59 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 59 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 59 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 59 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 59 "root_numpy/src/hist.pyx"
;

#line 59 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 59 "root_numpy/src/hist.pyx"
  void *__pyx_t_1;

#line 59 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 59 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 59 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 59 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 59 "root_numpy/src/hist.pyx"
  PyArrayObject *__pyx_t_6 = NULL;

#line 59 "root_numpy/src/hist.pyx"
  int __pyx_t_7;

#line 59 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 59 "root_numpy/src/hist.pyx"
  int __pyx_t_9;

#line 59 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 59 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 59 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 59 "root_numpy/src/hist.pyx"
  int __pyx_t_13;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_14;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_15;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_16;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_17;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_18;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_19;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_20;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_21;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_22;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_23;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_24;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_25;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_26;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_27;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_28;

#line 59 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_29;

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h3", 0);

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 59 "root_numpy/src/hist.pyx"
  {

#line 59 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 59 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(6, 59, __pyx_L1_error)

#line 59 "root_numpy/src/hist.pyx"
  }

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

#line 59 "root_numpy/src/hist.pyx"
  {

#line 59 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 59 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(6, 59, __pyx_L1_error)

#line 59 "root_numpy/src/hist.pyx"
  }

#line 59 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":64
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 64 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(6, 64, __pyx_L1_error)

#line 64 "root_numpy/src/hist.pyx"
  __pyx_v__hist = ((TH3 *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":65
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef SIZE_t i
 */

#line 65 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":66
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 66 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 66, __pyx_L1_error)

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 66 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 66, __pyx_L1_error)

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 66 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 66, __pyx_L1_error)

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 66 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 66, __pyx_L1_error)

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 66 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 66, __pyx_L1_error)

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 66 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(6, 66, __pyx_L1_error)

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 66 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__41, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 66, __pyx_L1_error)

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 66 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 66, __pyx_L1_error)

#line 66 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 66 "root_numpy/src/hist.pyx"
  {

#line 66 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 66 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 66 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 66 "root_numpy/src/hist.pyx"
      __PYX_ERR(6, 66, __pyx_L1_error)
    } else {
#line 66 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 66 "root_numpy/src/hist.pyx"
    }

#line 66 "root_numpy/src/hist.pyx"
  }

#line 66 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 66 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 66 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":69
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 69 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 69 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":70
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 70 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 70 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 70 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 70 "root_numpy/src/hist.pyx"
    {

#line 70 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 70 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 70 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 70 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 70 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 70 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 70 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 70 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 70 "root_numpy/src/hist.pyx"
        } else {

#line 70 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 70 "root_numpy/src/hist.pyx"
        }

#line 70 "root_numpy/src/hist.pyx"
      }

#line 70 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 70 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(6, 70, __pyx_L1_error)

#line 70 "root_numpy/src/hist.pyx"
    }

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 70 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 70 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

    /* "root_numpy/src/hist.pyx":69
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 69 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":71
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 */

#line 71 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 71 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 71 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":72
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:
 */

#line 72 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 72 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":73
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 73 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 73 "root_numpy/src/hist.pyx"
      __pyx_t_16 = 0;

#line 73 "root_numpy/src/hist.pyx"
      __pyx_t_17 = __pyx_v_i;

#line 73 "root_numpy/src/hist.pyx"
      __pyx_t_18 = 1;

#line 73 "root_numpy/src/hist.pyx"
      __pyx_t_19 = __pyx_v_i;

#line 73 "root_numpy/src/hist.pyx"
      __pyx_t_20 = 2;

#line 73 "root_numpy/src/hist.pyx"
      __pyx_t_21 = __pyx_v_i;

#line 73 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":74
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 74 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 74 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":75
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 75 "root_numpy/src/hist.pyx"
        __pyx_t_22 = __pyx_v_i;

#line 75 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":74
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 74 "root_numpy/src/hist.pyx"
      }

#line 74 "root_numpy/src/hist.pyx"
    }

    /* "root_numpy/src/hist.pyx":71
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 */

#line 71 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 71 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":77
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:
 */

#line 77 "root_numpy/src/hist.pyx"
  /*else*/ {

#line 77 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 77 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":78
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 78 "root_numpy/src/hist.pyx"
      __pyx_t_23 = __pyx_v_i;

#line 78 "root_numpy/src/hist.pyx"
      __pyx_t_24 = 0;

#line 78 "root_numpy/src/hist.pyx"
      __pyx_t_25 = __pyx_v_i;

#line 78 "root_numpy/src/hist.pyx"
      __pyx_t_26 = 1;

#line 78 "root_numpy/src/hist.pyx"
      __pyx_t_27 = __pyx_v_i;

#line 78 "root_numpy/src/hist.pyx"
      __pyx_t_28 = 2;

#line 78 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "root_numpy/src/hist.pyx":79
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 79 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 79 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":80
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 80 "root_numpy/src/hist.pyx"
        __pyx_t_29 = __pyx_v_i;

#line 80 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":79
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 79 "root_numpy/src/hist.pyx"
      }

#line 79 "root_numpy/src/hist.pyx"
    }

#line 79 "root_numpy/src/hist.pyx"
  }

#line 79 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":81
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 81 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 81 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":82
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 82 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 82 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 82 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 82 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/hist.pyx":81
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 81 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":59
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 59 "root_numpy/src/hist.pyx"


#line 59 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 59 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 59 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 59 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 59 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_declare

#line 59 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_assign

#line 59 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 59 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 59 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 59 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 59 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 59 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 59 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 59 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 59 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 59 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":87
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p1(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 87 "root_numpy/src/hist.pyx"


#line 87 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 87 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_91fill_p1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_91fill_p1 = 
#line 87 "root_numpy/src/hist.pyx"
{"fill_p1", (PyCFunction)__pyx_pw_13_librootnumpy_91fill_p1, METH_VARARGS|METH_KEYWORDS, 0};

#line 87 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_91fill_p1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_profile = 0
#line 87 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 87 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 87 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 87 "root_numpy/src/hist.pyx"
;

#line 87 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p1 (wrapper)", 0);

#line 87 "root_numpy/src/hist.pyx"
  {

#line 87 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_profile,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 87 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":89
 * def fill_p1(profile,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 89 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 89 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 89 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 89 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 89 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 89 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 89 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 89 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 89 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 89 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 89 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 89 "root_numpy/src/hist.pyx"
      }

#line 89 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 89 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 89 "root_numpy/src/hist.pyx"
        case  0:

#line 89 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else 
#line 89 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 89 "root_numpy/src/hist.pyx"
        case  1:

#line 89 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 89 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_p1", 0, 2, 4, 1); 
#line 89 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 87, __pyx_L3_error)

#line 89 "root_numpy/src/hist.pyx"
        }

#line 89 "root_numpy/src/hist.pyx"
        case  2:

#line 89 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 89 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 89 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 89 "root_numpy/src/hist.pyx"
        }

#line 89 "root_numpy/src/hist.pyx"
        case  3:

#line 89 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 89 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 89 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 89 "root_numpy/src/hist.pyx"
        }

#line 89 "root_numpy/src/hist.pyx"
      }

#line 89 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 89 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_p1") < 0)) __PYX_ERR(6, 87, __pyx_L3_error)

#line 89 "root_numpy/src/hist.pyx"
      }

#line 89 "root_numpy/src/hist.pyx"
    } else {

#line 89 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 89 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 89 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 89 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 89 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 89 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 89 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 89 "root_numpy/src/hist.pyx"
      }

#line 89 "root_numpy/src/hist.pyx"
    }

#line 89 "root_numpy/src/hist.pyx"
    __pyx_v_profile = values[0];

#line 89 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 89 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 89 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 89 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) __PYX_ERR(6, 90, __pyx_L3_error)

#line 89 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":90
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TProfile* _profile = <TProfile*> PyCObject_AsVoidPtr(profile)
 */

#line 90 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 90 "root_numpy/src/hist.pyx"
    }

#line 90 "root_numpy/src/hist.pyx"
  }

#line 90 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 90 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_p1", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 90 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 87, __pyx_L3_error)

#line 90 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 90 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 90 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 90 "root_numpy/src/hist.pyx"
  return NULL;

#line 90 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 90 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(6, 88, __pyx_L1_error)

#line 90 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) __PYX_ERR(6, 89, __pyx_L1_error)
  __pyx_r = 
#line 90 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_90fill_p1(__pyx_self, __pyx_v_profile, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":87
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p1(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 87 "root_numpy/src/hist.pyx"


#line 87 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 87 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 87 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 87 "root_numpy/src/hist.pyx"
}

#line 87 "root_numpy/src/hist.pyx"


#line 87 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_90fill_p1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TProfile *__pyx_v__profile
#line 87 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 87 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 87 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 87 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 87 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 87 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 87 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 87 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 87 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 87 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 87 "root_numpy/src/hist.pyx"
;

#line 87 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 87 "root_numpy/src/hist.pyx"
  void *__pyx_t_1;

#line 87 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 87 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 87 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 87 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 87 "root_numpy/src/hist.pyx"
  PyArrayObject *__pyx_t_6 = NULL;

#line 87 "root_numpy/src/hist.pyx"
  int __pyx_t_7;

#line 87 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 87 "root_numpy/src/hist.pyx"
  int __pyx_t_9;

#line 87 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 87 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 87 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 87 "root_numpy/src/hist.pyx"
  int __pyx_t_13;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_14;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_15;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_16;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_17;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_18;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_19;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_20;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_21;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_22;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_23;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_24;

#line 87 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_25;

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p1", 0);

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 87 "root_numpy/src/hist.pyx"
  {

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 87 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(6, 87, __pyx_L1_error)

#line 87 "root_numpy/src/hist.pyx"
  }

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

#line 87 "root_numpy/src/hist.pyx"
  {

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 87 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(6, 87, __pyx_L1_error)

#line 87 "root_numpy/src/hist.pyx"
  }

#line 87 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":92
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TProfile* _profile = <TProfile*> PyCObject_AsVoidPtr(profile)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 92 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_profile); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(6, 92, __pyx_L1_error)

#line 92 "root_numpy/src/hist.pyx"
  __pyx_v__profile = ((TProfile *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":93
 *     # perform type checking on python side
 *     cdef TProfile* _profile = <TProfile*> PyCObject_AsVoidPtr(profile)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef SIZE_t i
 */

#line 93 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":94
 *     cdef TProfile* _profile = <TProfile*> PyCObject_AsVoidPtr(profile)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 94 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 94, __pyx_L1_error)

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 94 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 94, __pyx_L1_error)

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 94 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 94, __pyx_L1_error)

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 94 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 94, __pyx_L1_error)

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 94 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 94, __pyx_L1_error)

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 94 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(6, 94, __pyx_L1_error)

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 94 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__42, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 94, __pyx_L1_error)

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 94 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 94, __pyx_L1_error)

#line 94 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 94 "root_numpy/src/hist.pyx"
  {

#line 94 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 94 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 94 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 94 "root_numpy/src/hist.pyx"
      __PYX_ERR(6, 94, __pyx_L1_error)
    } else {
#line 94 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 94 "root_numpy/src/hist.pyx"
    }

#line 94 "root_numpy/src/hist.pyx"
  }

#line 94 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 94 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 94 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":97
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 97 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 97 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":98
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 98 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 98 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 98 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 98 "root_numpy/src/hist.pyx"
    {

#line 98 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 98 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 98 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 98 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 98 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 98 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 98 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 98 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 98 "root_numpy/src/hist.pyx"
        } else {

#line 98 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 98 "root_numpy/src/hist.pyx"
        }

#line 98 "root_numpy/src/hist.pyx"
      }

#line 98 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 98 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "root_numpy/src/hist.pyx"
    }

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 98 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 98 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

    /* "root_numpy/src/hist.pyx":97
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 97 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":99
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])
 */

#line 99 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 99 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 99 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":100
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:
 */

#line 100 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 100 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":101
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 101 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 101 "root_numpy/src/hist.pyx"
      __pyx_t_16 = 0;

#line 101 "root_numpy/src/hist.pyx"
      __pyx_t_17 = __pyx_v_i;

#line 101 "root_numpy/src/hist.pyx"
      __pyx_t_18 = 1;

#line 101 "root_numpy/src/hist.pyx"
      __pyx_t_19 = __pyx_v_i;

#line 101 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":102
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 102 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 102 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":103
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 103 "root_numpy/src/hist.pyx"
        __pyx_t_20 = __pyx_v_i;

#line 103 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":102
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 102 "root_numpy/src/hist.pyx"
      }

#line 102 "root_numpy/src/hist.pyx"
    }

    /* "root_numpy/src/hist.pyx":99
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])
 */

#line 99 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 99 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":105
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1])
 *             if return_indices:
 */

#line 105 "root_numpy/src/hist.pyx"
  /*else*/ {

#line 105 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 105 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":106
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 106 "root_numpy/src/hist.pyx"
      __pyx_t_21 = __pyx_v_i;

#line 106 "root_numpy/src/hist.pyx"
      __pyx_t_22 = 0;

#line 106 "root_numpy/src/hist.pyx"
      __pyx_t_23 = __pyx_v_i;

#line 106 "root_numpy/src/hist.pyx"
      __pyx_t_24 = 1;

#line 106 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "root_numpy/src/hist.pyx":107
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 107 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 107 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":108
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 108 "root_numpy/src/hist.pyx"
        __pyx_t_25 = __pyx_v_i;

#line 108 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":107
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 107 "root_numpy/src/hist.pyx"
      }

#line 107 "root_numpy/src/hist.pyx"
    }

#line 107 "root_numpy/src/hist.pyx"
  }

#line 107 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":109
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 109 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 109 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":110
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 110 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 110 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 110 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 110 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/hist.pyx":109
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 109 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":87
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p1(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 87 "root_numpy/src/hist.pyx"


#line 87 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 87 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 87 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 87 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_declare

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_assign

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 87 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 87 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 87 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 87 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 87 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 87 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":115
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p2(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 115 "root_numpy/src/hist.pyx"


#line 115 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 115 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_93fill_p2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_93fill_p2 = 
#line 115 "root_numpy/src/hist.pyx"
{"fill_p2", (PyCFunction)__pyx_pw_13_librootnumpy_93fill_p2, METH_VARARGS|METH_KEYWORDS, 0};

#line 115 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_93fill_p2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_profile = 0
#line 115 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 115 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 115 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 115 "root_numpy/src/hist.pyx"
;

#line 115 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p2 (wrapper)", 0);

#line 115 "root_numpy/src/hist.pyx"
  {

#line 115 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_profile,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 115 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":117
 * def fill_p2(profile,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 117 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 117 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 117 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 117 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 117 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 117 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 117 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 117 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 117 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 117 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 117 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 117 "root_numpy/src/hist.pyx"
      }

#line 117 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 117 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 117 "root_numpy/src/hist.pyx"
        case  0:

#line 117 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else 
#line 117 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 117 "root_numpy/src/hist.pyx"
        case  1:

#line 117 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 117 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_p2", 0, 2, 4, 1); 
#line 117 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 115, __pyx_L3_error)

#line 117 "root_numpy/src/hist.pyx"
        }

#line 117 "root_numpy/src/hist.pyx"
        case  2:

#line 117 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 117 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 117 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 117 "root_numpy/src/hist.pyx"
        }

#line 117 "root_numpy/src/hist.pyx"
        case  3:

#line 117 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 117 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 117 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 117 "root_numpy/src/hist.pyx"
        }

#line 117 "root_numpy/src/hist.pyx"
      }

#line 117 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 117 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_p2") < 0)) __PYX_ERR(6, 115, __pyx_L3_error)

#line 117 "root_numpy/src/hist.pyx"
      }

#line 117 "root_numpy/src/hist.pyx"
    } else {

#line 117 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 117 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 117 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 117 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 117 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 117 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 117 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 117 "root_numpy/src/hist.pyx"
      }

#line 117 "root_numpy/src/hist.pyx"
    }

#line 117 "root_numpy/src/hist.pyx"
    __pyx_v_profile = values[0];

#line 117 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 117 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 117 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 117 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) __PYX_ERR(6, 118, __pyx_L3_error)

#line 117 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":118
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TProfile2D* _profile = <TProfile2D*> PyCObject_AsVoidPtr(profile)
 */

#line 118 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 118 "root_numpy/src/hist.pyx"
    }

#line 118 "root_numpy/src/hist.pyx"
  }

#line 118 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 118 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_p2", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 118 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 115, __pyx_L3_error)

#line 118 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 118 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 118 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 118 "root_numpy/src/hist.pyx"
  return NULL;

#line 118 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 118 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(6, 116, __pyx_L1_error)

#line 118 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) __PYX_ERR(6, 117, __pyx_L1_error)
  __pyx_r = 
#line 118 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_92fill_p2(__pyx_self, __pyx_v_profile, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":115
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p2(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 115 "root_numpy/src/hist.pyx"


#line 115 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 115 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 115 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 115 "root_numpy/src/hist.pyx"
}

#line 115 "root_numpy/src/hist.pyx"


#line 115 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_92fill_p2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TProfile2D *__pyx_v__profile
#line 115 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 115 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 115 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 115 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 115 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 115 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 115 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 115 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 115 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 115 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 115 "root_numpy/src/hist.pyx"
;

#line 115 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 115 "root_numpy/src/hist.pyx"
  void *__pyx_t_1;

#line 115 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 115 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 115 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 115 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 115 "root_numpy/src/hist.pyx"
  PyArrayObject *__pyx_t_6 = NULL;

#line 115 "root_numpy/src/hist.pyx"
  int __pyx_t_7;

#line 115 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 115 "root_numpy/src/hist.pyx"
  int __pyx_t_9;

#line 115 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 115 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 115 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 115 "root_numpy/src/hist.pyx"
  int __pyx_t_13;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_14;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_15;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_16;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_17;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_18;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_19;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_20;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_21;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_22;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_23;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_24;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_25;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_26;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_27;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_28;

#line 115 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_29;

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p2", 0);

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 115 "root_numpy/src/hist.pyx"
  {

#line 115 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 115 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(6, 115, __pyx_L1_error)

#line 115 "root_numpy/src/hist.pyx"
  }

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

#line 115 "root_numpy/src/hist.pyx"
  {

#line 115 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 115 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(6, 115, __pyx_L1_error)

#line 115 "root_numpy/src/hist.pyx"
  }

#line 115 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":120
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TProfile2D* _profile = <TProfile2D*> PyCObject_AsVoidPtr(profile)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 120 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_profile); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(6, 120, __pyx_L1_error)

#line 120 "root_numpy/src/hist.pyx"
  __pyx_v__profile = ((TProfile2D *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":121
 *     # perform type checking on python side
 *     cdef TProfile2D* _profile = <TProfile2D*> PyCObject_AsVoidPtr(profile)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef SIZE_t i
 */

#line 121 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":122
 *     cdef TProfile2D* _profile = <TProfile2D*> PyCObject_AsVoidPtr(profile)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 122 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 122, __pyx_L1_error)

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 122 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 122, __pyx_L1_error)

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 122 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 122, __pyx_L1_error)

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 122 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 122, __pyx_L1_error)

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 122 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 122, __pyx_L1_error)

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 122 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(6, 122, __pyx_L1_error)

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 122 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__43, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 122, __pyx_L1_error)

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 122 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 122, __pyx_L1_error)

#line 122 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 122 "root_numpy/src/hist.pyx"
  {

#line 122 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 122 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 122 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 122 "root_numpy/src/hist.pyx"
      __PYX_ERR(6, 122, __pyx_L1_error)
    } else {
#line 122 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 122 "root_numpy/src/hist.pyx"
    }

#line 122 "root_numpy/src/hist.pyx"
  }

#line 122 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 122 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 122 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":125
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 125 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 125 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":126
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 126 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 126 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 126 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 126 "root_numpy/src/hist.pyx"
    {

#line 126 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 126 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 126 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 126 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 126 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 126 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 126 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 126 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 126 "root_numpy/src/hist.pyx"
        } else {

#line 126 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 126 "root_numpy/src/hist.pyx"
        }

#line 126 "root_numpy/src/hist.pyx"
      }

#line 126 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 126 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "root_numpy/src/hist.pyx"
    }

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 126 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

    /* "root_numpy/src/hist.pyx":125
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 125 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":127
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 */

#line 127 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 127 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 127 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":128
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:
 */

#line 128 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 128 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":129
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 129 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 129 "root_numpy/src/hist.pyx"
      __pyx_t_16 = 0;

#line 129 "root_numpy/src/hist.pyx"
      __pyx_t_17 = __pyx_v_i;

#line 129 "root_numpy/src/hist.pyx"
      __pyx_t_18 = 1;

#line 129 "root_numpy/src/hist.pyx"
      __pyx_t_19 = __pyx_v_i;

#line 129 "root_numpy/src/hist.pyx"
      __pyx_t_20 = 2;

#line 129 "root_numpy/src/hist.pyx"
      __pyx_t_21 = __pyx_v_i;

#line 129 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":130
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 130 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 130 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":131
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 131 "root_numpy/src/hist.pyx"
        __pyx_t_22 = __pyx_v_i;

#line 131 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":130
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 130 "root_numpy/src/hist.pyx"
      }

#line 130 "root_numpy/src/hist.pyx"
    }

    /* "root_numpy/src/hist.pyx":127
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 */

#line 127 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 127 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":133
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:
 */

#line 133 "root_numpy/src/hist.pyx"
  /*else*/ {

#line 133 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 133 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":134
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 134 "root_numpy/src/hist.pyx"
      __pyx_t_23 = __pyx_v_i;

#line 134 "root_numpy/src/hist.pyx"
      __pyx_t_24 = 0;

#line 134 "root_numpy/src/hist.pyx"
      __pyx_t_25 = __pyx_v_i;

#line 134 "root_numpy/src/hist.pyx"
      __pyx_t_26 = 1;

#line 134 "root_numpy/src/hist.pyx"
      __pyx_t_27 = __pyx_v_i;

#line 134 "root_numpy/src/hist.pyx"
      __pyx_t_28 = 2;

#line 134 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "root_numpy/src/hist.pyx":135
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 135 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 135 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":136
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 136 "root_numpy/src/hist.pyx"
        __pyx_t_29 = __pyx_v_i;

#line 136 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":135
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 135 "root_numpy/src/hist.pyx"
      }

#line 135 "root_numpy/src/hist.pyx"
    }

#line 135 "root_numpy/src/hist.pyx"
  }

#line 135 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":137
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 137 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 137 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":138
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 138 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 138 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 138 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 138 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/hist.pyx":137
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 137 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":115
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p2(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 115 "root_numpy/src/hist.pyx"


#line 115 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 115 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 115 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 115 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 115 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_declare

#line 115 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_assign

#line 115 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 115 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 115 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 115 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 115 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 115 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 115 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 115 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 115 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 115 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":143
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p3(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 143 "root_numpy/src/hist.pyx"


#line 143 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 143 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_95fill_p3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_95fill_p3 = 
#line 143 "root_numpy/src/hist.pyx"
{"fill_p3", (PyCFunction)__pyx_pw_13_librootnumpy_95fill_p3, METH_VARARGS|METH_KEYWORDS, 0};

#line 143 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_95fill_p3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_profile = 0
#line 143 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 143 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 143 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 143 "root_numpy/src/hist.pyx"
;

#line 143 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p3 (wrapper)", 0);

#line 143 "root_numpy/src/hist.pyx"
  {

#line 143 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_profile,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 143 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":145
 * def fill_p3(profile,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 145 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 145 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 145 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 145 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 145 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 145 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 145 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 145 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 145 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 145 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 145 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 145 "root_numpy/src/hist.pyx"
      }

#line 145 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 145 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 145 "root_numpy/src/hist.pyx"
        case  0:

#line 145 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else 
#line 145 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 145 "root_numpy/src/hist.pyx"
        case  1:

#line 145 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 145 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_p3", 0, 2, 4, 1); 
#line 145 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 143, __pyx_L3_error)

#line 145 "root_numpy/src/hist.pyx"
        }

#line 145 "root_numpy/src/hist.pyx"
        case  2:

#line 145 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 145 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 145 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 145 "root_numpy/src/hist.pyx"
        }

#line 145 "root_numpy/src/hist.pyx"
        case  3:

#line 145 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 145 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 145 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 145 "root_numpy/src/hist.pyx"
        }

#line 145 "root_numpy/src/hist.pyx"
      }

#line 145 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 145 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_p3") < 0)) __PYX_ERR(6, 143, __pyx_L3_error)

#line 145 "root_numpy/src/hist.pyx"
      }

#line 145 "root_numpy/src/hist.pyx"
    } else {

#line 145 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 145 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 145 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 145 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 145 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 145 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 145 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 145 "root_numpy/src/hist.pyx"
      }

#line 145 "root_numpy/src/hist.pyx"
    }

#line 145 "root_numpy/src/hist.pyx"
    __pyx_v_profile = values[0];

#line 145 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 145 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 145 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 145 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) __PYX_ERR(6, 146, __pyx_L3_error)

#line 145 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":146
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TProfile3D* _profile = <TProfile3D*> PyCObject_AsVoidPtr(profile)
 */

#line 146 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 146 "root_numpy/src/hist.pyx"
    }

#line 146 "root_numpy/src/hist.pyx"
  }

#line 146 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 146 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_p3", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 146 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 143, __pyx_L3_error)

#line 146 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 146 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 146 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 146 "root_numpy/src/hist.pyx"
  return NULL;

#line 146 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 146 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(6, 144, __pyx_L1_error)

#line 146 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) __PYX_ERR(6, 145, __pyx_L1_error)
  __pyx_r = 
#line 146 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_94fill_p3(__pyx_self, __pyx_v_profile, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":143
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p3(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 143 "root_numpy/src/hist.pyx"


#line 143 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 143 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 143 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 143 "root_numpy/src/hist.pyx"
}

#line 143 "root_numpy/src/hist.pyx"


#line 143 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_94fill_p3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TProfile3D *__pyx_v__profile
#line 143 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 143 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 143 "root_numpy/src/hist.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 143 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 143 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 143 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 143 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 143 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 143 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 143 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 143 "root_numpy/src/hist.pyx"
;

#line 143 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 143 "root_numpy/src/hist.pyx"
  void *__pyx_t_1;

#line 143 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 143 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 143 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 143 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 143 "root_numpy/src/hist.pyx"
  PyArrayObject *__pyx_t_6 = NULL;

#line 143 "root_numpy/src/hist.pyx"
  int __pyx_t_7;

#line 143 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 143 "root_numpy/src/hist.pyx"
  int __pyx_t_9;

#line 143 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 143 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 143 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 143 "root_numpy/src/hist.pyx"
  int __pyx_t_13;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_14;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_15;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_16;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_17;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_18;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_19;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_20;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_21;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_22;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_23;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_24;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_25;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_26;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_27;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_28;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_29;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_30;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_31;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_32;

#line 143 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_33;

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p3", 0);

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 143 "root_numpy/src/hist.pyx"
  {

#line 143 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 143 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(6, 143, __pyx_L1_error)

#line 143 "root_numpy/src/hist.pyx"
  }

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

#line 143 "root_numpy/src/hist.pyx"
  {

#line 143 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 143 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(6, 143, __pyx_L1_error)

#line 143 "root_numpy/src/hist.pyx"
  }

#line 143 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":148
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TProfile3D* _profile = <TProfile3D*> PyCObject_AsVoidPtr(profile)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 148 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_profile); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(6, 148, __pyx_L1_error)

#line 148 "root_numpy/src/hist.pyx"
  __pyx_v__profile = ((TProfile3D *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":149
 *     # perform type checking on python side
 *     cdef TProfile3D* _profile = <TProfile3D*> PyCObject_AsVoidPtr(profile)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef SIZE_t i
 */

#line 149 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":150
 *     cdef TProfile3D* _profile = <TProfile3D*> PyCObject_AsVoidPtr(profile)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 150 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 150, __pyx_L1_error)

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 150 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 150, __pyx_L1_error)

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 150 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 150, __pyx_L1_error)

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 150 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 150, __pyx_L1_error)

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 150 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 150, __pyx_L1_error)

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 150 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(6, 150, __pyx_L1_error)

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 150 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__44, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 150, __pyx_L1_error)

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 150 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 150, __pyx_L1_error)

#line 150 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 150 "root_numpy/src/hist.pyx"
  {

#line 150 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 150 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 150 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 150 "root_numpy/src/hist.pyx"
      __PYX_ERR(6, 150, __pyx_L1_error)
    } else {
#line 150 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 150 "root_numpy/src/hist.pyx"
    }

#line 150 "root_numpy/src/hist.pyx"
  }

#line 150 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 150 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 150 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":153
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 153 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 153 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":154
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 154 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 154 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 154 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 154 "root_numpy/src/hist.pyx"
    {

#line 154 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 154 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 154 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 154 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 154 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 154 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 154 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 154 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 154 "root_numpy/src/hist.pyx"
        } else {

#line 154 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 154 "root_numpy/src/hist.pyx"
        }

#line 154 "root_numpy/src/hist.pyx"
      }

#line 154 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 154 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "root_numpy/src/hist.pyx"
    }

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 154 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 154 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

    /* "root_numpy/src/hist.pyx":153
 *     cdef SIZE_t i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 153 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":155
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])
 */

#line 155 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 155 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 155 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":156
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])
 *             if return_indices:
 */

#line 156 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 156 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":157
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 157 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 157 "root_numpy/src/hist.pyx"
      __pyx_t_16 = 0;

#line 157 "root_numpy/src/hist.pyx"
      __pyx_t_17 = __pyx_v_i;

#line 157 "root_numpy/src/hist.pyx"
      __pyx_t_18 = 1;

#line 157 "root_numpy/src/hist.pyx"
      __pyx_t_19 = __pyx_v_i;

#line 157 "root_numpy/src/hist.pyx"
      __pyx_t_20 = 2;

#line 157 "root_numpy/src/hist.pyx"
      __pyx_t_21 = __pyx_v_i;

#line 157 "root_numpy/src/hist.pyx"
      __pyx_t_22 = 3;

#line 157 "root_numpy/src/hist.pyx"
      __pyx_t_23 = __pyx_v_i;

#line 157 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":158
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 158 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 158 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":159
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 159 "root_numpy/src/hist.pyx"
        __pyx_t_24 = __pyx_v_i;

#line 159 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":158
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 158 "root_numpy/src/hist.pyx"
      }

#line 158 "root_numpy/src/hist.pyx"
    }

    /* "root_numpy/src/hist.pyx":155
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])
 */

#line 155 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 155 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":161
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3])
 *             if return_indices:
 */

#line 161 "root_numpy/src/hist.pyx"
  /*else*/ {

#line 161 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 161 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":162
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 162 "root_numpy/src/hist.pyx"
      __pyx_t_25 = __pyx_v_i;

#line 162 "root_numpy/src/hist.pyx"
      __pyx_t_26 = 0;

#line 162 "root_numpy/src/hist.pyx"
      __pyx_t_27 = __pyx_v_i;

#line 162 "root_numpy/src/hist.pyx"
      __pyx_t_28 = 1;

#line 162 "root_numpy/src/hist.pyx"
      __pyx_t_29 = __pyx_v_i;

#line 162 "root_numpy/src/hist.pyx"
      __pyx_t_30 = 2;

#line 162 "root_numpy/src/hist.pyx"
      __pyx_t_31 = __pyx_v_i;

#line 162 "root_numpy/src/hist.pyx"
      __pyx_t_32 = 3;

#line 162 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_30, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_31, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_32, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "root_numpy/src/hist.pyx":163
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 163 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 163 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":164
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 164 "root_numpy/src/hist.pyx"
        __pyx_t_33 = __pyx_v_i;

#line 164 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_33, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

        /* "root_numpy/src/hist.pyx":163
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 163 "root_numpy/src/hist.pyx"
      }

#line 163 "root_numpy/src/hist.pyx"
    }

#line 163 "root_numpy/src/hist.pyx"
  }

#line 163 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":165
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 165 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 165 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":166
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 166 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 166 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 166 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 166 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

    /* "root_numpy/src/hist.pyx":165
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 165 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":143
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p3(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 143 "root_numpy/src/hist.pyx"


#line 143 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 143 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 143 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 143 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 143 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_declare

#line 143 "root_numpy/src/hist.pyx"
    __Pyx_PyThreadState_assign

#line 143 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 143 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 143 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 143 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 143 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 143 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 143 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 143 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 143 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 143 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":171
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def thn2array(hist, shape, dtype):             # <<<<<<<<<<<<<<
 *     cdef THnBase* _hist = <THnBase*> PyCObject_AsVoidPtr(hist)
 *     cdef double content
 */

#line 171 "root_numpy/src/hist.pyx"


#line 171 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 171 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_97thn2array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_97thn2array = 
#line 171 "root_numpy/src/hist.pyx"
{"thn2array", (PyCFunction)__pyx_pw_13_librootnumpy_97thn2array, METH_VARARGS|METH_KEYWORDS, 0};

#line 171 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_97thn2array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 171 "root_numpy/src/hist.pyx"
;
  PyObject *__pyx_v_shape = 0
#line 171 "root_numpy/src/hist.pyx"
;
  PyObject *__pyx_v_dtype = 0
#line 171 "root_numpy/src/hist.pyx"
;

#line 171 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("thn2array (wrapper)", 0);

#line 171 "root_numpy/src/hist.pyx"
  {

#line 171 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_shape,&__pyx_n_s_dtype,0};

#line 171 "root_numpy/src/hist.pyx"
    PyObject* values[3] = {0,0,0};

#line 171 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 171 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 171 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 171 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  3: 
#line 171 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 171 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 171 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 171 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 171 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 171 "root_numpy/src/hist.pyx"
      }

#line 171 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 171 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 171 "root_numpy/src/hist.pyx"
        case  0:

#line 171 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 171 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 171 "root_numpy/src/hist.pyx"
        case  1:

#line 171 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;

#line 171 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("thn2array", 1, 3, 3, 1); 
#line 171 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 171, __pyx_L3_error)

#line 171 "root_numpy/src/hist.pyx"
        }

#line 171 "root_numpy/src/hist.pyx"
        case  2:

#line 171 "root_numpy/src/hist.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype)) != 0)) kw_args--;

#line 171 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("thn2array", 1, 3, 3, 2); 
#line 171 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 171, __pyx_L3_error)

#line 171 "root_numpy/src/hist.pyx"
        }

#line 171 "root_numpy/src/hist.pyx"
      }

#line 171 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 171 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "thn2array") < 0)) __PYX_ERR(6, 171, __pyx_L3_error)

#line 171 "root_numpy/src/hist.pyx"
      }

#line 171 "root_numpy/src/hist.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 171 "root_numpy/src/hist.pyx"
      goto __pyx_L5_argtuple_error;

#line 171 "root_numpy/src/hist.pyx"
    } else {

#line 171 "root_numpy/src/hist.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 171 "root_numpy/src/hist.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 171 "root_numpy/src/hist.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 171 "root_numpy/src/hist.pyx"
    }

#line 171 "root_numpy/src/hist.pyx"
    __pyx_v_hist = values[0];

#line 171 "root_numpy/src/hist.pyx"
    __pyx_v_shape = values[1];

#line 171 "root_numpy/src/hist.pyx"
    __pyx_v_dtype = values[2];

#line 171 "root_numpy/src/hist.pyx"
  }

#line 171 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 171 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("thn2array", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 171 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 171, __pyx_L3_error)

#line 171 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.thn2array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 171 "root_numpy/src/hist.pyx"
  return NULL;

#line 171 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 171 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_96thn2array(__pyx_self, __pyx_v_hist, __pyx_v_shape, __pyx_v_dtype);

#line 171 "root_numpy/src/hist.pyx"


#line 171 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 171 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 171 "root_numpy/src/hist.pyx"
}

#line 171 "root_numpy/src/hist.pyx"


#line 171 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_96thn2array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyObject *__pyx_v_shape, PyObject *__pyx_v_dtype) {
  THnBase *__pyx_v__hist
#line 171 "root_numpy/src/hist.pyx"
;
  PY_LONG_LONG __pyx_v_ibin
#line 171 "root_numpy/src/hist.pyx"
;
  PY_LONG_LONG __pyx_v_nbins
#line 171 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 171 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array_ravel_view = 0
#line 171 "root_numpy/src/hist.pyx"
;

#line 171 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 171 "root_numpy/src/hist.pyx"
  void *__pyx_t_1;

#line 171 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 171 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 171 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 171 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 171 "root_numpy/src/hist.pyx"
  PY_LONG_LONG __pyx_t_6;

#line 171 "root_numpy/src/hist.pyx"
  PY_LONG_LONG __pyx_t_7;

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("thn2array", 0);

  /* "root_numpy/src/hist.pyx":172
 * @cython.wraparound(False)
 * def thn2array(hist, shape, dtype):
 *     cdef THnBase* _hist = <THnBase*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef double content
 *     cdef long long ibin
 */

#line 172 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(6, 172, __pyx_L1_error)

#line 172 "root_numpy/src/hist.pyx"
  __pyx_v__hist = ((THnBase *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":175
 *     cdef double content
 *     cdef long long ibin
 *     cdef long long nbins = _hist.GetNbins()             # <<<<<<<<<<<<<<
 *     cdef np.ndarray array = np.zeros(shape, dtype=dtype)
 *     cdef np.ndarray array_ravel_view = np.ravel(array)
 */

#line 175 "root_numpy/src/hist.pyx"
  __pyx_v_nbins = __pyx_v__hist->GetNbins();

  /* "root_numpy/src/hist.pyx":176
 *     cdef long long ibin
 *     cdef long long nbins = _hist.GetNbins()
 *     cdef np.ndarray array = np.zeros(shape, dtype=dtype)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray array_ravel_view = np.ravel(array)
 *     for ibin in range(nbins):
 */

#line 176 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 176, __pyx_L1_error)

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 176 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 176, __pyx_L1_error)

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 176 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 176, __pyx_L1_error)

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_INCREF(__pyx_v_shape);

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_v_shape);

#line 176 "root_numpy/src/hist.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);

#line 176 "root_numpy/src/hist.pyx"
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 176, __pyx_L1_error)

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 176 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_v_dtype) < 0) __PYX_ERR(6, 176, __pyx_L1_error)

#line 176 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 176, __pyx_L1_error)

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 176 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 176 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 176, __pyx_L1_error)

#line 176 "root_numpy/src/hist.pyx"
  __pyx_v_array = ((PyArrayObject *)__pyx_t_5);

#line 176 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":177
 *     cdef long long nbins = _hist.GetNbins()
 *     cdef np.ndarray array = np.zeros(shape, dtype=dtype)
 *     cdef np.ndarray array_ravel_view = np.ravel(array)             # <<<<<<<<<<<<<<
 *     for ibin in range(nbins):
 *         array_ravel_view[ibin] = _hist.GetBinContent(ibin)
 */

#line 177 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 177, __pyx_L1_error)

#line 177 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 177 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ravel); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 177, __pyx_L1_error)

#line 177 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 177 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 177 "root_numpy/src/hist.pyx"
  __pyx_t_4 = NULL;

#line 177 "root_numpy/src/hist.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 177 "root_numpy/src/hist.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);

#line 177 "root_numpy/src/hist.pyx"
    if (likely(__pyx_t_4)) {

#line 177 "root_numpy/src/hist.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 177 "root_numpy/src/hist.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 177 "root_numpy/src/hist.pyx"
      __Pyx_INCREF(function);

#line 177 "root_numpy/src/hist.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 177 "root_numpy/src/hist.pyx"
    }

#line 177 "root_numpy/src/hist.pyx"
  }

#line 177 "root_numpy/src/hist.pyx"
  if (!__pyx_t_4) {

#line 177 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_array)); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 177, __pyx_L1_error)

#line 177 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 177 "root_numpy/src/hist.pyx"
  } else {

#line 177 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 177, __pyx_L1_error)

#line 177 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 177 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 177 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_array));

#line 177 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_array));

#line 177 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, ((PyObject *)__pyx_v_array));

#line 177 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 177, __pyx_L1_error)

#line 177 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 177 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 177 "root_numpy/src/hist.pyx"
  }

#line 177 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 177 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 177, __pyx_L1_error)

#line 177 "root_numpy/src/hist.pyx"
  __pyx_v_array_ravel_view = ((PyArrayObject *)__pyx_t_5);

#line 177 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":178
 *     cdef np.ndarray array = np.zeros(shape, dtype=dtype)
 *     cdef np.ndarray array_ravel_view = np.ravel(array)
 *     for ibin in range(nbins):             # <<<<<<<<<<<<<<
 *         array_ravel_view[ibin] = _hist.GetBinContent(ibin)
 *     return array
 */

#line 178 "root_numpy/src/hist.pyx"
  __pyx_t_6 = __pyx_v_nbins;

#line 178 "root_numpy/src/hist.pyx"
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {

#line 178 "root_numpy/src/hist.pyx"
    __pyx_v_ibin = __pyx_t_7;

    /* "root_numpy/src/hist.pyx":179
 *     cdef np.ndarray array_ravel_view = np.ravel(array)
 *     for ibin in range(nbins):
 *         array_ravel_view[ibin] = _hist.GetBinContent(ibin)             # <<<<<<<<<<<<<<
 *     return array
 * 
 */

#line 179 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v__hist->GetBinContent(__pyx_v_ibin)); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 179, __pyx_L1_error)

#line 179 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 179 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_array_ravel_view), __pyx_v_ibin, __pyx_t_5, PY_LONG_LONG, 1, __Pyx_PyInt_From_PY_LONG_LONG, 0, 0, 0) < 0)) __PYX_ERR(6, 179, __pyx_L1_error)

#line 179 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 179 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":180
 *     for ibin in range(nbins):
 *         array_ravel_view[ibin] = _hist.GetBinContent(ibin)
 *     return array             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 180 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 180 "root_numpy/src/hist.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_array));

#line 180 "root_numpy/src/hist.pyx"
  __pyx_r = ((PyObject *)__pyx_v_array);

#line 180 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/hist.pyx":171
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def thn2array(hist, shape, dtype):             # <<<<<<<<<<<<<<
 *     cdef THnBase* _hist = <THnBase*> PyCObject_AsVoidPtr(hist)
 *     cdef double content
 */

#line 171 "root_numpy/src/hist.pyx"


#line 171 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 171 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.thn2array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 171 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 171 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_array);

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_array_ravel_view);

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 171 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 171 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":185
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def thnsparse2array(hist, shape, dtype):             # <<<<<<<<<<<<<<
 *     cdef THnBase* _hist = <THnBase*> PyCObject_AsVoidPtr(hist)
 *     cdef double content
 */

#line 185 "root_numpy/src/hist.pyx"


#line 185 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 185 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_99thnsparse2array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_99thnsparse2array = 
#line 185 "root_numpy/src/hist.pyx"
{"thnsparse2array", (PyCFunction)__pyx_pw_13_librootnumpy_99thnsparse2array, METH_VARARGS|METH_KEYWORDS, 0};

#line 185 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_99thnsparse2array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 185 "root_numpy/src/hist.pyx"
;
  PyObject *__pyx_v_shape = 0
#line 185 "root_numpy/src/hist.pyx"
;
  PyObject *__pyx_v_dtype = 0
#line 185 "root_numpy/src/hist.pyx"
;

#line 185 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("thnsparse2array (wrapper)", 0);

#line 185 "root_numpy/src/hist.pyx"
  {

#line 185 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_shape,&__pyx_n_s_dtype,0};

#line 185 "root_numpy/src/hist.pyx"
    PyObject* values[3] = {0,0,0};

#line 185 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 185 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 185 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 185 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  3: 
#line 185 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 185 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 185 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 185 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 185 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 185 "root_numpy/src/hist.pyx"
      }

#line 185 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 185 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 185 "root_numpy/src/hist.pyx"
        case  0:

#line 185 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 185 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 185 "root_numpy/src/hist.pyx"
        case  1:

#line 185 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;

#line 185 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("thnsparse2array", 1, 3, 3, 1); 
#line 185 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 185, __pyx_L3_error)

#line 185 "root_numpy/src/hist.pyx"
        }

#line 185 "root_numpy/src/hist.pyx"
        case  2:

#line 185 "root_numpy/src/hist.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype)) != 0)) kw_args--;

#line 185 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("thnsparse2array", 1, 3, 3, 2); 
#line 185 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 185, __pyx_L3_error)

#line 185 "root_numpy/src/hist.pyx"
        }

#line 185 "root_numpy/src/hist.pyx"
      }

#line 185 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 185 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "thnsparse2array") < 0)) __PYX_ERR(6, 185, __pyx_L3_error)

#line 185 "root_numpy/src/hist.pyx"
      }

#line 185 "root_numpy/src/hist.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 185 "root_numpy/src/hist.pyx"
      goto __pyx_L5_argtuple_error;

#line 185 "root_numpy/src/hist.pyx"
    } else {

#line 185 "root_numpy/src/hist.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 185 "root_numpy/src/hist.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 185 "root_numpy/src/hist.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 185 "root_numpy/src/hist.pyx"
    }

#line 185 "root_numpy/src/hist.pyx"
    __pyx_v_hist = values[0];

#line 185 "root_numpy/src/hist.pyx"
    __pyx_v_shape = values[1];

#line 185 "root_numpy/src/hist.pyx"
    __pyx_v_dtype = values[2];

#line 185 "root_numpy/src/hist.pyx"
  }

#line 185 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 185 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("thnsparse2array", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 185 "root_numpy/src/hist.pyx"
__PYX_ERR(6, 185, __pyx_L3_error)

#line 185 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.thnsparse2array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 185 "root_numpy/src/hist.pyx"
  return NULL;

#line 185 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 185 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_98thnsparse2array(__pyx_self, __pyx_v_hist, __pyx_v_shape, __pyx_v_dtype);

#line 185 "root_numpy/src/hist.pyx"


#line 185 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 185 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 185 "root_numpy/src/hist.pyx"
}

#line 185 "root_numpy/src/hist.pyx"


#line 185 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_98thnsparse2array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyObject *__pyx_v_shape, PyObject *__pyx_v_dtype) {
  THnBase *__pyx_v__hist
#line 185 "root_numpy/src/hist.pyx"
;
  double __pyx_v_content
#line 185 "root_numpy/src/hist.pyx"
;
  PY_LONG_LONG __pyx_v_ibin
#line 185 "root_numpy/src/hist.pyx"
;
  PY_LONG_LONG __pyx_v_nbins
#line 185 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 185 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_coord = 0
#line 185 "root_numpy/src/hist.pyx"
;
  PyObject *__pyx_v_itemset = NULL
#line 185 "root_numpy/src/hist.pyx"
;

#line 185 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 185 "root_numpy/src/hist.pyx"
  void *__pyx_t_1;

#line 185 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 185 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 185 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 185 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 185 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 185 "root_numpy/src/hist.pyx"
  PY_LONG_LONG __pyx_t_7;

#line 185 "root_numpy/src/hist.pyx"
  PY_LONG_LONG __pyx_t_8;

#line 185 "root_numpy/src/hist.pyx"
  Py_ssize_t __pyx_t_9;

#line 185 "root_numpy/src/hist.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("thnsparse2array", 0);

  /* "root_numpy/src/hist.pyx":186
 * @cython.wraparound(False)
 * def thnsparse2array(hist, shape, dtype):
 *     cdef THnBase* _hist = <THnBase*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef double content
 *     cdef long long ibin
 */

#line 186 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(6, 186, __pyx_L1_error)

#line 186 "root_numpy/src/hist.pyx"
  __pyx_v__hist = ((THnBase *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":189
 *     cdef double content
 *     cdef long long ibin
 *     cdef long long nbins = _hist.GetNbins()             # <<<<<<<<<<<<<<
 *     cdef np.ndarray array = np.zeros(shape, dtype=dtype)
 *     cdef np.ndarray coord = np.empty(array.ndim, dtype=np.int32)
 */

#line 189 "root_numpy/src/hist.pyx"
  __pyx_v_nbins = __pyx_v__hist->GetNbins();

  /* "root_numpy/src/hist.pyx":190
 *     cdef long long ibin
 *     cdef long long nbins = _hist.GetNbins()
 *     cdef np.ndarray array = np.zeros(shape, dtype=dtype)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray coord = np.empty(array.ndim, dtype=np.int32)
 *     itemset = array.itemset
 */

#line 190 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 190, __pyx_L1_error)

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 190 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 190, __pyx_L1_error)

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 190 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 190, __pyx_L1_error)

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_INCREF(__pyx_v_shape);

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_v_shape);

#line 190 "root_numpy/src/hist.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);

#line 190 "root_numpy/src/hist.pyx"
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 190, __pyx_L1_error)

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 190 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_v_dtype) < 0) __PYX_ERR(6, 190, __pyx_L1_error)

#line 190 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 190, __pyx_L1_error)

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 190 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 190 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 190, __pyx_L1_error)

#line 190 "root_numpy/src/hist.pyx"
  __pyx_v_array = ((PyArrayObject *)__pyx_t_5);

#line 190 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":191
 *     cdef long long nbins = _hist.GetNbins()
 *     cdef np.ndarray array = np.zeros(shape, dtype=dtype)
 *     cdef np.ndarray coord = np.empty(array.ndim, dtype=np.int32)             # <<<<<<<<<<<<<<
 *     itemset = array.itemset
 *     for ibin in range(nbins):
 */

#line 191 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 191, __pyx_L1_error)

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 191 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 191, __pyx_L1_error)

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 191 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_array->nd); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 191, __pyx_L1_error)

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 191 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 191, __pyx_L1_error)

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 191 "root_numpy/src/hist.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);

#line 191 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

#line 191 "root_numpy/src/hist.pyx"
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 191, __pyx_L1_error)

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 191 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 191, __pyx_L1_error)

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 191 "root_numpy/src/hist.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 191, __pyx_L1_error)

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 191 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(6, 191, __pyx_L1_error)

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 191 "root_numpy/src/hist.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 191, __pyx_L1_error)

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 191 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 191 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(6, 191, __pyx_L1_error)

#line 191 "root_numpy/src/hist.pyx"
  __pyx_v_coord = ((PyArrayObject *)__pyx_t_6);

#line 191 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/hist.pyx":192
 *     cdef np.ndarray array = np.zeros(shape, dtype=dtype)
 *     cdef np.ndarray coord = np.empty(array.ndim, dtype=np.int32)
 *     itemset = array.itemset             # <<<<<<<<<<<<<<
 *     for ibin in range(nbins):
 *         content = _hist.GetBinContent(ibin, <int*> coord.data)
 */

#line 192 "root_numpy/src/hist.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_array), __pyx_n_s_itemset); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 192, __pyx_L1_error)

#line 192 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 192 "root_numpy/src/hist.pyx"
  __pyx_v_itemset = __pyx_t_6;

#line 192 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/hist.pyx":193
 *     cdef np.ndarray coord = np.empty(array.ndim, dtype=np.int32)
 *     itemset = array.itemset
 *     for ibin in range(nbins):             # <<<<<<<<<<<<<<
 *         content = _hist.GetBinContent(ibin, <int*> coord.data)
 *         itemset(tuple(coord), content)
 */

#line 193 "root_numpy/src/hist.pyx"
  __pyx_t_7 = __pyx_v_nbins;

#line 193 "root_numpy/src/hist.pyx"
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {

#line 193 "root_numpy/src/hist.pyx"
    __pyx_v_ibin = __pyx_t_8;

    /* "root_numpy/src/hist.pyx":194
 *     itemset = array.itemset
 *     for ibin in range(nbins):
 *         content = _hist.GetBinContent(ibin, <int*> coord.data)             # <<<<<<<<<<<<<<
 *         itemset(tuple(coord), content)
 *     return array
 */

#line 194 "root_numpy/src/hist.pyx"
    __pyx_v_content = __pyx_v__hist->GetBinContent(__pyx_v_ibin, ((int *)__pyx_v_coord->data));

    /* "root_numpy/src/hist.pyx":195
 *     for ibin in range(nbins):
 *         content = _hist.GetBinContent(ibin, <int*> coord.data)
 *         itemset(tuple(coord), content)             # <<<<<<<<<<<<<<
 *     return array
 */

#line 195 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PySequence_Tuple(((PyObject *)__pyx_v_coord)); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 195, __pyx_L1_error)

#line 195 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 195 "root_numpy/src/hist.pyx"
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_content); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 195, __pyx_L1_error)

#line 195 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 195 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(__pyx_v_itemset);
    __pyx_t_4 = __pyx_v_itemset; 
#line 195 "root_numpy/src/hist.pyx"
__pyx_t_3 = NULL;

#line 195 "root_numpy/src/hist.pyx"
    __pyx_t_9 = 0;

#line 195 "root_numpy/src/hist.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 195 "root_numpy/src/hist.pyx"
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);

#line 195 "root_numpy/src/hist.pyx"
      if (likely(__pyx_t_3)) {

#line 195 "root_numpy/src/hist.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 195 "root_numpy/src/hist.pyx"
        __Pyx_INCREF(__pyx_t_3);

#line 195 "root_numpy/src/hist.pyx"
        __Pyx_INCREF(function);

#line 195 "root_numpy/src/hist.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 195 "root_numpy/src/hist.pyx"
        __pyx_t_9 = 1;

#line 195 "root_numpy/src/hist.pyx"
      }

#line 195 "root_numpy/src/hist.pyx"
    }

#line 195 "root_numpy/src/hist.pyx"
    __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(6, 195, __pyx_L1_error)

#line 195 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 195 "root_numpy/src/hist.pyx"
    if (__pyx_t_3) {

#line 195 "root_numpy/src/hist.pyx"
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __pyx_t_3 = NULL;

#line 195 "root_numpy/src/hist.pyx"
    }

#line 195 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 195 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_5);

#line 195 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 195 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_2);

#line 195 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 195 "root_numpy/src/hist.pyx"
    __pyx_t_2 = 0;

#line 195 "root_numpy/src/hist.pyx"
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 195, __pyx_L1_error)

#line 195 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 195 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 195 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 195 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 195 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":196
 *         content = _hist.GetBinContent(ibin, <int*> coord.data)
 *         itemset(tuple(coord), content)
 *     return array             # <<<<<<<<<<<<<<
 */

#line 196 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 196 "root_numpy/src/hist.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_array));

#line 196 "root_numpy/src/hist.pyx"
  __pyx_r = ((PyObject *)__pyx_v_array);

#line 196 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/hist.pyx":185
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def thnsparse2array(hist, shape, dtype):             # <<<<<<<<<<<<<<
 *     cdef THnBase* _hist = <THnBase*> PyCObject_AsVoidPtr(hist)
 *     cdef double content
 */

#line 185 "root_numpy/src/hist.pyx"


#line 185 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 185 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.thnsparse2array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 185 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 185 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_array);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_coord);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_v_itemset);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 185 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 185 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/graph.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 3 "root_numpy/src/graph.pyx"


#line 3 "root_numpy/src/graph.pyx"
/* Python wrapper */

#line 3 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pw_13_librootnumpy_101fill_g1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_101fill_g1 = 
#line 3 "root_numpy/src/graph.pyx"
{"fill_g1", (PyCFunction)__pyx_pw_13_librootnumpy_101fill_g1, METH_VARARGS|METH_KEYWORDS, 0};

#line 3 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pw_13_librootnumpy_101fill_g1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0
#line 3 "root_numpy/src/graph.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 3 "root_numpy/src/graph.pyx"
;

#line 3 "root_numpy/src/graph.pyx"
  PyObject *__pyx_r = 0;

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyDeclarations

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_RefNannySetupContext("fill_g1 (wrapper)", 0);

#line 3 "root_numpy/src/graph.pyx"
  {

#line 3 "root_numpy/src/graph.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_array,0};

#line 3 "root_numpy/src/graph.pyx"
    PyObject* values[2] = {0,0};

#line 3 "root_numpy/src/graph.pyx"
    if (unlikely(__pyx_kwds)) {

#line 3 "root_numpy/src/graph.pyx"
      Py_ssize_t kw_args;

#line 3 "root_numpy/src/graph.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 3 "root_numpy/src/graph.pyx"
      switch (pos_args) {
        case  2: 
#line 3 "root_numpy/src/graph.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 3 "root_numpy/src/graph.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 3 "root_numpy/src/graph.pyx"
        case  0: break;
        default: 
#line 3 "root_numpy/src/graph.pyx"
goto __pyx_L5_argtuple_error;

#line 3 "root_numpy/src/graph.pyx"
      }

#line 3 "root_numpy/src/graph.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 3 "root_numpy/src/graph.pyx"
      switch (pos_args) {

#line 3 "root_numpy/src/graph.pyx"
        case  0:

#line 3 "root_numpy/src/graph.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else 
#line 3 "root_numpy/src/graph.pyx"
goto __pyx_L5_argtuple_error;

#line 3 "root_numpy/src/graph.pyx"
        case  1:

#line 3 "root_numpy/src/graph.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 3 "root_numpy/src/graph.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_g1", 1, 2, 2, 1); 
#line 3 "root_numpy/src/graph.pyx"
__PYX_ERR(7, 3, __pyx_L3_error)

#line 3 "root_numpy/src/graph.pyx"
        }

#line 3 "root_numpy/src/graph.pyx"
      }

#line 3 "root_numpy/src/graph.pyx"
      if (unlikely(kw_args > 0)) {

#line 3 "root_numpy/src/graph.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_g1") < 0)) __PYX_ERR(7, 3, __pyx_L3_error)

#line 3 "root_numpy/src/graph.pyx"
      }

#line 3 "root_numpy/src/graph.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 3 "root_numpy/src/graph.pyx"
      goto __pyx_L5_argtuple_error;

#line 3 "root_numpy/src/graph.pyx"
    } else {

#line 3 "root_numpy/src/graph.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 3 "root_numpy/src/graph.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 3 "root_numpy/src/graph.pyx"
    }

#line 3 "root_numpy/src/graph.pyx"
    __pyx_v_graph = values[0];

#line 3 "root_numpy/src/graph.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 3 "root_numpy/src/graph.pyx"
  }

#line 3 "root_numpy/src/graph.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_g1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 3 "root_numpy/src/graph.pyx"
__PYX_ERR(7, 3, __pyx_L3_error)

#line 3 "root_numpy/src/graph.pyx"
  __pyx_L3_error:;

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_g1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 3 "root_numpy/src/graph.pyx"
  return NULL;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 3 "root_numpy/src/graph.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(7, 4, __pyx_L1_error)
  __pyx_r = 
#line 3 "root_numpy/src/graph.pyx"
__pyx_pf_13_librootnumpy_100fill_g1(__pyx_self, __pyx_v_graph, __pyx_v_array);

#line 3 "root_numpy/src/graph.pyx"


#line 3 "root_numpy/src/graph.pyx"
  /* function exit code */

#line 3 "root_numpy/src/graph.pyx"
  goto __pyx_L0;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_L1_error:;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_r = NULL;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_L0:;

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 3 "root_numpy/src/graph.pyx"
  return __pyx_r;

#line 3 "root_numpy/src/graph.pyx"
}

#line 3 "root_numpy/src/graph.pyx"


#line 3 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pf_13_librootnumpy_100fill_g1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array) {
  TGraph *__pyx_v__graph
#line 3 "root_numpy/src/graph.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 3 "root_numpy/src/graph.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 3 "root_numpy/src/graph.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 3 "root_numpy/src/graph.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 3 "root_numpy/src/graph.pyx"
;

#line 3 "root_numpy/src/graph.pyx"
  PyObject *__pyx_r = NULL;

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyDeclarations

#line 3 "root_numpy/src/graph.pyx"
  void *__pyx_t_1;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_2;

#line 3 "root_numpy/src/graph.pyx"
  Py_ssize_t __pyx_t_3;

#line 3 "root_numpy/src/graph.pyx"
  Py_ssize_t __pyx_t_4;

#line 3 "root_numpy/src/graph.pyx"
  Py_ssize_t __pyx_t_5;

#line 3 "root_numpy/src/graph.pyx"
  Py_ssize_t __pyx_t_6;

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_RefNannySetupContext("fill_g1", 0);

#line 3 "root_numpy/src/graph.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 3 "root_numpy/src/graph.pyx"
  {

#line 3 "root_numpy/src/graph.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 3 "root_numpy/src/graph.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(7, 3, __pyx_L1_error)

#line 3 "root_numpy/src/graph.pyx"
  }

#line 3 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/graph.pyx":6
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 6 "root_numpy/src/graph.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_graph); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(7, 6, __pyx_L1_error)

#line 6 "root_numpy/src/graph.pyx"
  __pyx_v__graph = ((TGraph *)__pyx_t_1);

  /* "root_numpy/src/graph.pyx":7
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     _graph.Set(size)
 */

#line 7 "root_numpy/src/graph.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/graph.pyx":9
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     _graph.Set(size)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 */

#line 9 "root_numpy/src/graph.pyx"
  __pyx_v__graph->Set(__pyx_v_size);

  /* "root_numpy/src/graph.pyx":10
 *     cdef SIZE_t i
 *     _graph.Set(size)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 */

#line 10 "root_numpy/src/graph.pyx"
  __pyx_t_2 = __pyx_v_size;

#line 10 "root_numpy/src/graph.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {

    /* "root_numpy/src/graph.pyx":11
 *     _graph.Set(size)
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 11 "root_numpy/src/graph.pyx"
    __pyx_t_3 = __pyx_v_i;

#line 11 "root_numpy/src/graph.pyx"
    __pyx_t_4 = 0;

#line 11 "root_numpy/src/graph.pyx"
    __pyx_t_5 = __pyx_v_i;

#line 11 "root_numpy/src/graph.pyx"
    __pyx_t_6 = 1;

#line 11 "root_numpy/src/graph.pyx"
    __pyx_v__graph->SetPoint(__pyx_v_i, (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_array.diminfo[1].strides)));

#line 11 "root_numpy/src/graph.pyx"
  }

  /* "root_numpy/src/graph.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 3 "root_numpy/src/graph.pyx"


#line 3 "root_numpy/src/graph.pyx"
  /* function exit code */

#line 3 "root_numpy/src/graph.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 3 "root_numpy/src/graph.pyx"
  goto __pyx_L0;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_L1_error:;

#line 3 "root_numpy/src/graph.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 3 "root_numpy/src/graph.pyx"
    __Pyx_PyThreadState_declare

#line 3 "root_numpy/src/graph.pyx"
    __Pyx_PyThreadState_assign

#line 3 "root_numpy/src/graph.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 3 "root_numpy/src/graph.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_g1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "root_numpy/src/graph.pyx"
  __pyx_r = NULL;

#line 3 "root_numpy/src/graph.pyx"
  goto __pyx_L2;

#line 3 "root_numpy/src/graph.pyx"
  __pyx_L0:;

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 3 "root_numpy/src/graph.pyx"
  __pyx_L2:;

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 3 "root_numpy/src/graph.pyx"
  return __pyx_r;

#line 3 "root_numpy/src/graph.pyx"
}

/* "root_numpy/src/graph.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 16 "root_numpy/src/graph.pyx"


#line 16 "root_numpy/src/graph.pyx"
/* Python wrapper */

#line 16 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pw_13_librootnumpy_103fill_g2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_103fill_g2 = 
#line 16 "root_numpy/src/graph.pyx"
{"fill_g2", (PyCFunction)__pyx_pw_13_librootnumpy_103fill_g2, METH_VARARGS|METH_KEYWORDS, 0};

#line 16 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pw_13_librootnumpy_103fill_g2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0
#line 16 "root_numpy/src/graph.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 16 "root_numpy/src/graph.pyx"
;

#line 16 "root_numpy/src/graph.pyx"
  PyObject *__pyx_r = 0;

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyDeclarations

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_RefNannySetupContext("fill_g2 (wrapper)", 0);

#line 16 "root_numpy/src/graph.pyx"
  {

#line 16 "root_numpy/src/graph.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_array,0};

#line 16 "root_numpy/src/graph.pyx"
    PyObject* values[2] = {0,0};

#line 16 "root_numpy/src/graph.pyx"
    if (unlikely(__pyx_kwds)) {

#line 16 "root_numpy/src/graph.pyx"
      Py_ssize_t kw_args;

#line 16 "root_numpy/src/graph.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 16 "root_numpy/src/graph.pyx"
      switch (pos_args) {
        case  2: 
#line 16 "root_numpy/src/graph.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 16 "root_numpy/src/graph.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 16 "root_numpy/src/graph.pyx"
        case  0: break;
        default: 
#line 16 "root_numpy/src/graph.pyx"
goto __pyx_L5_argtuple_error;

#line 16 "root_numpy/src/graph.pyx"
      }

#line 16 "root_numpy/src/graph.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 16 "root_numpy/src/graph.pyx"
      switch (pos_args) {

#line 16 "root_numpy/src/graph.pyx"
        case  0:

#line 16 "root_numpy/src/graph.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else 
#line 16 "root_numpy/src/graph.pyx"
goto __pyx_L5_argtuple_error;

#line 16 "root_numpy/src/graph.pyx"
        case  1:

#line 16 "root_numpy/src/graph.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 16 "root_numpy/src/graph.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_g2", 1, 2, 2, 1); 
#line 16 "root_numpy/src/graph.pyx"
__PYX_ERR(7, 16, __pyx_L3_error)

#line 16 "root_numpy/src/graph.pyx"
        }

#line 16 "root_numpy/src/graph.pyx"
      }

#line 16 "root_numpy/src/graph.pyx"
      if (unlikely(kw_args > 0)) {

#line 16 "root_numpy/src/graph.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_g2") < 0)) __PYX_ERR(7, 16, __pyx_L3_error)

#line 16 "root_numpy/src/graph.pyx"
      }

#line 16 "root_numpy/src/graph.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 16 "root_numpy/src/graph.pyx"
      goto __pyx_L5_argtuple_error;

#line 16 "root_numpy/src/graph.pyx"
    } else {

#line 16 "root_numpy/src/graph.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 16 "root_numpy/src/graph.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 16 "root_numpy/src/graph.pyx"
    }

#line 16 "root_numpy/src/graph.pyx"
    __pyx_v_graph = values[0];

#line 16 "root_numpy/src/graph.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 16 "root_numpy/src/graph.pyx"
  }

#line 16 "root_numpy/src/graph.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_g2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 16 "root_numpy/src/graph.pyx"
__PYX_ERR(7, 16, __pyx_L3_error)

#line 16 "root_numpy/src/graph.pyx"
  __pyx_L3_error:;

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_g2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "root_numpy/src/graph.pyx"
  return NULL;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 16 "root_numpy/src/graph.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_r = 
#line 16 "root_numpy/src/graph.pyx"
__pyx_pf_13_librootnumpy_102fill_g2(__pyx_self, __pyx_v_graph, __pyx_v_array);

#line 16 "root_numpy/src/graph.pyx"


#line 16 "root_numpy/src/graph.pyx"
  /* function exit code */

#line 16 "root_numpy/src/graph.pyx"
  goto __pyx_L0;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_L1_error:;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_r = NULL;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_L0:;

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "root_numpy/src/graph.pyx"
  return __pyx_r;

#line 16 "root_numpy/src/graph.pyx"
}

#line 16 "root_numpy/src/graph.pyx"


#line 16 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pf_13_librootnumpy_102fill_g2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array) {
  TGraph2D *__pyx_v__graph
#line 16 "root_numpy/src/graph.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 16 "root_numpy/src/graph.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 16 "root_numpy/src/graph.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 16 "root_numpy/src/graph.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 16 "root_numpy/src/graph.pyx"
;

#line 16 "root_numpy/src/graph.pyx"
  PyObject *__pyx_r = NULL;

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyDeclarations

#line 16 "root_numpy/src/graph.pyx"
  void *__pyx_t_1;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_2;

#line 16 "root_numpy/src/graph.pyx"
  Py_ssize_t __pyx_t_3;

#line 16 "root_numpy/src/graph.pyx"
  Py_ssize_t __pyx_t_4;

#line 16 "root_numpy/src/graph.pyx"
  Py_ssize_t __pyx_t_5;

#line 16 "root_numpy/src/graph.pyx"
  Py_ssize_t __pyx_t_6;

#line 16 "root_numpy/src/graph.pyx"
  Py_ssize_t __pyx_t_7;

#line 16 "root_numpy/src/graph.pyx"
  Py_ssize_t __pyx_t_8;

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_RefNannySetupContext("fill_g2", 0);

#line 16 "root_numpy/src/graph.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 16 "root_numpy/src/graph.pyx"
  {

#line 16 "root_numpy/src/graph.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 16 "root_numpy/src/graph.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(7, 16, __pyx_L1_error)

#line 16 "root_numpy/src/graph.pyx"
  }

#line 16 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/graph.pyx":19
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TGraph2D* _graph = <TGraph2D*> PyCObject_AsVoidPtr(graph)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 19 "root_numpy/src/graph.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_graph); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(7, 19, __pyx_L1_error)

#line 19 "root_numpy/src/graph.pyx"
  __pyx_v__graph = ((TGraph2D *)__pyx_t_1);

  /* "root_numpy/src/graph.pyx":20
 *     # perform type checking on python side
 *     cdef TGraph2D* _graph = <TGraph2D*> PyCObject_AsVoidPtr(graph)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     _graph.Set(size)
 */

#line 20 "root_numpy/src/graph.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/graph.pyx":22
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     _graph.Set(size)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1], array[i, 2])
 */

#line 22 "root_numpy/src/graph.pyx"
  __pyx_v__graph->Set(__pyx_v_size);

  /* "root_numpy/src/graph.pyx":23
 *     cdef SIZE_t i
 *     _graph.Set(size)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         _graph.SetPoint(i, array[i, 0], array[i, 1], array[i, 2])
 */

#line 23 "root_numpy/src/graph.pyx"
  __pyx_t_2 = __pyx_v_size;

#line 23 "root_numpy/src/graph.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {

    /* "root_numpy/src/graph.pyx":24
 *     _graph.Set(size)
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1], array[i, 2])             # <<<<<<<<<<<<<<
 */

#line 24 "root_numpy/src/graph.pyx"
    __pyx_t_3 = __pyx_v_i;

#line 24 "root_numpy/src/graph.pyx"
    __pyx_t_4 = 0;

#line 24 "root_numpy/src/graph.pyx"
    __pyx_t_5 = __pyx_v_i;

#line 24 "root_numpy/src/graph.pyx"
    __pyx_t_6 = 1;

#line 24 "root_numpy/src/graph.pyx"
    __pyx_t_7 = __pyx_v_i;

#line 24 "root_numpy/src/graph.pyx"
    __pyx_t_8 = 2;

#line 24 "root_numpy/src/graph.pyx"
    __pyx_v__graph->SetPoint(__pyx_v_i, (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_8, __pyx_pybuffernd_array.diminfo[1].strides)));

#line 24 "root_numpy/src/graph.pyx"
  }

  /* "root_numpy/src/graph.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 16 "root_numpy/src/graph.pyx"


#line 16 "root_numpy/src/graph.pyx"
  /* function exit code */

#line 16 "root_numpy/src/graph.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 16 "root_numpy/src/graph.pyx"
  goto __pyx_L0;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_L1_error:;

#line 16 "root_numpy/src/graph.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 16 "root_numpy/src/graph.pyx"
    __Pyx_PyThreadState_declare

#line 16 "root_numpy/src/graph.pyx"
    __Pyx_PyThreadState_assign

#line 16 "root_numpy/src/graph.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 16 "root_numpy/src/graph.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_g2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 16 "root_numpy/src/graph.pyx"
  __pyx_r = NULL;

#line 16 "root_numpy/src/graph.pyx"
  goto __pyx_L2;

#line 16 "root_numpy/src/graph.pyx"
  __pyx_L0:;

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 16 "root_numpy/src/graph.pyx"
  __pyx_L2:;

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "root_numpy/src/graph.pyx"
  return __pyx_r;

#line 16 "root_numpy/src/graph.pyx"
}

/* "root_numpy/src/evaluate.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h1(hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */

#line 3 "root_numpy/src/evaluate.pyx"


#line 3 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 3 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_105evaluate_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_105evaluate_h1 = 
#line 3 "root_numpy/src/evaluate.pyx"
{"evaluate_h1", (PyCFunction)__pyx_pw_13_librootnumpy_105evaluate_h1, METH_VARARGS|METH_KEYWORDS, 0};

#line 3 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_105evaluate_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 3 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 3 "root_numpy/src/evaluate.pyx"
;

#line 3 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h1 (wrapper)", 0);

#line 3 "root_numpy/src/evaluate.pyx"
  {

#line 3 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,0};

#line 3 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 3 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 3 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 3 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 3 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 3 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 3 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 3 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 3 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 3 "root_numpy/src/evaluate.pyx"
      }

#line 3 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 3 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 3 "root_numpy/src/evaluate.pyx"
        case  0:

#line 3 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 3 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 3 "root_numpy/src/evaluate.pyx"
        case  1:

#line 3 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 3 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_h1", 1, 2, 2, 1); 
#line 3 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 3, __pyx_L3_error)

#line 3 "root_numpy/src/evaluate.pyx"
        }

#line 3 "root_numpy/src/evaluate.pyx"
      }

#line 3 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 3 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_h1") < 0)) __PYX_ERR(8, 3, __pyx_L3_error)

#line 3 "root_numpy/src/evaluate.pyx"
      }

#line 3 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 3 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 3 "root_numpy/src/evaluate.pyx"
    } else {

#line 3 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 3 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 3 "root_numpy/src/evaluate.pyx"
    }

#line 3 "root_numpy/src/evaluate.pyx"
    __pyx_v_hist = values[0];

#line 3 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 3 "root_numpy/src/evaluate.pyx"
  }

#line 3 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_h1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 3 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 3, __pyx_L3_error)

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 3 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 3 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 3, __pyx_L1_error)
  __pyx_r = 
#line 3 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_104evaluate_h1(__pyx_self, __pyx_v_hist, __pyx_v_array);

#line 3 "root_numpy/src/evaluate.pyx"


#line 3 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 3 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 3 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 3 "root_numpy/src/evaluate.pyx"
}

#line 3 "root_numpy/src/evaluate.pyx"


#line 3 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_104evaluate_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array) {
  TH1 *__pyx_v__hist
#line 3 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 3 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 3 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 3 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 3 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 3 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 3 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 3 "root_numpy/src/evaluate.pyx"
;

#line 3 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 3 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 3 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 3 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 3 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h1", 0);

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 3 "root_numpy/src/evaluate.pyx"
  {

#line 3 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 3 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(8, 3, __pyx_L1_error)

#line 3 "root_numpy/src/evaluate.pyx"
  }

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/evaluate.pyx":5
 * def evaluate_h1(hist, np.ndarray[np.double_t, ndim=1] array):
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 5, __pyx_L1_error)

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_v__hist = ((TH1 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":6
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 6 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":8
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i]))
 */

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 8, __pyx_L1_error)

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 8, __pyx_L1_error)

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 8, __pyx_L1_error)

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 8, __pyx_L1_error)

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 8 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 8, __pyx_L1_error)

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 8, __pyx_L1_error)

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 8, __pyx_L1_error)

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 8 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 8, __pyx_L1_error)

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 8, __pyx_L1_error)

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 8 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 8 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 8, __pyx_L1_error)

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 8 "root_numpy/src/evaluate.pyx"
  {

#line 8 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 8 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 8 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 8 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 8, __pyx_L1_error)
    } else {
#line 8 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 8 "root_numpy/src/evaluate.pyx"
    }

#line 8 "root_numpy/src/evaluate.pyx"
  }

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 8 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":9
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i]))
 *     return values
 */

#line 9 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 9 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":10
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i]))             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 10 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 10 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_v_i;

#line 10 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__hist->GetBinContent(__pyx_v__hist->FindBin((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides))));

#line 10 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":11
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i]))
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 11 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 11 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 11 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 11 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h1(hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */

#line 3 "root_numpy/src/evaluate.pyx"


#line 3 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 3 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 3 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 3 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 3 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 3 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 3 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 3 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 3 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 3 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h2(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */

#line 16 "root_numpy/src/evaluate.pyx"


#line 16 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 16 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_107evaluate_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_107evaluate_h2 = 
#line 16 "root_numpy/src/evaluate.pyx"
{"evaluate_h2", (PyCFunction)__pyx_pw_13_librootnumpy_107evaluate_h2, METH_VARARGS|METH_KEYWORDS, 0};

#line 16 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_107evaluate_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 16 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 16 "root_numpy/src/evaluate.pyx"
;

#line 16 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h2 (wrapper)", 0);

#line 16 "root_numpy/src/evaluate.pyx"
  {

#line 16 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,0};

#line 16 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 16 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 16 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 16 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 16 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 16 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 16 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 16 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 16 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 16 "root_numpy/src/evaluate.pyx"
      }

#line 16 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 16 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 16 "root_numpy/src/evaluate.pyx"
        case  0:

#line 16 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 16 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 16 "root_numpy/src/evaluate.pyx"
        case  1:

#line 16 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 16 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_h2", 1, 2, 2, 1); 
#line 16 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 16, __pyx_L3_error)

#line 16 "root_numpy/src/evaluate.pyx"
        }

#line 16 "root_numpy/src/evaluate.pyx"
      }

#line 16 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 16 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_h2") < 0)) __PYX_ERR(8, 16, __pyx_L3_error)

#line 16 "root_numpy/src/evaluate.pyx"
      }

#line 16 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 16 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 16 "root_numpy/src/evaluate.pyx"
    } else {

#line 16 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 16 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 16 "root_numpy/src/evaluate.pyx"
    }

#line 16 "root_numpy/src/evaluate.pyx"
    __pyx_v_hist = values[0];

#line 16 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 16 "root_numpy/src/evaluate.pyx"
  }

#line 16 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_h2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 16 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 16, __pyx_L3_error)

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 16 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 16, __pyx_L1_error)
  __pyx_r = 
#line 16 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_106evaluate_h2(__pyx_self, __pyx_v_hist, __pyx_v_array);

#line 16 "root_numpy/src/evaluate.pyx"


#line 16 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 16 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 16 "root_numpy/src/evaluate.pyx"
}

#line 16 "root_numpy/src/evaluate.pyx"


#line 16 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_106evaluate_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array) {
  TH2 *__pyx_v__hist
#line 16 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 16 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 16 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 16 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 16 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 16 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 16 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 16 "root_numpy/src/evaluate.pyx"
;

#line 16 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 16 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 16 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 16 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 16 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 16 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_11;

#line 16 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_12;

#line 16 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_13;

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h2", 0);

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 16 "root_numpy/src/evaluate.pyx"
  {

#line 16 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 16 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(8, 16, __pyx_L1_error)

#line 16 "root_numpy/src/evaluate.pyx"
  }

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":18
 * def evaluate_h2(hist, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 18 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 18, __pyx_L1_error)

#line 18 "root_numpy/src/evaluate.pyx"
  __pyx_v__hist = ((TH2 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":19
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 19 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":21
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i, 0], array[i, 1]))
 */

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 21, __pyx_L1_error)

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 21, __pyx_L1_error)

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 21, __pyx_L1_error)

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 21, __pyx_L1_error)

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 21 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 21, __pyx_L1_error)

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 21, __pyx_L1_error)

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 21, __pyx_L1_error)

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 21 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 21, __pyx_L1_error)

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 21, __pyx_L1_error)

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 21 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 21 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 21, __pyx_L1_error)

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 21 "root_numpy/src/evaluate.pyx"
  {

#line 21 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 21 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 21 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 21 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 21, __pyx_L1_error)
    } else {
#line 21 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 21 "root_numpy/src/evaluate.pyx"
    }

#line 21 "root_numpy/src/evaluate.pyx"
  }

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 21 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":22
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i, 0], array[i, 1]))
 *     return values
 */

#line 22 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 22 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":23
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i, 0], array[i, 1]))             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 23 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 23 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = 0;

#line 23 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 23 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = 1;

#line 23 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = __pyx_v_i;

#line 23 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__hist->GetBinContent(__pyx_v__hist->FindBin((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_array.diminfo[1].strides))));

#line 23 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":24
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i, 0], array[i, 1]))
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 24 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 24 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 24 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 24 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h2(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */

#line 16 "root_numpy/src/evaluate.pyx"


#line 16 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 16 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 16 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 16 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 16 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 16 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 16 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 16 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":29
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h3(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */

#line 29 "root_numpy/src/evaluate.pyx"


#line 29 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 29 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_109evaluate_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_109evaluate_h3 = 
#line 29 "root_numpy/src/evaluate.pyx"
{"evaluate_h3", (PyCFunction)__pyx_pw_13_librootnumpy_109evaluate_h3, METH_VARARGS|METH_KEYWORDS, 0};

#line 29 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_109evaluate_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 29 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 29 "root_numpy/src/evaluate.pyx"
;

#line 29 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h3 (wrapper)", 0);

#line 29 "root_numpy/src/evaluate.pyx"
  {

#line 29 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,0};

#line 29 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 29 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 29 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 29 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 29 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 29 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 29 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 29 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 29 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 29 "root_numpy/src/evaluate.pyx"
      }

#line 29 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 29 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 29 "root_numpy/src/evaluate.pyx"
        case  0:

#line 29 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 29 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 29 "root_numpy/src/evaluate.pyx"
        case  1:

#line 29 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 29 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_h3", 1, 2, 2, 1); 
#line 29 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 29, __pyx_L3_error)

#line 29 "root_numpy/src/evaluate.pyx"
        }

#line 29 "root_numpy/src/evaluate.pyx"
      }

#line 29 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 29 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_h3") < 0)) __PYX_ERR(8, 29, __pyx_L3_error)

#line 29 "root_numpy/src/evaluate.pyx"
      }

#line 29 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 29 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 29 "root_numpy/src/evaluate.pyx"
    } else {

#line 29 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 29 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 29 "root_numpy/src/evaluate.pyx"
    }

#line 29 "root_numpy/src/evaluate.pyx"
    __pyx_v_hist = values[0];

#line 29 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 29 "root_numpy/src/evaluate.pyx"
  }

#line 29 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_h3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 29 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 29, __pyx_L3_error)

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 29 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 29 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 29, __pyx_L1_error)
  __pyx_r = 
#line 29 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_108evaluate_h3(__pyx_self, __pyx_v_hist, __pyx_v_array);

#line 29 "root_numpy/src/evaluate.pyx"


#line 29 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 29 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 29 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 29 "root_numpy/src/evaluate.pyx"
}

#line 29 "root_numpy/src/evaluate.pyx"


#line 29 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_108evaluate_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array) {
  TH3 *__pyx_v__hist
#line 29 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 29 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 29 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 29 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 29 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 29 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 29 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 29 "root_numpy/src/evaluate.pyx"
;

#line 29 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 29 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 29 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 29 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 29 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 29 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_11;

#line 29 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_12;

#line 29 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_13;

#line 29 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_14;

#line 29 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_15;

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h3", 0);

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 29 "root_numpy/src/evaluate.pyx"
  {

#line 29 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 29 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(8, 29, __pyx_L1_error)

#line 29 "root_numpy/src/evaluate.pyx"
  }

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":31
 * def evaluate_h3(hist, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 31 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 31, __pyx_L1_error)

#line 31 "root_numpy/src/evaluate.pyx"
  __pyx_v__hist = ((TH3 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":32
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 32 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":34
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i, 0], array[i, 1], array[i, 2]))
 */

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 34 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 34 "root_numpy/src/evaluate.pyx"
  {

#line 34 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 34 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 34 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 34 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 34, __pyx_L1_error)
    } else {
#line 34 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 34 "root_numpy/src/evaluate.pyx"
    }

#line 34 "root_numpy/src/evaluate.pyx"
  }

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":35
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i, 0], array[i, 1], array[i, 2]))
 *     return values
 */

#line 35 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 35 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":36
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i, 0], array[i, 1], array[i, 2]))             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 36 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 36 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = 0;

#line 36 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 36 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = 1;

#line 36 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = __pyx_v_i;

#line 36 "root_numpy/src/evaluate.pyx"
    __pyx_t_14 = 2;

#line 36 "root_numpy/src/evaluate.pyx"
    __pyx_t_15 = __pyx_v_i;

#line 36 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__hist->GetBinContent(__pyx_v__hist->FindBin((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_array.diminfo[1].strides))));

#line 36 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":37
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i, 0], array[i, 1], array[i, 2]))
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 37 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 37 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 37 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 37 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":29
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h3(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */

#line 29 "root_numpy/src/evaluate.pyx"


#line 29 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 29 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 29 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 29 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 29 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 29 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 29 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 29 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 29 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 29 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":42
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f1(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 */

#line 42 "root_numpy/src/evaluate.pyx"


#line 42 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 42 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_111evaluate_f1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_111evaluate_f1 = 
#line 42 "root_numpy/src/evaluate.pyx"
{"evaluate_f1", (PyCFunction)__pyx_pw_13_librootnumpy_111evaluate_f1, METH_VARARGS|METH_KEYWORDS, 0};

#line 42 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_111evaluate_f1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 42 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 42 "root_numpy/src/evaluate.pyx"
;

#line 42 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f1 (wrapper)", 0);

#line 42 "root_numpy/src/evaluate.pyx"
  {

#line 42 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 42 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 42 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 42 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 42 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 42 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 42 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 42 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 42 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 42 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 42 "root_numpy/src/evaluate.pyx"
      }

#line 42 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 42 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 42 "root_numpy/src/evaluate.pyx"
        case  0:

#line 42 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 42 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 42 "root_numpy/src/evaluate.pyx"
        case  1:

#line 42 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 42 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_f1", 1, 2, 2, 1); 
#line 42 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 42, __pyx_L3_error)

#line 42 "root_numpy/src/evaluate.pyx"
        }

#line 42 "root_numpy/src/evaluate.pyx"
      }

#line 42 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 42 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_f1") < 0)) __PYX_ERR(8, 42, __pyx_L3_error)

#line 42 "root_numpy/src/evaluate.pyx"
      }

#line 42 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 42 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 42 "root_numpy/src/evaluate.pyx"
    } else {

#line 42 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 42 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 42 "root_numpy/src/evaluate.pyx"
    }

#line 42 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 42 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 42 "root_numpy/src/evaluate.pyx"
  }

#line 42 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_f1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 42 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 42, __pyx_L3_error)

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 42 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 42 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 42, __pyx_L1_error)
  __pyx_r = 
#line 42 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_110evaluate_f1(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 42 "root_numpy/src/evaluate.pyx"


#line 42 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 42 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 42 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 42 "root_numpy/src/evaluate.pyx"
}

#line 42 "root_numpy/src/evaluate.pyx"


#line 42 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_110evaluate_f1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TF1 *__pyx_v__func
#line 42 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 42 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 42 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 42 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 42 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 42 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 42 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 42 "root_numpy/src/evaluate.pyx"
;

#line 42 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 42 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 42 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 42 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 42 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f1", 0);

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 42 "root_numpy/src/evaluate.pyx"
  {

#line 42 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 42 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(8, 42, __pyx_L1_error)

#line 42 "root_numpy/src/evaluate.pyx"
  }

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/evaluate.pyx":44
 * def evaluate_f1(func, np.ndarray[np.double_t, ndim=1] array):
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 44 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 44, __pyx_L1_error)

#line 44 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TF1 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":45
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":47
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i])
 */

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 47, __pyx_L1_error)

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 47, __pyx_L1_error)

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 47, __pyx_L1_error)

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 47, __pyx_L1_error)

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 47 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 47, __pyx_L1_error)

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 47, __pyx_L1_error)

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 47, __pyx_L1_error)

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 47 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 47, __pyx_L1_error)

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 47, __pyx_L1_error)

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 47 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 47 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 47, __pyx_L1_error)

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 47 "root_numpy/src/evaluate.pyx"
  {

#line 47 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 47 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 47 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 47 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 47, __pyx_L1_error)
    } else {
#line 47 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 47 "root_numpy/src/evaluate.pyx"
    }

#line 47 "root_numpy/src/evaluate.pyx"
  }

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":48
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i])
 *     return values
 */

#line 48 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 48 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":49
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 49 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 49 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_v_i;

#line 49 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides)));

#line 49 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":50
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 50 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 50 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 50 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 50 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":42
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f1(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 */

#line 42 "root_numpy/src/evaluate.pyx"


#line 42 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 42 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 42 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 42 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 42 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 42 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 42 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 42 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 42 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 42 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":55
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f2(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 */

#line 55 "root_numpy/src/evaluate.pyx"


#line 55 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 55 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_113evaluate_f2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_113evaluate_f2 = 
#line 55 "root_numpy/src/evaluate.pyx"
{"evaluate_f2", (PyCFunction)__pyx_pw_13_librootnumpy_113evaluate_f2, METH_VARARGS|METH_KEYWORDS, 0};

#line 55 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_113evaluate_f2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 55 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 55 "root_numpy/src/evaluate.pyx"
;

#line 55 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f2 (wrapper)", 0);

#line 55 "root_numpy/src/evaluate.pyx"
  {

#line 55 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 55 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 55 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 55 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 55 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 55 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 55 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 55 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 55 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 55 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 55 "root_numpy/src/evaluate.pyx"
      }

#line 55 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 55 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 55 "root_numpy/src/evaluate.pyx"
        case  0:

#line 55 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 55 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 55 "root_numpy/src/evaluate.pyx"
        case  1:

#line 55 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 55 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_f2", 1, 2, 2, 1); 
#line 55 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 55, __pyx_L3_error)

#line 55 "root_numpy/src/evaluate.pyx"
        }

#line 55 "root_numpy/src/evaluate.pyx"
      }

#line 55 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 55 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_f2") < 0)) __PYX_ERR(8, 55, __pyx_L3_error)

#line 55 "root_numpy/src/evaluate.pyx"
      }

#line 55 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 55 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 55 "root_numpy/src/evaluate.pyx"
    } else {

#line 55 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 55 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 55 "root_numpy/src/evaluate.pyx"
    }

#line 55 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 55 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 55 "root_numpy/src/evaluate.pyx"
  }

#line 55 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_f2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 55 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 55, __pyx_L3_error)

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 55 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 55 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 55, __pyx_L1_error)
  __pyx_r = 
#line 55 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_112evaluate_f2(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 55 "root_numpy/src/evaluate.pyx"


#line 55 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 55 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 55 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 55 "root_numpy/src/evaluate.pyx"
}

#line 55 "root_numpy/src/evaluate.pyx"


#line 55 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_112evaluate_f2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TF2 *__pyx_v__func
#line 55 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 55 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 55 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 55 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 55 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 55 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 55 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 55 "root_numpy/src/evaluate.pyx"
;

#line 55 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 55 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 55 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 55 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 55 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 55 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_11;

#line 55 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_12;

#line 55 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_13;

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f2", 0);

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 55 "root_numpy/src/evaluate.pyx"
  {

#line 55 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 55 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(8, 55, __pyx_L1_error)

#line 55 "root_numpy/src/evaluate.pyx"
  }

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":57
 * def evaluate_f2(func, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 57 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 57, __pyx_L1_error)

#line 57 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TF2 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":58
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 58 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":60
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1])
 */

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 60, __pyx_L1_error)

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 60, __pyx_L1_error)

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 60, __pyx_L1_error)

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 60, __pyx_L1_error)

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 60 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 60, __pyx_L1_error)

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 60, __pyx_L1_error)

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 60, __pyx_L1_error)

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 60, __pyx_L1_error)

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 60, __pyx_L1_error)

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 60, __pyx_L1_error)

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 60 "root_numpy/src/evaluate.pyx"
  {

#line 60 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 60 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 60 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 60 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 60, __pyx_L1_error)
    } else {
#line 60 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 60 "root_numpy/src/evaluate.pyx"
    }

#line 60 "root_numpy/src/evaluate.pyx"
  }

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":61
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i, 0], array[i, 1])
 *     return values
 */

#line 61 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 61 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":62
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 62 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 62 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = 0;

#line 62 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 62 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = 1;

#line 62 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = __pyx_v_i;

#line 62 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_array.diminfo[1].strides)));

#line 62 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":63
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 63 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 63 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 63 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 63 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":55
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f2(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 */

#line 55 "root_numpy/src/evaluate.pyx"


#line 55 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 55 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 55 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 55 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 55 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 55 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 55 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 55 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 55 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 55 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":68
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f3(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 */

#line 68 "root_numpy/src/evaluate.pyx"


#line 68 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 68 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_115evaluate_f3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_115evaluate_f3 = 
#line 68 "root_numpy/src/evaluate.pyx"
{"evaluate_f3", (PyCFunction)__pyx_pw_13_librootnumpy_115evaluate_f3, METH_VARARGS|METH_KEYWORDS, 0};

#line 68 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_115evaluate_f3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 68 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 68 "root_numpy/src/evaluate.pyx"
;

#line 68 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f3 (wrapper)", 0);

#line 68 "root_numpy/src/evaluate.pyx"
  {

#line 68 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 68 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 68 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 68 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 68 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 68 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 68 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 68 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 68 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 68 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 68 "root_numpy/src/evaluate.pyx"
      }

#line 68 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 68 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 68 "root_numpy/src/evaluate.pyx"
        case  0:

#line 68 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 68 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 68 "root_numpy/src/evaluate.pyx"
        case  1:

#line 68 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 68 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_f3", 1, 2, 2, 1); 
#line 68 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 68, __pyx_L3_error)

#line 68 "root_numpy/src/evaluate.pyx"
        }

#line 68 "root_numpy/src/evaluate.pyx"
      }

#line 68 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 68 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_f3") < 0)) __PYX_ERR(8, 68, __pyx_L3_error)

#line 68 "root_numpy/src/evaluate.pyx"
      }

#line 68 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 68 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 68 "root_numpy/src/evaluate.pyx"
    } else {

#line 68 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 68 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 68 "root_numpy/src/evaluate.pyx"
    }

#line 68 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 68 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 68 "root_numpy/src/evaluate.pyx"
  }

#line 68 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_f3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 68 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 68, __pyx_L3_error)

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 68 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 68 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 68, __pyx_L1_error)
  __pyx_r = 
#line 68 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_114evaluate_f3(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 68 "root_numpy/src/evaluate.pyx"


#line 68 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 68 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 68 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 68 "root_numpy/src/evaluate.pyx"
}

#line 68 "root_numpy/src/evaluate.pyx"


#line 68 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_114evaluate_f3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TF3 *__pyx_v__func
#line 68 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 68 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 68 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 68 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 68 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 68 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 68 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 68 "root_numpy/src/evaluate.pyx"
;

#line 68 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 68 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 68 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 68 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 68 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 68 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_11;

#line 68 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_12;

#line 68 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_13;

#line 68 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_14;

#line 68 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_15;

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f3", 0);

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 68 "root_numpy/src/evaluate.pyx"
  {

#line 68 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 68 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(8, 68, __pyx_L1_error)

#line 68 "root_numpy/src/evaluate.pyx"
  }

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":70
 * def evaluate_f3(func, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 70 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 70, __pyx_L1_error)

#line 70 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TF3 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":71
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":73
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2])
 */

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 73, __pyx_L1_error)

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 73, __pyx_L1_error)

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 73, __pyx_L1_error)

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 73, __pyx_L1_error)

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 73 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 73, __pyx_L1_error)

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 73, __pyx_L1_error)

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 73, __pyx_L1_error)

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 73 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 73, __pyx_L1_error)

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 73, __pyx_L1_error)

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 73 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 73 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 73, __pyx_L1_error)

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 73 "root_numpy/src/evaluate.pyx"
  {

#line 73 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 73 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 73 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 73 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 73, __pyx_L1_error)
    } else {
#line 73 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 73 "root_numpy/src/evaluate.pyx"
    }

#line 73 "root_numpy/src/evaluate.pyx"
  }

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":74
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2])
 *     return values
 */

#line 74 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 74 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":75
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 75 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 75 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = 0;

#line 75 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 75 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = 1;

#line 75 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = __pyx_v_i;

#line 75 "root_numpy/src/evaluate.pyx"
    __pyx_t_14 = 2;

#line 75 "root_numpy/src/evaluate.pyx"
    __pyx_t_15 = __pyx_v_i;

#line 75 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_array.diminfo[1].strides)));

#line 75 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":76
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 76 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 76 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 76 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 76 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":68
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f3(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 */

#line 68 "root_numpy/src/evaluate.pyx"


#line 68 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 68 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 68 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 68 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 68 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 68 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 68 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 68 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 68 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 68 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":81
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_1d(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 81 "root_numpy/src/evaluate.pyx"


#line 81 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 81 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_117evaluate_formula_1d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_117evaluate_formula_1d = 
#line 81 "root_numpy/src/evaluate.pyx"
{"evaluate_formula_1d", (PyCFunction)__pyx_pw_13_librootnumpy_117evaluate_formula_1d, METH_VARARGS|METH_KEYWORDS, 0};

#line 81 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_117evaluate_formula_1d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 81 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 81 "root_numpy/src/evaluate.pyx"
;

#line 81 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_1d (wrapper)", 0);

#line 81 "root_numpy/src/evaluate.pyx"
  {

#line 81 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 81 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 81 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 81 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 81 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 81 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 81 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 81 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 81 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 81 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 81 "root_numpy/src/evaluate.pyx"
      }

#line 81 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 81 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 81 "root_numpy/src/evaluate.pyx"
        case  0:

#line 81 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 81 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 81 "root_numpy/src/evaluate.pyx"
        case  1:

#line 81 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 81 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_formula_1d", 1, 2, 2, 1); 
#line 81 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 81, __pyx_L3_error)

#line 81 "root_numpy/src/evaluate.pyx"
        }

#line 81 "root_numpy/src/evaluate.pyx"
      }

#line 81 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 81 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_formula_1d") < 0)) __PYX_ERR(8, 81, __pyx_L3_error)

#line 81 "root_numpy/src/evaluate.pyx"
      }

#line 81 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 81 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 81 "root_numpy/src/evaluate.pyx"
    } else {

#line 81 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 81 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 81 "root_numpy/src/evaluate.pyx"
    }

#line 81 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 81 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 81 "root_numpy/src/evaluate.pyx"
  }

#line 81 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_formula_1d", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 81 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 81, __pyx_L3_error)

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_1d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 81 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 81 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 81, __pyx_L1_error)
  __pyx_r = 
#line 81 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_116evaluate_formula_1d(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 81 "root_numpy/src/evaluate.pyx"


#line 81 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 81 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 81 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 81 "root_numpy/src/evaluate.pyx"
}

#line 81 "root_numpy/src/evaluate.pyx"


#line 81 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_116evaluate_formula_1d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TFormula *__pyx_v__func
#line 81 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 81 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 81 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 81 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 81 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 81 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 81 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 81 "root_numpy/src/evaluate.pyx"
;

#line 81 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 81 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 81 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 81 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 81 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_1d", 0);

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 81 "root_numpy/src/evaluate.pyx"
  {

#line 81 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 81 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(8, 81, __pyx_L1_error)

#line 81 "root_numpy/src/evaluate.pyx"
  }

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/evaluate.pyx":83
 * def evaluate_formula_1d(func, np.ndarray[np.double_t, ndim=1] array):
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 83 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 83, __pyx_L1_error)

#line 83 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TFormula *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":84
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 84 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":86
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i])
 */

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 86 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 86 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 86 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 86 "root_numpy/src/evaluate.pyx"
  {

#line 86 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 86 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 86 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 86 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 86, __pyx_L1_error)
    } else {
#line 86 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 86 "root_numpy/src/evaluate.pyx"
    }

#line 86 "root_numpy/src/evaluate.pyx"
  }

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":87
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i])
 *     return values
 */

#line 87 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 87 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":88
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 88 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 88 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_v_i;

#line 88 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides)));

#line 88 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":89
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 89 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":81
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_1d(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 81 "root_numpy/src/evaluate.pyx"


#line 81 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 81 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 81 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 81 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 81 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 81 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 81 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_1d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 81 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 81 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 81 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_2d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 94 "root_numpy/src/evaluate.pyx"


#line 94 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 94 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_119evaluate_formula_2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_119evaluate_formula_2d = 
#line 94 "root_numpy/src/evaluate.pyx"
{"evaluate_formula_2d", (PyCFunction)__pyx_pw_13_librootnumpy_119evaluate_formula_2d, METH_VARARGS|METH_KEYWORDS, 0};

#line 94 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_119evaluate_formula_2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 94 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 94 "root_numpy/src/evaluate.pyx"
;

#line 94 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_2d (wrapper)", 0);

#line 94 "root_numpy/src/evaluate.pyx"
  {

#line 94 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 94 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 94 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 94 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 94 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 94 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 94 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 94 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 94 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 94 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 94 "root_numpy/src/evaluate.pyx"
      }

#line 94 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 94 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 94 "root_numpy/src/evaluate.pyx"
        case  0:

#line 94 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 94 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 94 "root_numpy/src/evaluate.pyx"
        case  1:

#line 94 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 94 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_formula_2d", 1, 2, 2, 1); 
#line 94 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 94, __pyx_L3_error)

#line 94 "root_numpy/src/evaluate.pyx"
        }

#line 94 "root_numpy/src/evaluate.pyx"
      }

#line 94 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 94 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_formula_2d") < 0)) __PYX_ERR(8, 94, __pyx_L3_error)

#line 94 "root_numpy/src/evaluate.pyx"
      }

#line 94 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 94 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 94 "root_numpy/src/evaluate.pyx"
    } else {

#line 94 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 94 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 94 "root_numpy/src/evaluate.pyx"
    }

#line 94 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 94 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 94 "root_numpy/src/evaluate.pyx"
  }

#line 94 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_formula_2d", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 94 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 94, __pyx_L3_error)

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 94 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 94, __pyx_L1_error)
  __pyx_r = 
#line 94 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_118evaluate_formula_2d(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 94 "root_numpy/src/evaluate.pyx"


#line 94 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 94 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 94 "root_numpy/src/evaluate.pyx"
}

#line 94 "root_numpy/src/evaluate.pyx"


#line 94 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_118evaluate_formula_2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TFormula *__pyx_v__func
#line 94 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 94 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 94 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 94 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 94 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 94 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 94 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 94 "root_numpy/src/evaluate.pyx"
;

#line 94 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 94 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 94 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 94 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 94 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 94 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_11;

#line 94 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_12;

#line 94 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_13;

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_2d", 0);

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 94 "root_numpy/src/evaluate.pyx"
  {

#line 94 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 94 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(8, 94, __pyx_L1_error)

#line 94 "root_numpy/src/evaluate.pyx"
  }

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":96
 * def evaluate_formula_2d(func, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 96 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 96, __pyx_L1_error)

#line 96 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TFormula *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":97
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 97 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":99
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1])
 */

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 99, __pyx_L1_error)

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 99, __pyx_L1_error)

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 99, __pyx_L1_error)

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 99, __pyx_L1_error)

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 99 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 99, __pyx_L1_error)

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 99, __pyx_L1_error)

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 99, __pyx_L1_error)

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 99 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 99, __pyx_L1_error)

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 99, __pyx_L1_error)

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 99 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 99 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 99, __pyx_L1_error)

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 99 "root_numpy/src/evaluate.pyx"
  {

#line 99 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 99 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 99 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 99 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 99, __pyx_L1_error)
    } else {
#line 99 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 99 "root_numpy/src/evaluate.pyx"
    }

#line 99 "root_numpy/src/evaluate.pyx"
  }

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 99 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":100
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i, 0], array[i, 1])
 *     return values
 */

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 100 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":101
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 101 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 101 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = 0;

#line 101 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 101 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = 1;

#line 101 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = __pyx_v_i;

#line 101 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_array.diminfo[1].strides)));

#line 101 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":102
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 102 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 102 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 102 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 102 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_2d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 94 "root_numpy/src/evaluate.pyx"


#line 94 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 94 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 94 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 94 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 94 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 94 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 94 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 94 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 94 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":107
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_3d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 107 "root_numpy/src/evaluate.pyx"


#line 107 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 107 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_121evaluate_formula_3d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_121evaluate_formula_3d = 
#line 107 "root_numpy/src/evaluate.pyx"
{"evaluate_formula_3d", (PyCFunction)__pyx_pw_13_librootnumpy_121evaluate_formula_3d, METH_VARARGS|METH_KEYWORDS, 0};

#line 107 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_121evaluate_formula_3d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 107 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 107 "root_numpy/src/evaluate.pyx"
;

#line 107 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_3d (wrapper)", 0);

#line 107 "root_numpy/src/evaluate.pyx"
  {

#line 107 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 107 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 107 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 107 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 107 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 107 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 107 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 107 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 107 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 107 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 107 "root_numpy/src/evaluate.pyx"
      }

#line 107 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 107 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 107 "root_numpy/src/evaluate.pyx"
        case  0:

#line 107 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 107 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 107 "root_numpy/src/evaluate.pyx"
        case  1:

#line 107 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 107 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_formula_3d", 1, 2, 2, 1); 
#line 107 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 107, __pyx_L3_error)

#line 107 "root_numpy/src/evaluate.pyx"
        }

#line 107 "root_numpy/src/evaluate.pyx"
      }

#line 107 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 107 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_formula_3d") < 0)) __PYX_ERR(8, 107, __pyx_L3_error)

#line 107 "root_numpy/src/evaluate.pyx"
      }

#line 107 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 107 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 107 "root_numpy/src/evaluate.pyx"
    } else {

#line 107 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 107 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 107 "root_numpy/src/evaluate.pyx"
    }

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 107 "root_numpy/src/evaluate.pyx"
  }

#line 107 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_formula_3d", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 107 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 107, __pyx_L3_error)

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_3d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 107 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 107 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 107, __pyx_L1_error)
  __pyx_r = 
#line 107 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_120evaluate_formula_3d(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 107 "root_numpy/src/evaluate.pyx"


#line 107 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 107 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 107 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 107 "root_numpy/src/evaluate.pyx"
}

#line 107 "root_numpy/src/evaluate.pyx"


#line 107 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_120evaluate_formula_3d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TFormula *__pyx_v__func
#line 107 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 107 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 107 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 107 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 107 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 107 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 107 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 107 "root_numpy/src/evaluate.pyx"
;

#line 107 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 107 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 107 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 107 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 107 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 107 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_11;

#line 107 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_12;

#line 107 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_13;

#line 107 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_14;

#line 107 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_15;

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_3d", 0);

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 107 "root_numpy/src/evaluate.pyx"
  {

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 107 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(8, 107, __pyx_L1_error)

#line 107 "root_numpy/src/evaluate.pyx"
  }

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":109
 * def evaluate_formula_3d(func, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 109 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 109, __pyx_L1_error)

#line 109 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TFormula *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":110
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 110 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":112
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2])
 */

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 112, __pyx_L1_error)

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 112, __pyx_L1_error)

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 112, __pyx_L1_error)

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 112, __pyx_L1_error)

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 112 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 112, __pyx_L1_error)

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 112, __pyx_L1_error)

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 112, __pyx_L1_error)

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 112 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 112, __pyx_L1_error)

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 112, __pyx_L1_error)

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 112 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 112 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 112, __pyx_L1_error)

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 112 "root_numpy/src/evaluate.pyx"
  {

#line 112 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 112 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 112 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 112 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 112, __pyx_L1_error)
    } else {
#line 112 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 112 "root_numpy/src/evaluate.pyx"
    }

#line 112 "root_numpy/src/evaluate.pyx"
  }

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 112 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":113
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2])
 *     return values
 */

#line 113 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 113 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":114
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 114 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 114 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = 0;

#line 114 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 114 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = 1;

#line 114 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = __pyx_v_i;

#line 114 "root_numpy/src/evaluate.pyx"
    __pyx_t_14 = 2;

#line 114 "root_numpy/src/evaluate.pyx"
    __pyx_t_15 = __pyx_v_i;

#line 114 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_array.diminfo[1].strides)));

#line 114 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":115
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 115 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":107
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_3d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 107 "root_numpy/src/evaluate.pyx"


#line 107 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 107 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_3d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 107 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 107 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 107 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":120
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_4d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 120 "root_numpy/src/evaluate.pyx"


#line 120 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 120 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_123evaluate_formula_4d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_123evaluate_formula_4d = 
#line 120 "root_numpy/src/evaluate.pyx"
{"evaluate_formula_4d", (PyCFunction)__pyx_pw_13_librootnumpy_123evaluate_formula_4d, METH_VARARGS|METH_KEYWORDS, 0};

#line 120 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_123evaluate_formula_4d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 120 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 120 "root_numpy/src/evaluate.pyx"
;

#line 120 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_4d (wrapper)", 0);

#line 120 "root_numpy/src/evaluate.pyx"
  {

#line 120 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 120 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 120 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 120 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 120 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 120 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 120 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 120 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 120 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 120 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 120 "root_numpy/src/evaluate.pyx"
      }

#line 120 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 120 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 120 "root_numpy/src/evaluate.pyx"
        case  0:

#line 120 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 120 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 120 "root_numpy/src/evaluate.pyx"
        case  1:

#line 120 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 120 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_formula_4d", 1, 2, 2, 1); 
#line 120 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 120, __pyx_L3_error)

#line 120 "root_numpy/src/evaluate.pyx"
        }

#line 120 "root_numpy/src/evaluate.pyx"
      }

#line 120 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 120 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_formula_4d") < 0)) __PYX_ERR(8, 120, __pyx_L3_error)

#line 120 "root_numpy/src/evaluate.pyx"
      }

#line 120 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 120 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 120 "root_numpy/src/evaluate.pyx"
    } else {

#line 120 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 120 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 120 "root_numpy/src/evaluate.pyx"
    }

#line 120 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 120 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 120 "root_numpy/src/evaluate.pyx"
  }

#line 120 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_formula_4d", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 120 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 120, __pyx_L3_error)

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_4d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 120 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 120 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 120, __pyx_L1_error)
  __pyx_r = 
#line 120 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_122evaluate_formula_4d(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 120 "root_numpy/src/evaluate.pyx"


#line 120 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 120 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 120 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 120 "root_numpy/src/evaluate.pyx"
}

#line 120 "root_numpy/src/evaluate.pyx"


#line 120 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_122evaluate_formula_4d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TFormula *__pyx_v__func
#line 120 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 120 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 120 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 120 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 120 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 120 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 120 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 120 "root_numpy/src/evaluate.pyx"
;

#line 120 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 120 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 120 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 120 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 120 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 120 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_11;

#line 120 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_12;

#line 120 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_13;

#line 120 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_14;

#line 120 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_15;

#line 120 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_16;

#line 120 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_17;

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_4d", 0);

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 120 "root_numpy/src/evaluate.pyx"
  {

#line 120 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 120 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(8, 120, __pyx_L1_error)

#line 120 "root_numpy/src/evaluate.pyx"
  }

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":122
 * def evaluate_formula_4d(func, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 122, __pyx_L1_error)

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TFormula *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":123
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 123 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":125
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2], array[i, 3])
 */

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 125 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 125 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 125 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 125 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 125 "root_numpy/src/evaluate.pyx"
  {

#line 125 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 125 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 125 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 125 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 125, __pyx_L1_error)
    } else {
#line 125 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 125 "root_numpy/src/evaluate.pyx"
    }

#line 125 "root_numpy/src/evaluate.pyx"
  }

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":126
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2], array[i, 3])
 *     return values
 */

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 126 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":127
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2], array[i, 3])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 127 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 127 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = 0;

#line 127 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 127 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = 1;

#line 127 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = __pyx_v_i;

#line 127 "root_numpy/src/evaluate.pyx"
    __pyx_t_14 = 2;

#line 127 "root_numpy/src/evaluate.pyx"
    __pyx_t_15 = __pyx_v_i;

#line 127 "root_numpy/src/evaluate.pyx"
    __pyx_t_16 = 3;

#line 127 "root_numpy/src/evaluate.pyx"
    __pyx_t_17 = __pyx_v_i;

#line 127 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)));

#line 127 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":128
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i, 0], array[i, 1], array[i, 2], array[i, 3])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 128 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 128 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 128 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 128 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":120
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_4d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 120 "root_numpy/src/evaluate.pyx"


#line 120 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 120 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 120 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 120 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 120 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 120 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 120 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_4d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 120 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 120 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 120 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":133
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_graph(graph, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 */

#line 133 "root_numpy/src/evaluate.pyx"


#line 133 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 133 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_125evaluate_graph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_125evaluate_graph = 
#line 133 "root_numpy/src/evaluate.pyx"
{"evaluate_graph", (PyCFunction)__pyx_pw_13_librootnumpy_125evaluate_graph, METH_VARARGS|METH_KEYWORDS, 0};

#line 133 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_125evaluate_graph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0
#line 133 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 133 "root_numpy/src/evaluate.pyx"
;

#line 133 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_graph (wrapper)", 0);

#line 133 "root_numpy/src/evaluate.pyx"
  {

#line 133 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_array,0};

#line 133 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 133 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 133 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 133 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 133 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 133 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 133 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 133 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 133 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 133 "root_numpy/src/evaluate.pyx"
      }

#line 133 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 133 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 133 "root_numpy/src/evaluate.pyx"
        case  0:

#line 133 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else 
#line 133 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 133 "root_numpy/src/evaluate.pyx"
        case  1:

#line 133 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 133 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_graph", 1, 2, 2, 1); 
#line 133 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 133, __pyx_L3_error)

#line 133 "root_numpy/src/evaluate.pyx"
        }

#line 133 "root_numpy/src/evaluate.pyx"
      }

#line 133 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 133 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_graph") < 0)) __PYX_ERR(8, 133, __pyx_L3_error)

#line 133 "root_numpy/src/evaluate.pyx"
      }

#line 133 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 133 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 133 "root_numpy/src/evaluate.pyx"
    } else {

#line 133 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 133 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 133 "root_numpy/src/evaluate.pyx"
    }

#line 133 "root_numpy/src/evaluate.pyx"
    __pyx_v_graph = values[0];

#line 133 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 133 "root_numpy/src/evaluate.pyx"
  }

#line 133 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_graph", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 133 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 133, __pyx_L3_error)

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 133 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 133 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 133, __pyx_L1_error)
  __pyx_r = 
#line 133 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_124evaluate_graph(__pyx_self, __pyx_v_graph, __pyx_v_array);

#line 133 "root_numpy/src/evaluate.pyx"


#line 133 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 133 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 133 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 133 "root_numpy/src/evaluate.pyx"
}

#line 133 "root_numpy/src/evaluate.pyx"


#line 133 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_124evaluate_graph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array) {
  TGraph *__pyx_v__graph
#line 133 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 133 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 133 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 133 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 133 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 133 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 133 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 133 "root_numpy/src/evaluate.pyx"
;

#line 133 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 133 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 133 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 133 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 133 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_graph", 0);

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 133 "root_numpy/src/evaluate.pyx"
  {

#line 133 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 133 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(8, 133, __pyx_L1_error)

#line 133 "root_numpy/src/evaluate.pyx"
  }

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/evaluate.pyx":135
 * def evaluate_graph(graph, np.ndarray[np.double_t, ndim=1] array):
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 135 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_graph); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 135, __pyx_L1_error)

#line 135 "root_numpy/src/evaluate.pyx"
  __pyx_v__graph = ((TGraph *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":136
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 136 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":138
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _graph.Eval(array[i])
 */

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 138, __pyx_L1_error)

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 138, __pyx_L1_error)

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 138, __pyx_L1_error)

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 138, __pyx_L1_error)

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 138 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 138, __pyx_L1_error)

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 138, __pyx_L1_error)

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 138, __pyx_L1_error)

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 138 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 138, __pyx_L1_error)

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 138, __pyx_L1_error)

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 138 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 138 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 138, __pyx_L1_error)

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 138 "root_numpy/src/evaluate.pyx"
  {

#line 138 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 138 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 138 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 138 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 138, __pyx_L1_error)
    } else {
#line 138 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 138 "root_numpy/src/evaluate.pyx"
    }

#line 138 "root_numpy/src/evaluate.pyx"
  }

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 138 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":139
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _graph.Eval(array[i])
 *     return values
 */

#line 139 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 139 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":140
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _graph.Eval(array[i])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 140 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 140 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_v_i;

#line 140 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__graph->Eval((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides)));

#line 140 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":141
 *     for i from 0 <= i < size:
 *         values[i] = _graph.Eval(array[i])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 141 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 141 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 141 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 141 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":133
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_graph(graph, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 */

#line 133 "root_numpy/src/evaluate.pyx"


#line 133 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 133 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 133 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 133 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 133 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 133 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 133 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 133 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 133 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 133 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":146
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_spline(spline, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 */

#line 146 "root_numpy/src/evaluate.pyx"


#line 146 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 146 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_127evaluate_spline(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_127evaluate_spline = 
#line 146 "root_numpy/src/evaluate.pyx"
{"evaluate_spline", (PyCFunction)__pyx_pw_13_librootnumpy_127evaluate_spline, METH_VARARGS|METH_KEYWORDS, 0};

#line 146 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_127evaluate_spline(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_spline = 0
#line 146 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 146 "root_numpy/src/evaluate.pyx"
;

#line 146 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_spline (wrapper)", 0);

#line 146 "root_numpy/src/evaluate.pyx"
  {

#line 146 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_spline,&__pyx_n_s_array,0};

#line 146 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 146 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 146 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 146 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 146 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 146 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 146 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 146 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 146 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 146 "root_numpy/src/evaluate.pyx"
      }

#line 146 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 146 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 146 "root_numpy/src/evaluate.pyx"
        case  0:

#line 146 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spline)) != 0)) kw_args--;
        else 
#line 146 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 146 "root_numpy/src/evaluate.pyx"
        case  1:

#line 146 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 146 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_spline", 1, 2, 2, 1); 
#line 146 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 146, __pyx_L3_error)

#line 146 "root_numpy/src/evaluate.pyx"
        }

#line 146 "root_numpy/src/evaluate.pyx"
      }

#line 146 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 146 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_spline") < 0)) __PYX_ERR(8, 146, __pyx_L3_error)

#line 146 "root_numpy/src/evaluate.pyx"
      }

#line 146 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 146 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 146 "root_numpy/src/evaluate.pyx"
    } else {

#line 146 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 146 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 146 "root_numpy/src/evaluate.pyx"
    }

#line 146 "root_numpy/src/evaluate.pyx"
    __pyx_v_spline = values[0];

#line 146 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 146 "root_numpy/src/evaluate.pyx"
  }

#line 146 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_spline", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 146 "root_numpy/src/evaluate.pyx"
__PYX_ERR(8, 146, __pyx_L3_error)

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_spline", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 146 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 146 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) __PYX_ERR(8, 146, __pyx_L1_error)
  __pyx_r = 
#line 146 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_126evaluate_spline(__pyx_self, __pyx_v_spline, __pyx_v_array);

#line 146 "root_numpy/src/evaluate.pyx"


#line 146 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 146 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 146 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 146 "root_numpy/src/evaluate.pyx"
}

#line 146 "root_numpy/src/evaluate.pyx"


#line 146 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_126evaluate_spline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_spline, PyArrayObject *__pyx_v_array) {
  TSpline *__pyx_v__spline
#line 146 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_size
#line 146 "root_numpy/src/evaluate.pyx"
;
  __pyx_t_13_librootnumpy_SIZE_t __pyx_v_i
#line 146 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 146 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 146 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 146 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 146 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 146 "root_numpy/src/evaluate.pyx"
;

#line 146 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 146 "root_numpy/src/evaluate.pyx"
  void *__pyx_t_1;

#line 146 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  PyArrayObject *__pyx_t_7 = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_t_13_librootnumpy_SIZE_t __pyx_t_8;

#line 146 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_9;

#line 146 "root_numpy/src/evaluate.pyx"
  Py_ssize_t __pyx_t_10;

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_spline", 0);

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 146 "root_numpy/src/evaluate.pyx"
  {

#line 146 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 146 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(8, 146, __pyx_L1_error)

#line 146 "root_numpy/src/evaluate.pyx"
  }

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/evaluate.pyx":148
 * def evaluate_spline(spline, np.ndarray[np.double_t, ndim=1] array):
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 */

#line 148 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_spline); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) __PYX_ERR(8, 148, __pyx_L1_error)

#line 148 "root_numpy/src/evaluate.pyx"
  __pyx_v__spline = ((TSpline *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":149
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 *     cdef SIZE_t size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 149 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":151
 *     cdef SIZE_t size = array.shape[0]
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         values[i] = _spline.Eval(array[i])
 */

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 151, __pyx_L1_error)

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 151, __pyx_L1_error)

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 151, __pyx_L1_error)

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 151, __pyx_L1_error)

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 151 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 151, __pyx_L1_error)

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 151, __pyx_L1_error)

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 151, __pyx_L1_error)

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 151 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(8, 151, __pyx_L1_error)

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 151, __pyx_L1_error)

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 151 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 151 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(8, 151, __pyx_L1_error)

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 151 "root_numpy/src/evaluate.pyx"
  {

#line 151 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 151 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 151 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 151 "root_numpy/src/evaluate.pyx"
      __PYX_ERR(8, 151, __pyx_L1_error)
    } else {
#line 151 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 151 "root_numpy/src/evaluate.pyx"
    }

#line 151 "root_numpy/src/evaluate.pyx"
  }

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 151 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":152
 *     cdef SIZE_t i
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _spline.Eval(array[i])
 *     return values
 */

#line 152 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 152 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":153
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         values[i] = _spline.Eval(array[i])             # <<<<<<<<<<<<<<
 *     return values
 */

#line 153 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 153 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_v_i;

#line 153 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__spline->Eval((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides)));

#line 153 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":154
 *     for i from 0 <= i < size:
 *         values[i] = _spline.Eval(array[i])
 *     return values             # <<<<<<<<<<<<<<
 */

#line 154 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 154 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 154 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 154 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":146
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_spline(spline, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 */

#line 146 "root_numpy/src/evaluate.pyx"


#line 146 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 146 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 146 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_declare

#line 146 "root_numpy/src/evaluate.pyx"
    __Pyx_PyThreadState_assign

#line 146 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 146 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 146 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_spline", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 146 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 146 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 146 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/innerjoin.pyx":11
 * # need to INCREF it
 * 
 * cpdef _blockwise_inner_join(data, left, fk, right,             # <<<<<<<<<<<<<<
 *                             force_repeat, fk_name):
 *     # foreign key is given by array of scalar not array of array
 */

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_pw_13_librootnumpy_129_blockwise_inner_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 11 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_f_13_librootnumpy__blockwise_inner_join(PyObject *__pyx_v_data, PyObject *__pyx_v_left, PyObject *__pyx_v_fk, PyObject *__pyx_v_right, PyObject *__pyx_v_force_repeat, PyObject *__pyx_v_fk_name, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_scalar_mode = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_i_fk_name = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_repeat_columns = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_repeat_indices = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_stretch_columns = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_stretch_indices = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_right_indices = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_new_dtype = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_c = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_ret = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_x = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_repeat_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_right_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_stretch_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_r = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyDeclarations

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  int __pyx_t_3;

#line 11 "root_numpy/src/innerjoin.pyx"
  int __pyx_t_4;

#line 11 "root_numpy/src/innerjoin.pyx"
  int __pyx_t_5;

#line 11 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_6;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *(*__pyx_t_7)(PyObject *);

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_13 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_14 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_15 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_16 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  int __pyx_t_17;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannySetupContext("_blockwise_inner_join", 0);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_force_repeat);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_fk_name);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.pybuffer.buf = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.refcount = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.data = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.rcbuffer = &__pyx_pybuffer_repeat_indices;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.pybuffer.buf = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.refcount = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.data = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.rcbuffer = &__pyx_pybuffer_stretch_indices;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.pybuffer.buf = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.refcount = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.data = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.rcbuffer = &__pyx_pybuffer_right_indices;

  /* "root_numpy/src/innerjoin.pyx":14
 *                             force_repeat, fk_name):
 *     # foreign key is given by array of scalar not array of array
 *     scalar_mode = fk.dtype != 'O'             # <<<<<<<<<<<<<<
 * 
 *     # determine fk_name to be fk1 fk2 ....
 */

#line 14 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_fk, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 14, __pyx_L1_error)

#line 14 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 14 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_n_s_O, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 14, __pyx_L1_error)

#line 14 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 14 "root_numpy/src/innerjoin.pyx"
  __pyx_v_scalar_mode = __pyx_t_2;

#line 14 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":18
 *     # determine fk_name to be fk1 fk2 ....
 *     # whichever is the first one that doesn't collide
 *     if fk_name is None:             # <<<<<<<<<<<<<<
 *         i_fk_name = 0
 *         fk_name = 'fk'
 */

#line 18 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = (__pyx_v_fk_name == Py_None);

#line 18 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = (__pyx_t_3 != 0);

#line 18 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_4) {

    /* "root_numpy/src/innerjoin.pyx":19
 *     # whichever is the first one that doesn't collide
 *     if fk_name is None:
 *         i_fk_name = 0             # <<<<<<<<<<<<<<
 *         fk_name = 'fk'
 *         while fk_name in left or fk_name in right:
 */

#line 19 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_int_0);

#line 19 "root_numpy/src/innerjoin.pyx"
    __pyx_v_i_fk_name = __pyx_int_0;

    /* "root_numpy/src/innerjoin.pyx":20
 *     if fk_name is None:
 *         i_fk_name = 0
 *         fk_name = 'fk'             # <<<<<<<<<<<<<<
 *         while fk_name in left or fk_name in right:
 *             i_fk_name += 1
 */

#line 20 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_n_s_fk);

#line 20 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF_SET(__pyx_v_fk_name, __pyx_n_s_fk);

    /* "root_numpy/src/innerjoin.pyx":21
 *         i_fk_name = 0
 *         fk_name = 'fk'
 *         while fk_name in left or fk_name in right:             # <<<<<<<<<<<<<<
 *             i_fk_name += 1
 *             fk_name = 'fk%d' % i_fk_name
 */

#line 21 "root_numpy/src/innerjoin.pyx"
    while (1) {

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_fk_name, __pyx_v_left, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(9, 21, __pyx_L1_error)

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = (__pyx_t_3 != 0);

#line 21 "root_numpy/src/innerjoin.pyx"
      if (!__pyx_t_5) {

#line 21 "root_numpy/src/innerjoin.pyx"
      } else {

#line 21 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = __pyx_t_5;

#line 21 "root_numpy/src/innerjoin.pyx"
        goto __pyx_L6_bool_binop_done;

#line 21 "root_numpy/src/innerjoin.pyx"
      }

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_fk_name, __pyx_v_right, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(9, 21, __pyx_L1_error)

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = (__pyx_t_5 != 0);

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __pyx_t_3;

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_L6_bool_binop_done:;

#line 21 "root_numpy/src/innerjoin.pyx"
      if (!__pyx_t_4) break;

      /* "root_numpy/src/innerjoin.pyx":22
 *         fk_name = 'fk'
 *         while fk_name in left or fk_name in right:
 *             i_fk_name += 1             # <<<<<<<<<<<<<<
 *             fk_name = 'fk%d' % i_fk_name
 * 
 */

#line 22 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i_fk_name, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 22, __pyx_L1_error)

#line 22 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 22 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_v_i_fk_name, __pyx_t_2);

#line 22 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = 0;

      /* "root_numpy/src/innerjoin.pyx":23
 *         while fk_name in left or fk_name in right:
 *             i_fk_name += 1
 *             fk_name = 'fk%d' % i_fk_name             # <<<<<<<<<<<<<<
 * 
 *     force_repeat = [] if force_repeat is None else force_repeat
 */

#line 23 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_fk_d, __pyx_v_i_fk_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 23, __pyx_L1_error)

#line 23 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 23 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_v_fk_name, __pyx_t_2);

#line 23 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = 0;

#line 23 "root_numpy/src/innerjoin.pyx"
    }

    /* "root_numpy/src/innerjoin.pyx":18
 *     # determine fk_name to be fk1 fk2 ....
 *     # whichever is the first one that doesn't collide
 *     if fk_name is None:             # <<<<<<<<<<<<<<
 *         i_fk_name = 0
 *         fk_name = 'fk'
 */

#line 18 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":25
 *             fk_name = 'fk%d' % i_fk_name
 * 
 *     force_repeat = [] if force_repeat is None else force_repeat             # <<<<<<<<<<<<<<
 * 
 *     if scalar_mode:
 */

#line 25 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = (__pyx_v_force_repeat == Py_None);

#line 25 "root_numpy/src/innerjoin.pyx"
  if ((__pyx_t_4 != 0)) {

#line 25 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 25, __pyx_L1_error)

#line 25 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 25 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_t_1;

#line 25 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = 0;

#line 25 "root_numpy/src/innerjoin.pyx"
  } else {

#line 25 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_v_force_repeat);

#line 25 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_v_force_repeat;

#line 25 "root_numpy/src/innerjoin.pyx"
  }

#line 25 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF_SET(__pyx_v_force_repeat, __pyx_t_2);

#line 25 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":27
 *     force_repeat = [] if force_repeat is None else force_repeat
 * 
 *     if scalar_mode:             # <<<<<<<<<<<<<<
 *         # auto repeat everything on the left in scalar mode
 *         # not really repeat since there would be exactly one copy
 */

#line 27 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_scalar_mode); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(9, 27, __pyx_L1_error)

#line 27 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_4) {

    /* "root_numpy/src/innerjoin.pyx":30
 *         # auto repeat everything on the left in scalar mode
 *         # not really repeat since there would be exactly one copy
 *         force_repeat += left             # <<<<<<<<<<<<<<
 * 
 *     repeat_columns = [c for c in left if data.dtype[c] != 'O' or c in force_repeat]
 */

#line 30 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_force_repeat, __pyx_v_left); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 30, __pyx_L1_error)

#line 30 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 30 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF_SET(__pyx_v_force_repeat, __pyx_t_2);

#line 30 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/innerjoin.pyx":27
 *     force_repeat = [] if force_repeat is None else force_repeat
 * 
 *     if scalar_mode:             # <<<<<<<<<<<<<<
 *         # auto repeat everything on the left in scalar mode
 *         # not really repeat since there would be exactly one copy
 */

#line 27 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":32
 *         force_repeat += left
 * 
 *     repeat_columns = [c for c in left if data.dtype[c] != 'O' or c in force_repeat]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] repeat_indices = \
 *         np.array([data.dtype.names.index(x) for x in repeat_columns], np.int)
 */

#line 32 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 32 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_left)) || PyTuple_CheckExact(__pyx_v_left)) {

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = __pyx_v_left; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = NULL;

#line 32 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 32 "root_numpy/src/innerjoin.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_v_left); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
  }

#line 32 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 32 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_7)) {

#line 32 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 32 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 32 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 32 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
        #else

#line 32 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 32 "root_numpy/src/innerjoin.pyx"
        #endif

#line 32 "root_numpy/src/innerjoin.pyx"
      } else {

#line 32 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 32 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 32 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
        #else

#line 32 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 32 "root_numpy/src/innerjoin.pyx"
        #endif

#line 32 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 32 "root_numpy/src/innerjoin.pyx"
{

#line 32 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = __pyx_t_7(__pyx_t_1);

#line 32 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_8)) {

#line 32 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 32 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 32 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 32 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
        }

#line 32 "root_numpy/src/innerjoin.pyx"
        break;

#line 32 "root_numpy/src/innerjoin.pyx"
      }

#line 32 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 32 "root_numpy/src/innerjoin.pyx"
    }

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_8);

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = 0;

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_9 = PyObject_GetItem(__pyx_t_8, __pyx_v_c); if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_9, __pyx_n_s_O, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 32 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_3) {

#line 32 "root_numpy/src/innerjoin.pyx"
    } else {

#line 32 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __pyx_t_3;

#line 32 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L12_bool_binop_done;

#line 32 "root_numpy/src/innerjoin.pyx"
    }

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_c, __pyx_v_force_repeat, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = (__pyx_t_3 != 0);

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __pyx_t_5;

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_L12_bool_binop_done:;

#line 32 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_4) {

#line 32 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_v_c))) __PYX_ERR(9, 32, __pyx_L1_error)

#line 32 "root_numpy/src/innerjoin.pyx"
    }

#line 32 "root_numpy/src/innerjoin.pyx"
  }

#line 32 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 32 "root_numpy/src/innerjoin.pyx"
  __pyx_v_repeat_columns = ((PyObject*)__pyx_t_2);

#line 32 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":34
 *     repeat_columns = [c for c in left if data.dtype[c] != 'O' or c in force_repeat]
 *     cdef np.ndarray[np.int_t] repeat_indices = \
 *         np.array([data.dtype.names.index(x) for x in repeat_columns], np.int)             # <<<<<<<<<<<<<<
 * 
 *     stretch_columns = [c for c in left if c not in repeat_columns]
 */

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = __pyx_v_repeat_columns; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 34 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;

#line 34 "root_numpy/src/innerjoin.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_10); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
    #else

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
    #endif

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_11)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_names); if (unlikely(!__pyx_t_12)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_12);

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_index); if (unlikely(!__pyx_t_11)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = NULL;

#line 34 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);

#line 34 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_12)) {

#line 34 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);

#line 34 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_12);

#line 34 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 34 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_11, function);

#line 34 "root_numpy/src/innerjoin.pyx"
      }

#line 34 "root_numpy/src/innerjoin.pyx"
    }

#line 34 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_12) {

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_x); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
    } else {

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 34 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_v_x);

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_13, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
    }

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_10))) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  }

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = NULL;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);

#line 34 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_8)) {

#line 34 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_9, function);

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = 1;

#line 34 "root_numpy/src/innerjoin.pyx"
    }

#line 34 "root_numpy/src/innerjoin.pyx"
  }

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_11 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_11);

#line 34 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_8) {

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 34 "root_numpy/src/innerjoin.pyx"
  }

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 34 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_6, __pyx_t_1);

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_6, __pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 34, __pyx_L1_error)

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_2);

#line 34 "root_numpy/src/innerjoin.pyx"
  {

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 34 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_v_repeat_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.buf = NULL;

#line 34 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 33, __pyx_L1_error)
    } else {
#line 34 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_repeat_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.shape[0];

#line 34 "root_numpy/src/innerjoin.pyx"
    }

#line 34 "root_numpy/src/innerjoin.pyx"
  }

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_v_repeat_indices = ((PyArrayObject *)__pyx_t_2);

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":36
 *         np.array([data.dtype.names.index(x) for x in repeat_columns], np.int)
 * 
 *     stretch_columns = [c for c in left if c not in repeat_columns]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] stretch_indices = \
 *         np.array([data.dtype.names.index(x) for x in stretch_columns], np.int)
 */

#line 36 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 36, __pyx_L1_error)

#line 36 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 36 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_left)) || PyTuple_CheckExact(__pyx_v_left)) {

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_9 = __pyx_v_left; __Pyx_INCREF(__pyx_t_9); __pyx_t_6 = 0;

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = NULL;

#line 36 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 36 "root_numpy/src/innerjoin.pyx"
__pyx_t_9 = PyObject_GetIter(__pyx_v_left); if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 36, __pyx_L1_error)

#line 36 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 36, __pyx_L1_error)

#line 36 "root_numpy/src/innerjoin.pyx"
  }

#line 36 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 36 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_7)) {

#line 36 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_9))) {

#line 36 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_9)) break;

#line 36 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 36 "root_numpy/src/innerjoin.pyx"
        __pyx_t_11 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_11); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 36, __pyx_L1_error)

#line 36 "root_numpy/src/innerjoin.pyx"
        #else

#line 36 "root_numpy/src/innerjoin.pyx"
        __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_11)) __PYX_ERR(9, 36, __pyx_L1_error)

#line 36 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_11);

#line 36 "root_numpy/src/innerjoin.pyx"
        #endif

#line 36 "root_numpy/src/innerjoin.pyx"
      } else {

#line 36 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_9)) break;

#line 36 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 36 "root_numpy/src/innerjoin.pyx"
        __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_11); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 36, __pyx_L1_error)

#line 36 "root_numpy/src/innerjoin.pyx"
        #else

#line 36 "root_numpy/src/innerjoin.pyx"
        __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_11)) __PYX_ERR(9, 36, __pyx_L1_error)

#line 36 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_11);

#line 36 "root_numpy/src/innerjoin.pyx"
        #endif

#line 36 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 36 "root_numpy/src/innerjoin.pyx"
{

#line 36 "root_numpy/src/innerjoin.pyx"
      __pyx_t_11 = __pyx_t_7(__pyx_t_9);

#line 36 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_11)) {

#line 36 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 36 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 36 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 36 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 36, __pyx_L1_error)

#line 36 "root_numpy/src/innerjoin.pyx"
        }

#line 36 "root_numpy/src/innerjoin.pyx"
        break;

#line 36 "root_numpy/src/innerjoin.pyx"
      }

#line 36 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_11);

#line 36 "root_numpy/src/innerjoin.pyx"
    }

#line 36 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_11);

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_11 = 0;

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_c, __pyx_v_repeat_columns, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(9, 36, __pyx_L1_error)

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = (__pyx_t_4 != 0);

#line 36 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_5) {

#line 36 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_v_c))) __PYX_ERR(9, 36, __pyx_L1_error)

#line 36 "root_numpy/src/innerjoin.pyx"
    }

#line 36 "root_numpy/src/innerjoin.pyx"
  }

#line 36 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 36 "root_numpy/src/innerjoin.pyx"
  __pyx_v_stretch_columns = ((PyObject*)__pyx_t_2);

#line 36 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":38
 *     stretch_columns = [c for c in left if c not in repeat_columns]
 *     cdef np.ndarray[np.int_t] stretch_indices = \
 *         np.array([data.dtype.names.index(x) for x in stretch_columns], np.int)             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.int_t] right_indices = \
 */

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_11)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_11);

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = __pyx_v_stretch_columns; __Pyx_INCREF(__pyx_t_10); __pyx_t_6 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 38 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_10)) break;

#line 38 "root_numpy/src/innerjoin.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
    #else

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
    #endif

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_names); if (unlikely(!__pyx_t_13)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_13);

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = NULL;

#line 38 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_8);

#line 38 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_13)) {

#line 38 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 38 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_13);

#line 38 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 38 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_8, function);

#line 38 "root_numpy/src/innerjoin.pyx"
      }

#line 38 "root_numpy/src/innerjoin.pyx"
    }

#line 38 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_13) {

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
    } else {

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_13); __pyx_t_13 = NULL;

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 38 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_v_x);

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
    }

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_1))) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  }

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_10);

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = NULL;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);

#line 38 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_10)) {

#line 38 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_10);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_11, function);

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = 1;

#line 38 "root_numpy/src/innerjoin.pyx"
    }

#line 38 "root_numpy/src/innerjoin.pyx"
  }

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 38 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_10) {

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __pyx_t_10 = NULL;

#line 38 "root_numpy/src/innerjoin.pyx"
  }

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 38 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_6, __pyx_t_9);

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_6, __pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 38, __pyx_L1_error)

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_2);

#line 38 "root_numpy/src/innerjoin.pyx"
  {

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 38 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_v_stretch_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.buf = NULL;

#line 38 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 37, __pyx_L1_error)
    } else {
#line 38 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_stretch_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.shape[0];

#line 38 "root_numpy/src/innerjoin.pyx"
    }

#line 38 "root_numpy/src/innerjoin.pyx"
  }

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_15 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_v_stretch_indices = ((PyArrayObject *)__pyx_t_2);

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":41
 * 
 *     cdef np.ndarray[np.int_t] right_indices = \
 *         np.array([data.dtype.names.index(x) for x in right], np.int)             # <<<<<<<<<<<<<<
 * 
 *     # making new dtype
 */

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_11);

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_11);

#line 41 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_right)) || PyTuple_CheckExact(__pyx_v_right)) {

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = __pyx_v_right; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 41 "root_numpy/src/innerjoin.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_v_right); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
  }

#line 41 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 41 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_7)) {

#line 41 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 41 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 41 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 41 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
        #else

#line 41 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
        #endif

#line 41 "root_numpy/src/innerjoin.pyx"
      } else {

#line 41 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 41 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 41 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
        #else

#line 41 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
        #endif

#line 41 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 41 "root_numpy/src/innerjoin.pyx"
{

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = __pyx_t_7(__pyx_t_1);

#line 41 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_9)) {

#line 41 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 41 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 41 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 41 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
        }

#line 41 "root_numpy/src/innerjoin.pyx"
        break;

#line 41 "root_numpy/src/innerjoin.pyx"
      }

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
    }

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_9 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_names); if (unlikely(!__pyx_t_12)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_12);

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_index); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);

#line 41 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_12)) {

#line 41 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);

#line 41 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_12);

#line 41 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 41 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_10, function);

#line 41 "root_numpy/src/innerjoin.pyx"
      }

#line 41 "root_numpy/src/innerjoin.pyx"
    }

#line 41 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_12) {

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_x); if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
    } else {

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 41 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_v_x);

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_13, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    }

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_11, (PyObject*)__pyx_t_9))) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  }

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int); if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);

#line 41 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_1)) {

#line 41 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_1);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_8, function);

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = 1;

#line 41 "root_numpy/src/innerjoin.pyx"
    }

#line 41 "root_numpy/src/innerjoin.pyx"
  }

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_10);

#line 41 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_1) {

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1); __pyx_t_1 = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
  }

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_11);

#line 41 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_6, __pyx_t_11);

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_6, __pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_11 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 41, __pyx_L1_error)

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_2);

#line 41 "root_numpy/src/innerjoin.pyx"
  {

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 41 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_v_right_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.buf = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 40, __pyx_L1_error)
    } else {
#line 41 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_right_indices.diminfo[0].strides = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_indices.diminfo[0].shape = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.shape[0];

#line 41 "root_numpy/src/innerjoin.pyx"
    }

#line 41 "root_numpy/src/innerjoin.pyx"
  }

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_16 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_v_right_indices = ((PyArrayObject *)__pyx_t_2);

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":44
 * 
 *     # making new dtype
 *     new_dtype = []             # <<<<<<<<<<<<<<
 *     for c in left: # preserve order
 *         if c in repeat_columns:
 */

#line 44 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 44, __pyx_L1_error)

#line 44 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 44 "root_numpy/src/innerjoin.pyx"
  __pyx_v_new_dtype = ((PyObject*)__pyx_t_2);

#line 44 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":45
 *     # making new dtype
 *     new_dtype = []
 *     for c in left: # preserve order             # <<<<<<<<<<<<<<
 *         if c in repeat_columns:
 *             new_dtype.append((c, data.dtype[c]))
 */

#line 45 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_left)) || PyTuple_CheckExact(__pyx_v_left)) {

#line 45 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_v_left; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;

#line 45 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = NULL;

#line 45 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 45 "root_numpy/src/innerjoin.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_left); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 45, __pyx_L1_error)

#line 45 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 45 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 45, __pyx_L1_error)

#line 45 "root_numpy/src/innerjoin.pyx"
  }

#line 45 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 45 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_7)) {

#line 45 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 45 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 45 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 45 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 45, __pyx_L1_error)

#line 45 "root_numpy/src/innerjoin.pyx"
        #else

#line 45 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 45, __pyx_L1_error)

#line 45 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 45 "root_numpy/src/innerjoin.pyx"
        #endif

#line 45 "root_numpy/src/innerjoin.pyx"
      } else {

#line 45 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 45 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 45 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 45, __pyx_L1_error)

#line 45 "root_numpy/src/innerjoin.pyx"
        #else

#line 45 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 45, __pyx_L1_error)

#line 45 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 45 "root_numpy/src/innerjoin.pyx"
        #endif

#line 45 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 45 "root_numpy/src/innerjoin.pyx"
{

#line 45 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = __pyx_t_7(__pyx_t_2);

#line 45 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_8)) {

#line 45 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 45 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 45 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 45 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 45, __pyx_L1_error)

#line 45 "root_numpy/src/innerjoin.pyx"
        }

#line 45 "root_numpy/src/innerjoin.pyx"
        break;

#line 45 "root_numpy/src/innerjoin.pyx"
      }

#line 45 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 45 "root_numpy/src/innerjoin.pyx"
    }

#line 45 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_8);

#line 45 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = 0;

    /* "root_numpy/src/innerjoin.pyx":46
 *     new_dtype = []
 *     for c in left: # preserve order
 *         if c in repeat_columns:             # <<<<<<<<<<<<<<
 *             new_dtype.append((c, data.dtype[c]))
 *         elif c in stretch_columns:
 */

#line 46 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_c, __pyx_v_repeat_columns, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(9, 46, __pyx_L1_error)

#line 46 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = (__pyx_t_5 != 0);

#line 46 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_4) {

      /* "root_numpy/src/innerjoin.pyx":47
 *     for c in left: # preserve order
 *         if c in repeat_columns:
 *             new_dtype.append((c, data.dtype[c]))             # <<<<<<<<<<<<<<
 *         elif c in stretch_columns:
 *             new_dtype.append((c, data[c][0].dtype))
 */

#line 47 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 47, __pyx_L1_error)

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 47 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = PyObject_GetItem(__pyx_t_8, __pyx_v_c); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 47, __pyx_L1_error)

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 47 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 47, __pyx_L1_error)

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_c);

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_c);

#line 47 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_c);

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_10);

#line 47 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);

#line 47 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = 0;

#line 47 "root_numpy/src/innerjoin.pyx"
      __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_8); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(9, 47, __pyx_L1_error)

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "root_numpy/src/innerjoin.pyx":46
 *     new_dtype = []
 *     for c in left: # preserve order
 *         if c in repeat_columns:             # <<<<<<<<<<<<<<
 *             new_dtype.append((c, data.dtype[c]))
 *         elif c in stretch_columns:
 */

#line 46 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L25;

#line 46 "root_numpy/src/innerjoin.pyx"
    }

    /* "root_numpy/src/innerjoin.pyx":48
 *         if c in repeat_columns:
 *             new_dtype.append((c, data.dtype[c]))
 *         elif c in stretch_columns:             # <<<<<<<<<<<<<<
 *             new_dtype.append((c, data[c][0].dtype))
 *     for c in right: # preserve order
 */

#line 48 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_c, __pyx_v_stretch_columns, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(9, 48, __pyx_L1_error)

#line 48 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = (__pyx_t_4 != 0);

#line 48 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_5) {

      /* "root_numpy/src/innerjoin.pyx":49
 *             new_dtype.append((c, data.dtype[c]))
 *         elif c in stretch_columns:
 *             new_dtype.append((c, data[c][0].dtype))             # <<<<<<<<<<<<<<
 *     for c in right: # preserve order
 *         new_dtype.append((c, data[c][0].dtype))
 */

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = PyObject_GetItem(__pyx_v_data, __pyx_v_c); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_c);

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_c);

#line 49 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_c);

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_8);

#line 49 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_8);

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = 0;

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_10); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "root_numpy/src/innerjoin.pyx":48
 *         if c in repeat_columns:
 *             new_dtype.append((c, data.dtype[c]))
 *         elif c in stretch_columns:             # <<<<<<<<<<<<<<
 *             new_dtype.append((c, data[c][0].dtype))
 *     for c in right: # preserve order
 */

#line 48 "root_numpy/src/innerjoin.pyx"
    }

#line 48 "root_numpy/src/innerjoin.pyx"
    __pyx_L25:;

    /* "root_numpy/src/innerjoin.pyx":45
 *     # making new dtype
 *     new_dtype = []
 *     for c in left: # preserve order             # <<<<<<<<<<<<<<
 *         if c in repeat_columns:
 *             new_dtype.append((c, data.dtype[c]))
 */

#line 45 "root_numpy/src/innerjoin.pyx"
  }

#line 45 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":50
 *         elif c in stretch_columns:
 *             new_dtype.append((c, data[c][0].dtype))
 *     for c in right: # preserve order             # <<<<<<<<<<<<<<
 *         new_dtype.append((c, data[c][0].dtype))
 * 
 */

#line 50 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_right)) || PyTuple_CheckExact(__pyx_v_right)) {

#line 50 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_v_right; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;

#line 50 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = NULL;

#line 50 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 50 "root_numpy/src/innerjoin.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_right); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 50, __pyx_L1_error)

#line 50 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 50 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 50, __pyx_L1_error)

#line 50 "root_numpy/src/innerjoin.pyx"
  }

#line 50 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 50 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_7)) {

#line 50 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 50 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 50 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 50 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_10); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 50, __pyx_L1_error)

#line 50 "root_numpy/src/innerjoin.pyx"
        #else

#line 50 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 50, __pyx_L1_error)

#line 50 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 50 "root_numpy/src/innerjoin.pyx"
        #endif

#line 50 "root_numpy/src/innerjoin.pyx"
      } else {

#line 50 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 50 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 50 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_10); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 50, __pyx_L1_error)

#line 50 "root_numpy/src/innerjoin.pyx"
        #else

#line 50 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 50, __pyx_L1_error)

#line 50 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 50 "root_numpy/src/innerjoin.pyx"
        #endif

#line 50 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 50 "root_numpy/src/innerjoin.pyx"
{

#line 50 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = __pyx_t_7(__pyx_t_2);

#line 50 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_10)) {

#line 50 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 50 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 50 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 50 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 50, __pyx_L1_error)

#line 50 "root_numpy/src/innerjoin.pyx"
        }

#line 50 "root_numpy/src/innerjoin.pyx"
        break;

#line 50 "root_numpy/src/innerjoin.pyx"
      }

#line 50 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 50 "root_numpy/src/innerjoin.pyx"
    }

#line 50 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_10);

#line 50 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = 0;

    /* "root_numpy/src/innerjoin.pyx":51
 *             new_dtype.append((c, data[c][0].dtype))
 *     for c in right: # preserve order
 *         new_dtype.append((c, data[c][0].dtype))             # <<<<<<<<<<<<<<
 * 
 *     new_dtype.append((fk_name, fk[0].dtype))
 */

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = PyObject_GetItem(__pyx_v_data, __pyx_v_c); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 51, __pyx_L1_error)

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 51, __pyx_L1_error)

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_dtype); if (unlikely(!__pyx_t_10)) __PYX_ERR(9, 51, __pyx_L1_error)

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 51, __pyx_L1_error)

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_v_c);

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_v_c);

#line 51 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_c);

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_10);

#line 51 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = 0;

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_8); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(9, 51, __pyx_L1_error)

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "root_numpy/src/innerjoin.pyx":50
 *         elif c in stretch_columns:
 *             new_dtype.append((c, data[c][0].dtype))
 *     for c in right: # preserve order             # <<<<<<<<<<<<<<
 *         new_dtype.append((c, data[c][0].dtype))
 * 
 */

#line 50 "root_numpy/src/innerjoin.pyx"
  }

#line 50 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":53
 *         new_dtype.append((c, data[c][0].dtype))
 * 
 *     new_dtype.append((fk_name, fk[0].dtype))             # <<<<<<<<<<<<<<
 *     ret = None
 * 
 */

#line 53 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_fk, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 53, __pyx_L1_error)

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 53 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 53, __pyx_L1_error)

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 53 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 53, __pyx_L1_error)

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_fk_name);

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_v_fk_name);

#line 53 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fk_name);

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 53 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);

#line 53 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = 0;

#line 53 "root_numpy/src/innerjoin.pyx"
  __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_2); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(9, 53, __pyx_L1_error)

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":54
 * 
 *     new_dtype.append((fk_name, fk[0].dtype))
 *     ret = None             # <<<<<<<<<<<<<<
 * 
 *     if scalar_mode: # scalar key mode
 */

#line 54 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(Py_None);

#line 54 "root_numpy/src/innerjoin.pyx"
  __pyx_v_ret = Py_None;

  /* "root_numpy/src/innerjoin.pyx":56
 *     ret = None
 * 
 *     if scalar_mode: # scalar key mode             # <<<<<<<<<<<<<<
 *         ret = _scalar_fk_inner_join(
 *             data, right, fk, fk_name, new_dtype,
 */

#line 56 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_scalar_mode); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(9, 56, __pyx_L1_error)

#line 56 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_5) {

    /* "root_numpy/src/innerjoin.pyx":58
 *     if scalar_mode: # scalar key mode
 *         ret = _scalar_fk_inner_join(
 *             data, right, fk, fk_name, new_dtype,             # <<<<<<<<<<<<<<
 *             repeat_columns, stretch_columns,
 *             repeat_indices, stretch_indices, right_indices)
 */

#line 58 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 58, __pyx_L1_error)

#line 58 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_v_fk) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_fk, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 58, __pyx_L1_error)

    /* "root_numpy/src/innerjoin.pyx":57
 * 
 *     if scalar_mode: # scalar key mode
 *         ret = _scalar_fk_inner_join(             # <<<<<<<<<<<<<<
 *             data, right, fk, fk_name, new_dtype,
 *             repeat_columns, stretch_columns,
 */

#line 57 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_f_13_librootnumpy__scalar_fk_inner_join(((PyArrayObject *)__pyx_v_data), __pyx_v_right, ((PyArrayObject *)__pyx_v_fk), __pyx_v_fk_name, __pyx_v_new_dtype, __pyx_v_repeat_columns, __pyx_v_stretch_columns, ((PyArrayObject *)__pyx_v_repeat_indices), ((PyArrayObject *)__pyx_v_stretch_indices), ((PyArrayObject *)__pyx_v_right_indices)); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 57 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_2);

#line 57 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/innerjoin.pyx":56
 *     ret = None
 * 
 *     if scalar_mode: # scalar key mode             # <<<<<<<<<<<<<<
 *         ret = _scalar_fk_inner_join(
 *             data, right, fk, fk_name, new_dtype,
 */

#line 56 "root_numpy/src/innerjoin.pyx"
    goto __pyx_L28;

#line 56 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":62
 *             repeat_indices, stretch_indices, right_indices)
 *     else: # vector key mode
 *         ret = _vector_fk_inner_join(             # <<<<<<<<<<<<<<
 *             data, right, fk, fk_name, new_dtype,
 *             repeat_columns, stretch_columns,
 */

#line 62 "root_numpy/src/innerjoin.pyx"
  /*else*/ {

    /* "root_numpy/src/innerjoin.pyx":63
 *     else: # vector key mode
 *         ret = _vector_fk_inner_join(
 *             data, right, fk, fk_name, new_dtype,             # <<<<<<<<<<<<<<
 *             repeat_columns, stretch_columns,
 *             repeat_indices, stretch_indices, right_indices)
 */

#line 63 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 63, __pyx_L1_error)

#line 63 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_v_fk) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_fk, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 63, __pyx_L1_error)

    /* "root_numpy/src/innerjoin.pyx":62
 *             repeat_indices, stretch_indices, right_indices)
 *     else: # vector key mode
 *         ret = _vector_fk_inner_join(             # <<<<<<<<<<<<<<
 *             data, right, fk, fk_name, new_dtype,
 *             repeat_columns, stretch_columns,
 */

#line 62 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_f_13_librootnumpy__vector_fk_inner_join(((PyArrayObject *)__pyx_v_data), __pyx_v_right, ((PyArrayObject *)__pyx_v_fk), __pyx_v_fk_name, __pyx_v_new_dtype, __pyx_v_repeat_columns, __pyx_v_stretch_columns, ((PyArrayObject *)__pyx_v_repeat_indices), ((PyArrayObject *)__pyx_v_stretch_indices), ((PyArrayObject *)__pyx_v_right_indices)); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 62 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_2);

#line 62 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = 0;

#line 62 "root_numpy/src/innerjoin.pyx"
  }

#line 62 "root_numpy/src/innerjoin.pyx"
  __pyx_L28:;

  /* "root_numpy/src/innerjoin.pyx":66
 *             repeat_columns, stretch_columns,
 *             repeat_indices, stretch_indices, right_indices)
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 66 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 66 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_ret);

#line 66 "root_numpy/src/innerjoin.pyx"
  __pyx_r = __pyx_v_ret;

#line 66 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/innerjoin.pyx":11
 * # need to INCREF it
 * 
 * cpdef _blockwise_inner_join(data, left, fk, right,             # <<<<<<<<<<<<<<
 *                             force_repeat, fk_name):
 *     # foreign key is given by array of scalar not array of array
 */

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
  /* function exit code */

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L1_error:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_12);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 11 "root_numpy/src/innerjoin.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 11 "root_numpy/src/innerjoin.pyx"
    __Pyx_PyThreadState_declare

#line 11 "root_numpy/src/innerjoin.pyx"
    __Pyx_PyThreadState_assign

#line 11 "root_numpy/src/innerjoin.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 11 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_AddTraceback("_librootnumpy._blockwise_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_r = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L2;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L0:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L2:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_scalar_mode);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_i_fk_name);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_repeat_columns);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_repeat_indices);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_stretch_columns);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_stretch_indices);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_right_indices);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_new_dtype);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_c);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_ret);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_x);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_force_repeat);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_fk_name);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/innerjoin.pyx"
  return __pyx_r;

#line 11 "root_numpy/src/innerjoin.pyx"
}

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
/* Python wrapper */

#line 11 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_pw_13_librootnumpy_129_blockwise_inner_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 11 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_pw_13_librootnumpy_129_blockwise_inner_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_left = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_fk = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_right = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_force_repeat = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_fk_name = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_r = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyDeclarations

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannySetupContext("_blockwise_inner_join (wrapper)", 0);

#line 11 "root_numpy/src/innerjoin.pyx"
  {

#line 11 "root_numpy/src/innerjoin.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_left,&__pyx_n_s_fk,&__pyx_n_s_right,&__pyx_n_s_force_repeat,&__pyx_n_s_fk_name,0};

#line 11 "root_numpy/src/innerjoin.pyx"
    PyObject* values[6] = {0,0,0,0,0,0};

#line 11 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__pyx_kwds)) {

#line 11 "root_numpy/src/innerjoin.pyx"
      Py_ssize_t kw_args;

#line 11 "root_numpy/src/innerjoin.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 11 "root_numpy/src/innerjoin.pyx"
      switch (pos_args) {
        case  6: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 11 "root_numpy/src/innerjoin.pyx"
        case  0: break;
        default: 
#line 11 "root_numpy/src/innerjoin.pyx"
goto __pyx_L5_argtuple_error;

#line 11 "root_numpy/src/innerjoin.pyx"
      }

#line 11 "root_numpy/src/innerjoin.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 11 "root_numpy/src/innerjoin.pyx"
      switch (pos_args) {

#line 11 "root_numpy/src/innerjoin.pyx"
        case  0:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else 
#line 11 "root_numpy/src/innerjoin.pyx"
goto __pyx_L5_argtuple_error;

#line 11 "root_numpy/src/innerjoin.pyx"
        case  1:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_left)) != 0)) kw_args--;

#line 11 "root_numpy/src/innerjoin.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, 1); 
#line 11 "root_numpy/src/innerjoin.pyx"
__PYX_ERR(9, 11, __pyx_L3_error)

#line 11 "root_numpy/src/innerjoin.pyx"
        }

#line 11 "root_numpy/src/innerjoin.pyx"
        case  2:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fk)) != 0)) kw_args--;

#line 11 "root_numpy/src/innerjoin.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, 2); 
#line 11 "root_numpy/src/innerjoin.pyx"
__PYX_ERR(9, 11, __pyx_L3_error)

#line 11 "root_numpy/src/innerjoin.pyx"
        }

#line 11 "root_numpy/src/innerjoin.pyx"
        case  3:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_right)) != 0)) kw_args--;

#line 11 "root_numpy/src/innerjoin.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, 3); 
#line 11 "root_numpy/src/innerjoin.pyx"
__PYX_ERR(9, 11, __pyx_L3_error)

#line 11 "root_numpy/src/innerjoin.pyx"
        }

#line 11 "root_numpy/src/innerjoin.pyx"
        case  4:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force_repeat)) != 0)) kw_args--;

#line 11 "root_numpy/src/innerjoin.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, 4); 
#line 11 "root_numpy/src/innerjoin.pyx"
__PYX_ERR(9, 11, __pyx_L3_error)

#line 11 "root_numpy/src/innerjoin.pyx"
        }

#line 11 "root_numpy/src/innerjoin.pyx"
        case  5:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fk_name)) != 0)) kw_args--;

#line 11 "root_numpy/src/innerjoin.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, 5); 
#line 11 "root_numpy/src/innerjoin.pyx"
__PYX_ERR(9, 11, __pyx_L3_error)

#line 11 "root_numpy/src/innerjoin.pyx"
        }

#line 11 "root_numpy/src/innerjoin.pyx"
      }

#line 11 "root_numpy/src/innerjoin.pyx"
      if (unlikely(kw_args > 0)) {

#line 11 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_blockwise_inner_join") < 0)) __PYX_ERR(9, 11, __pyx_L3_error)

#line 11 "root_numpy/src/innerjoin.pyx"
      }

#line 11 "root_numpy/src/innerjoin.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {

#line 11 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L5_argtuple_error;

#line 11 "root_numpy/src/innerjoin.pyx"
    } else {

#line 11 "root_numpy/src/innerjoin.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 11 "root_numpy/src/innerjoin.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 11 "root_numpy/src/innerjoin.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 11 "root_numpy/src/innerjoin.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 11 "root_numpy/src/innerjoin.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 11 "root_numpy/src/innerjoin.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 11 "root_numpy/src/innerjoin.pyx"
    }

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_data = values[0];

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_left = values[1];

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_fk = values[2];

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_right = values[3];

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_force_repeat = values[4];

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_fk_name = values[5];

#line 11 "root_numpy/src/innerjoin.pyx"
  }

#line 11 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); 
#line 11 "root_numpy/src/innerjoin.pyx"
__PYX_ERR(9, 11, __pyx_L3_error)

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L3_error:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_AddTraceback("_librootnumpy._blockwise_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/innerjoin.pyx"
  return NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 11 "root_numpy/src/innerjoin.pyx"
__pyx_pf_13_librootnumpy_128_blockwise_inner_join(__pyx_self, __pyx_v_data, __pyx_v_left, __pyx_v_fk, __pyx_v_right, __pyx_v_force_repeat, __pyx_v_fk_name);

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
  /* function exit code */

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/innerjoin.pyx"
  return __pyx_r;

#line 11 "root_numpy/src/innerjoin.pyx"
}

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_pf_13_librootnumpy_128_blockwise_inner_join(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_left, PyObject *__pyx_v_fk, PyObject *__pyx_v_right, PyObject *__pyx_v_force_repeat, PyObject *__pyx_v_fk_name) {

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_r = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyDeclarations

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannySetupContext("_blockwise_inner_join", 0);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = __pyx_f_13_librootnumpy__blockwise_inner_join(__pyx_v_data, __pyx_v_left, __pyx_v_fk, __pyx_v_right, __pyx_v_force_repeat, __pyx_v_fk_name, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 11, __pyx_L1_error)

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_r = __pyx_t_1;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L0;

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
  /* function exit code */

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L1_error:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_AddTraceback("_librootnumpy._blockwise_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_r = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L0:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/innerjoin.pyx"
  return __pyx_r;

#line 11 "root_numpy/src/innerjoin.pyx"
}

/* "root_numpy/src/innerjoin.pyx":69
 * 
 * 
 * cdef _vector_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name,
 *                            new_dtype,
 */

#line 69 "root_numpy/src/innerjoin.pyx"


#line 69 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_f_13_librootnumpy__vector_fk_inner_join(PyArrayObject *__pyx_v_data, PyObject *__pyx_v_right, PyArrayObject *__pyx_v_fk, PyObject *__pyx_v_fk_name, PyObject *__pyx_v_new_dtype, PyObject *__pyx_v_repeat_columns, PyObject *__pyx_v_stretch_columns, PyArrayObject *__pyx_v_repeat_indices, PyArrayObject *__pyx_v_stretch_indices, PyArrayObject *__pyx_v_right_indices) {
  long __pyx_v_ndata
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_first_right = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_good_fk_index = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nresult
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_data
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_max_fks
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_good_index = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_fks = NULL
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_ret = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_repeat_result_indices = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_stretch_result_indices = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_right_result_indices = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  int __pyx_v_fk_result_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nrepeat
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nstretch
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nright
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_left_good_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_right_good_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_land
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_source
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_repeat
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_stretch
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_right
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_ret
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_fk
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_this_n_good_fk
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_tmp_good_fk_index = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_tmp_fk = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_x = NULL
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_good_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_good_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_repeat_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_repeat_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_right_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_right_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_stretch_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_stretch_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_tmp_good_fk_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_tmp_good_fk_index
#line 69 "root_numpy/src/innerjoin.pyx"
;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_r = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyDeclarations

#line 69 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_1;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  long __pyx_t_7;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_8 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  int __pyx_t_9;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *(*__pyx_t_13)(PyObject *);

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_14 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_15 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_16 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_17 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_18 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_19 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_20 = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  long __pyx_t_21;

#line 69 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_22;

#line 69 "root_numpy/src/innerjoin.pyx"
  long __pyx_t_23;

#line 69 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_24;

#line 69 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_25;

#line 69 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_26;

#line 69 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_27;

#line 69 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_28;

#line 69 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_29;

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannySetupContext("_vector_fk_inner_join", 0);

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_good_index.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_good_index.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_good_index.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_good_index.rcbuffer = &__pyx_pybuffer_good_index;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_result_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_result_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_result_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_result_indices.rcbuffer = &__pyx_pybuffer_repeat_result_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_result_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_result_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_result_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_result_indices.rcbuffer = &__pyx_pybuffer_stretch_result_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_result_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_result_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_result_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_result_indices.rcbuffer = &__pyx_pybuffer_right_result_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_tmp_good_fk_index.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_tmp_good_fk_index.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_tmp_good_fk_index.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_tmp_good_fk_index.rcbuffer = &__pyx_pybuffer_tmp_good_fk_index;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.rcbuffer = &__pyx_pybuffer_repeat_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.rcbuffer = &__pyx_pybuffer_stretch_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.rcbuffer = &__pyx_pybuffer_right_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  {

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 69 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_repeat_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(9, 69, __pyx_L1_error)

#line 69 "root_numpy/src/innerjoin.pyx"
  }

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.shape[0];

#line 69 "root_numpy/src/innerjoin.pyx"
  {

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 69 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_stretch_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(9, 69, __pyx_L1_error)

#line 69 "root_numpy/src/innerjoin.pyx"
  }

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.shape[0];

#line 69 "root_numpy/src/innerjoin.pyx"
  {

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 69 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_right_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(9, 69, __pyx_L1_error)

#line 69 "root_numpy/src/innerjoin.pyx"
  }

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.diminfo[0].strides = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_indices.diminfo[0].shape = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/innerjoin.pyx":76
 *                            np.ndarray[np.int_t] stretch_indices,
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 */

#line 76 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_data)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 76, __pyx_L1_error)

#line 76 "root_numpy/src/innerjoin.pyx"
  __pyx_v_ndata = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":77
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 *     cdef long nresult = 0
 */

#line 77 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_right, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 77, __pyx_L1_error)

#line 77 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 77 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_data), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 77, __pyx_L1_error)

#line 77 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 77 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 77 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 77, __pyx_L1_error)

#line 77 "root_numpy/src/innerjoin.pyx"
  __pyx_v_first_right = ((PyArrayObject *)__pyx_t_3);

#line 77 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":78
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')             # <<<<<<<<<<<<<<
 *     cdef long nresult = 0
 *     cdef long i_data = 0
 */

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 78, __pyx_L1_error)

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 78, __pyx_L1_error)

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_ndata); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 78, __pyx_L1_error)

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = NULL;

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 78 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 78 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 78 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_5)) {

#line 78 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 78 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 78 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 78 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 78 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 78 "root_numpy/src/innerjoin.pyx"
    }

#line 78 "root_numpy/src/innerjoin.pyx"
  }

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 78, __pyx_L1_error)

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 78 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_5) {

#line 78 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 78 "root_numpy/src/innerjoin.pyx"
  }

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 78 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_t_2);

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_n_s_O);

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_n_s_O);

#line 78 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_n_s_O);

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 78, __pyx_L1_error)

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 78 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 78, __pyx_L1_error)

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_v_good_fk_index = ((PyArrayObject *)__pyx_t_3);

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":79
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 *     cdef long nresult = 0             # <<<<<<<<<<<<<<
 *     cdef long i_data = 0
 *     cdef long max_fks
 */

#line 79 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nresult = 0;

  /* "root_numpy/src/innerjoin.pyx":80
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 *     cdef long nresult = 0
 *     cdef long i_data = 0             # <<<<<<<<<<<<<<
 *     cdef long max_fks
 *     cdef np.ndarray[np.int_t] good_index
 */

#line 80 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_data = 0;

  /* "root_numpy/src/innerjoin.pyx":84
 *     cdef np.ndarray[np.int_t] good_index
 * 
 *     for i_data from 0 <= i_data < ndata:             # <<<<<<<<<<<<<<
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 */

#line 84 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __pyx_v_ndata;

#line 84 "root_numpy/src/innerjoin.pyx"
  for (__pyx_v_i_data = 0; __pyx_v_i_data < __pyx_t_7; __pyx_v_i_data++) {

    /* "root_numpy/src/innerjoin.pyx":85
 * 
 *     for i_data from 0 <= i_data < ndata:
 *         max_fks = len(first_right[i_data])             # <<<<<<<<<<<<<<
 *         fks = fk[i_data]
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 */

#line 85 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_first_right), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 85, __pyx_L1_error)

#line 85 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 85 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 85, __pyx_L1_error)

#line 85 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 85 "root_numpy/src/innerjoin.pyx"
    __pyx_v_max_fks = __pyx_t_1;

    /* "root_numpy/src/innerjoin.pyx":86
 *     for i_data from 0 <= i_data < ndata:
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]             # <<<<<<<<<<<<<<
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 *         nresult += len(good_index)
 */

#line 86 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 86, __pyx_L1_error)

#line 86 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 86 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_fks, __pyx_t_3);

#line 86 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = 0;

    /* "root_numpy/src/innerjoin.pyx":87
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))             # <<<<<<<<<<<<<<
 *         nresult += len(good_index)
 *         good_fk_index[i_data] = good_index
 */

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_flatnonzero); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_fks, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_max_fks); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_fks, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyNumber_And(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = NULL;

#line 87 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);

#line 87 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_5)) {

#line 87 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 87 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 87 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 87 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_6, function);

#line 87 "root_numpy/src/innerjoin.pyx"
      }

#line 87 "root_numpy/src/innerjoin.pyx"
    }

#line 87 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_5) {

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 87 "root_numpy/src/innerjoin.pyx"
    } else {

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 87 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_2);

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    }

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);

#line 87 "root_numpy/src/innerjoin.pyx"
    {

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer);

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);

#line 87 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 87 "root_numpy/src/innerjoin.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 87 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer, (PyObject*)__pyx_v_good_index, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 87 "root_numpy/src/innerjoin.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 87 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 87 "root_numpy/src/innerjoin.pyx"
        } else {

#line 87 "root_numpy/src/innerjoin.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 87 "root_numpy/src/innerjoin.pyx"
        }

#line 87 "root_numpy/src/innerjoin.pyx"
      }

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_pybuffernd_good_index.diminfo[0].strides = __pyx_pybuffernd_good_index.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_good_index.diminfo[0].shape = __pyx_pybuffernd_good_index.rcbuffer->pybuffer.shape[0];

#line 87 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(9, 87, __pyx_L1_error)

#line 87 "root_numpy/src/innerjoin.pyx"
    }

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_good_index, ((PyArrayObject *)__pyx_t_3));

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = 0;

    /* "root_numpy/src/innerjoin.pyx":88
 *         fks = fk[i_data]
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 *         nresult += len(good_index)             # <<<<<<<<<<<<<<
 *         good_fk_index[i_data] = good_index
 * 
 */

#line 88 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_good_index)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 88, __pyx_L1_error)

#line 88 "root_numpy/src/innerjoin.pyx"
    __pyx_v_nresult = (__pyx_v_nresult + __pyx_t_1);

    /* "root_numpy/src/innerjoin.pyx":89
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 *         nresult += len(good_index)
 *         good_fk_index[i_data] = good_index             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray ret = np.empty(nresult, new_dtype)
 */

#line 89 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_good_fk_index), __pyx_v_i_data, ((PyObject *)__pyx_v_good_index), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 89, __pyx_L1_error)

#line 89 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":91
 *         good_fk_index[i_data] = good_index
 * 
 *     cdef np.ndarray ret = np.empty(nresult, new_dtype)             # <<<<<<<<<<<<<<
 * 
 *     # find where each of repeat/stretch/right lands
 */

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 91, __pyx_L1_error)

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 91, __pyx_L1_error)

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_nresult); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 91, __pyx_L1_error)

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = NULL;

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 91 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 91 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);

#line 91 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_2)) {

#line 91 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 91 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 91 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 91 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 91 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 91 "root_numpy/src/innerjoin.pyx"
    }

#line 91 "root_numpy/src/innerjoin.pyx"
  }

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 91, __pyx_L1_error)

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 91 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_2) {

#line 91 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;

#line 91 "root_numpy/src/innerjoin.pyx"
  }

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 91 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_1, __pyx_t_6);

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_new_dtype);

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_v_new_dtype);

#line 91 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_1, __pyx_v_new_dtype);

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 91, __pyx_L1_error)

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 91 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 91, __pyx_L1_error)

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_v_ret = ((PyArrayObject *)__pyx_t_3);

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":95
 *     # find where each of repeat/stretch/right lands
 *     cdef np.ndarray[np.int_t, ndim=1] repeat_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in repeat_columns], np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] stretch_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)
 */

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 95 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_repeat_columns)) || PyTuple_CheckExact(__pyx_v_repeat_columns)) {

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = __pyx_v_repeat_columns; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 95 "root_numpy/src/innerjoin.pyx"
__pyx_t_6 = PyObject_GetIter(__pyx_v_repeat_columns); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
  }

#line 95 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 95 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_13)) {

#line 95 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_6))) {

#line 95 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;

#line 95 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 95 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
        #else

#line 95 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
        #endif

#line 95 "root_numpy/src/innerjoin.pyx"
      } else {

#line 95 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_6)) break;

#line 95 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 95 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
        #else

#line 95 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
        #endif

#line 95 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 95 "root_numpy/src/innerjoin.pyx"
{

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __pyx_t_13(__pyx_t_6);

#line 95 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 95 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 95 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 95 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 95 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
        }

#line 95 "root_numpy/src/innerjoin.pyx"
        break;

#line 95 "root_numpy/src/innerjoin.pyx"
      }

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
    }

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_14)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_14);

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_names); if (unlikely(!__pyx_t_15)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_15);

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_index); if (unlikely(!__pyx_t_14)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_14);

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_14))) {

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);

#line 95 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_15)) {

#line 95 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);

#line 95 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_15);

#line 95 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 95 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_14, function);

#line 95 "root_numpy/src/innerjoin.pyx"
      }

#line 95 "root_numpy/src/innerjoin.pyx"
    }

#line 95 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_15) {

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
    } else {

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __pyx_t_15 = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 95 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_x);

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    }

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_2))) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  }

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);

#line 95 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_6)) {

#line 95 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_6);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 95 "root_numpy/src/innerjoin.pyx"
    }

#line 95 "root_numpy/src/innerjoin.pyx"
  }

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_14);

#line 95 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_6) {

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_6); __pyx_t_6 = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
  }

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 95 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_1, __pyx_t_4);

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_1, __pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_17 = ((PyArrayObject *)__pyx_t_3);

#line 95 "root_numpy/src/innerjoin.pyx"
  {

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 95 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_v_repeat_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 94, __pyx_L1_error)
    } else {
#line 95 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_repeat_result_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.shape[0];

#line 95 "root_numpy/src/innerjoin.pyx"
    }

#line 95 "root_numpy/src/innerjoin.pyx"
  }

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_17 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_v_repeat_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":97
 *         np.array([ret.dtype.names.index(x) for x in repeat_columns], np.int)
 *     cdef np.ndarray[np.int_t, ndim=1] stretch_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] right_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)
 */

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_14)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_14);

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 97 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_stretch_columns)) || PyTuple_CheckExact(__pyx_v_stretch_columns)) {

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_v_stretch_columns; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 97 "root_numpy/src/innerjoin.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_stretch_columns); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
  }

#line 97 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 97 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_13)) {

#line 97 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 97 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 97 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 97 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
        #else

#line 97 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
        #endif

#line 97 "root_numpy/src/innerjoin.pyx"
      } else {

#line 97 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 97 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 97 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
        #else

#line 97 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
        #endif

#line 97 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 97 "root_numpy/src/innerjoin.pyx"
{

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __pyx_t_13(__pyx_t_2);

#line 97 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_4)) {

#line 97 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 97 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 97 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 97 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
        }

#line 97 "root_numpy/src/innerjoin.pyx"
        break;

#line 97 "root_numpy/src/innerjoin.pyx"
      }

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
    }

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_names); if (unlikely(!__pyx_t_16)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_16);

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_16 = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_6);

#line 97 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_16)) {

#line 97 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 97 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_16);

#line 97 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 97 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_6, function);

#line 97 "root_numpy/src/innerjoin.pyx"
      }

#line 97 "root_numpy/src/innerjoin.pyx"
    }

#line 97 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_16) {

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
    } else {

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_15);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_16); __pyx_t_16 = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 97 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_v_x);

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    }

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  }

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_14))) {

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);

#line 97 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_2)) {

#line 97 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_14, function);

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 97 "root_numpy/src/innerjoin.pyx"
    }

#line 97 "root_numpy/src/innerjoin.pyx"
  }

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 97 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_2) {

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
  }

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 97 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_t_5);

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_18 = ((PyArrayObject *)__pyx_t_3);

#line 97 "root_numpy/src/innerjoin.pyx"
  {

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 97 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_v_stretch_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 96, __pyx_L1_error)
    } else {
#line 97 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_stretch_result_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.shape[0];

#line 97 "root_numpy/src/innerjoin.pyx"
    }

#line 97 "root_numpy/src/innerjoin.pyx"
  }

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_18 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_v_stretch_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":99
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)
 *     cdef np.ndarray[np.int_t, ndim=1] right_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)             # <<<<<<<<<<<<<<
 * 
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 */

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_14);

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = PyList_New(0); if (unlikely(!__pyx_t_14)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_14);

#line 99 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_right)) || PyTuple_CheckExact(__pyx_v_right)) {

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __pyx_v_right; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 99 "root_numpy/src/innerjoin.pyx"
__pyx_t_4 = PyObject_GetIter(__pyx_v_right); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
  }

#line 99 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 99 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_13)) {

#line 99 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_4))) {

#line 99 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;

#line 99 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 99 "root_numpy/src/innerjoin.pyx"
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
        #else

#line 99 "root_numpy/src/innerjoin.pyx"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
        #endif

#line 99 "root_numpy/src/innerjoin.pyx"
      } else {

#line 99 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 99 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 99 "root_numpy/src/innerjoin.pyx"
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
        #else

#line 99 "root_numpy/src/innerjoin.pyx"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
        #endif

#line 99 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 99 "root_numpy/src/innerjoin.pyx"
{

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = __pyx_t_13(__pyx_t_4);

#line 99 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_5)) {

#line 99 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 99 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 99 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 99 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
        }

#line 99 "root_numpy/src/innerjoin.pyx"
        break;

#line 99 "root_numpy/src/innerjoin.pyx"
      }

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
    }

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_names); if (unlikely(!__pyx_t_15)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_15);

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_2);

#line 99 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_15)) {

#line 99 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 99 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_15);

#line 99 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 99 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_2, function);

#line 99 "root_numpy/src/innerjoin.pyx"
      }

#line 99 "root_numpy/src/innerjoin.pyx"
    }

#line 99 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_15) {

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
    } else {

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __pyx_t_15 = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 99 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_x);

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    }

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_14, (PyObject*)__pyx_t_5))) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  }

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);

#line 99 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_4)) {

#line 99 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 99 "root_numpy/src/innerjoin.pyx"
    }

#line 99 "root_numpy/src/innerjoin.pyx"
  }

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 99 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_4) {

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
  }

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_14);

#line 99 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_1, __pyx_t_14);

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_1, __pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 99, __pyx_L1_error)

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_19 = ((PyArrayObject *)__pyx_t_3);

#line 99 "root_numpy/src/innerjoin.pyx"
  {

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 99 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_19, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_v_right_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 98, __pyx_L1_error)
    } else {
#line 99 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_right_result_indices.diminfo[0].strides = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_result_indices.diminfo[0].shape = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.shape[0];

#line 99 "root_numpy/src/innerjoin.pyx"
    }

#line 99 "root_numpy/src/innerjoin.pyx"
  }

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_19 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_v_right_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":101
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)
 * 
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)             # <<<<<<<<<<<<<<
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nstretch = len(stretch_indices)
 */

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = NULL;

#line 101 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {

#line 101 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);

#line 101 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_2)) {

#line 101 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 101 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 101 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 101 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 101 "root_numpy/src/innerjoin.pyx"
    }

#line 101 "root_numpy/src/innerjoin.pyx"
  }

#line 101 "root_numpy/src/innerjoin.pyx"
  if (!__pyx_t_2) {

#line 101 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_fk_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 101 "root_numpy/src/innerjoin.pyx"
  } else {

#line 101 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_v_fk_name);

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_v_fk_name);

#line 101 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_fk_name);

#line 101 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 101 "root_numpy/src/innerjoin.pyx"
  }

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_v_fk_result_index = __pyx_t_9;

  /* "root_numpy/src/innerjoin.pyx":102
 * 
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 *     cdef long nrepeat = len(repeat_indices)             # <<<<<<<<<<<<<<
 *     cdef long nstretch = len(stretch_indices)
 *     cdef long nright = len(right_indices)
 */

#line 102 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_repeat_indices)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 102, __pyx_L1_error)

#line 102 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nrepeat = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":103
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nstretch = len(stretch_indices)             # <<<<<<<<<<<<<<
 *     cdef long nright = len(right_indices)
 *     cdef long left_good_index = 0
 */

#line 103 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_stretch_indices)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 103, __pyx_L1_error)

#line 103 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nstretch = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":104
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nstretch = len(stretch_indices)
 *     cdef long nright = len(right_indices)             # <<<<<<<<<<<<<<
 *     cdef long left_good_index = 0
 *     cdef long right_good_index = 0
 */

#line 104 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_right_indices)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 104, __pyx_L1_error)

#line 104 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nright = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":105
 *     cdef long nstretch = len(stretch_indices)
 *     cdef long nright = len(right_indices)
 *     cdef long left_good_index = 0             # <<<<<<<<<<<<<<
 *     cdef long right_good_index = 0
 *     cdef long i_land = 0
 */

#line 105 "root_numpy/src/innerjoin.pyx"
  __pyx_v_left_good_index = 0;

  /* "root_numpy/src/innerjoin.pyx":106
 *     cdef long nright = len(right_indices)
 *     cdef long left_good_index = 0
 *     cdef long right_good_index = 0             # <<<<<<<<<<<<<<
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 */

#line 106 "root_numpy/src/innerjoin.pyx"
  __pyx_v_right_good_index = 0;

  /* "root_numpy/src/innerjoin.pyx":107
 *     cdef long left_good_index = 0
 *     cdef long right_good_index = 0
 *     cdef long i_land = 0             # <<<<<<<<<<<<<<
 *     cdef long i_source = 0
 *     cdef long i_repeat = 0
 */

#line 107 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_land = 0;

  /* "root_numpy/src/innerjoin.pyx":108
 *     cdef long right_good_index = 0
 *     cdef long i_land = 0
 *     cdef long i_source = 0             # <<<<<<<<<<<<<<
 *     cdef long i_repeat = 0
 *     cdef long i_stretch = 0
 */

#line 108 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_source = 0;

  /* "root_numpy/src/innerjoin.pyx":109
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 *     cdef long i_repeat = 0             # <<<<<<<<<<<<<<
 *     cdef long i_stretch = 0
 *     cdef long i_right = 0
 */

#line 109 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_repeat = 0;

  /* "root_numpy/src/innerjoin.pyx":110
 *     cdef long i_source = 0
 *     cdef long i_repeat = 0
 *     cdef long i_stretch = 0             # <<<<<<<<<<<<<<
 *     cdef long i_right = 0
 *     cdef long i_ret = 0
 */

#line 110 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_stretch = 0;

  /* "root_numpy/src/innerjoin.pyx":111
 *     cdef long i_repeat = 0
 *     cdef long i_stretch = 0
 *     cdef long i_right = 0             # <<<<<<<<<<<<<<
 *     cdef long i_ret = 0
 *     cdef long i_fk = 0
 */

#line 111 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_right = 0;

  /* "root_numpy/src/innerjoin.pyx":112
 *     cdef long i_stretch = 0
 *     cdef long i_right = 0
 *     cdef long i_ret = 0             # <<<<<<<<<<<<<<
 *     cdef long i_fk = 0
 *     cdef long this_n_good_fk = 0
 */

#line 112 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_ret = 0;

  /* "root_numpy/src/innerjoin.pyx":113
 *     cdef long i_right = 0
 *     cdef long i_ret = 0
 *     cdef long i_fk = 0             # <<<<<<<<<<<<<<
 *     cdef long this_n_good_fk = 0
 *     cdef np.ndarray[np.int_t] tmp_good_fk_index
 */

#line 113 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_fk = 0;

  /* "root_numpy/src/innerjoin.pyx":114
 *     cdef long i_ret = 0
 *     cdef long i_fk = 0
 *     cdef long this_n_good_fk = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] tmp_good_fk_index
 *     cdef np.ndarray tmp_fk
 */

#line 114 "root_numpy/src/innerjoin.pyx"
  __pyx_v_this_n_good_fk = 0;

  /* "root_numpy/src/innerjoin.pyx":118
 *     cdef np.ndarray tmp_fk
 * 
 *     for i_data from 0 <= i_data < ndata:             # <<<<<<<<<<<<<<
 *         tmp_good_fk_index = good_fk_index[i_data]
 *         tmp_fk = fk[i_data]
 */

#line 118 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __pyx_v_ndata;

#line 118 "root_numpy/src/innerjoin.pyx"
  for (__pyx_v_i_data = 0; __pyx_v_i_data < __pyx_t_7; __pyx_v_i_data++) {

    /* "root_numpy/src/innerjoin.pyx":119
 * 
 *     for i_data from 0 <= i_data < ndata:
 *         tmp_good_fk_index = good_fk_index[i_data]             # <<<<<<<<<<<<<<
 *         tmp_fk = fk[i_data]
 *         this_n_good_fk = len(tmp_good_fk_index)
 */

#line 119 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_good_fk_index), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 119, __pyx_L1_error)

#line 119 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 119 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 119, __pyx_L1_error)

#line 119 "root_numpy/src/innerjoin.pyx"
    __pyx_t_20 = ((PyArrayObject *)__pyx_t_3);

#line 119 "root_numpy/src/innerjoin.pyx"
    {

#line 119 "root_numpy/src/innerjoin.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 119 "root_numpy/src/innerjoin.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer);

#line 119 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer, (PyObject*)__pyx_t_20, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);

#line 119 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 119 "root_numpy/src/innerjoin.pyx"
        PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);

#line 119 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer, (PyObject*)__pyx_v_tmp_good_fk_index, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 119 "root_numpy/src/innerjoin.pyx"
          Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);

#line 119 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 119 "root_numpy/src/innerjoin.pyx"
        } else {

#line 119 "root_numpy/src/innerjoin.pyx"
          PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);

#line 119 "root_numpy/src/innerjoin.pyx"
        }

#line 119 "root_numpy/src/innerjoin.pyx"
      }

#line 119 "root_numpy/src/innerjoin.pyx"
      __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].strides = __pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].shape = __pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer.shape[0];

#line 119 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(9, 119, __pyx_L1_error)

#line 119 "root_numpy/src/innerjoin.pyx"
    }

#line 119 "root_numpy/src/innerjoin.pyx"
    __pyx_t_20 = 0;

#line 119 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_tmp_good_fk_index, ((PyArrayObject *)__pyx_t_3));

#line 119 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = 0;

    /* "root_numpy/src/innerjoin.pyx":120
 *     for i_data from 0 <= i_data < ndata:
 *         tmp_good_fk_index = good_fk_index[i_data]
 *         tmp_fk = fk[i_data]             # <<<<<<<<<<<<<<
 *         this_n_good_fk = len(tmp_good_fk_index)
 *         for i_fk from 0 <= i_fk < this_n_good_fk:
 */

#line 120 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 120, __pyx_L1_error)

#line 120 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 120 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 120, __pyx_L1_error)

#line 120 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_tmp_fk, ((PyArrayObject *)__pyx_t_3));

#line 120 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = 0;

    /* "root_numpy/src/innerjoin.pyx":121
 *         tmp_good_fk_index = good_fk_index[i_data]
 *         tmp_fk = fk[i_data]
 *         this_n_good_fk = len(tmp_good_fk_index)             # <<<<<<<<<<<<<<
 *         for i_fk from 0 <= i_fk < this_n_good_fk:
 *             left_good_index = tmp_good_fk_index[i_fk]
 */

#line 121 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_tmp_good_fk_index)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 121, __pyx_L1_error)

#line 121 "root_numpy/src/innerjoin.pyx"
    __pyx_v_this_n_good_fk = __pyx_t_1;

    /* "root_numpy/src/innerjoin.pyx":122
 *         tmp_fk = fk[i_data]
 *         this_n_good_fk = len(tmp_good_fk_index)
 *         for i_fk from 0 <= i_fk < this_n_good_fk:             # <<<<<<<<<<<<<<
 *             left_good_index = tmp_good_fk_index[i_fk]
 *             right_good_index = tmp_fk[left_good_index]
 */

#line 122 "root_numpy/src/innerjoin.pyx"
    __pyx_t_21 = __pyx_v_this_n_good_fk;

#line 122 "root_numpy/src/innerjoin.pyx"
    for (__pyx_v_i_fk = 0; __pyx_v_i_fk < __pyx_t_21; __pyx_v_i_fk++) {

      /* "root_numpy/src/innerjoin.pyx":123
 *         this_n_good_fk = len(tmp_good_fk_index)
 *         for i_fk from 0 <= i_fk < this_n_good_fk:
 *             left_good_index = tmp_good_fk_index[i_fk]             # <<<<<<<<<<<<<<
 *             right_good_index = tmp_fk[left_good_index]
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 */

#line 123 "root_numpy/src/innerjoin.pyx"
      __pyx_t_22 = __pyx_v_i_fk;

#line 123 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = -1;

#line 123 "root_numpy/src/innerjoin.pyx"
      if (__pyx_t_22 < 0) {

#line 123 "root_numpy/src/innerjoin.pyx"
        __pyx_t_22 += __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].shape;

#line 123 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 0;
      } else 
#line 123 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].shape)) __pyx_t_9 = 0;

#line 123 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 123 "root_numpy/src/innerjoin.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 123 "root_numpy/src/innerjoin.pyx"
        __PYX_ERR(9, 123, __pyx_L1_error)

#line 123 "root_numpy/src/innerjoin.pyx"
      }

#line 123 "root_numpy/src/innerjoin.pyx"
      __pyx_v_left_good_index = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].strides));

      /* "root_numpy/src/innerjoin.pyx":124
 *         for i_fk from 0 <= i_fk < this_n_good_fk:
 *             left_good_index = tmp_good_fk_index[i_fk]
 *             right_good_index = tmp_fk[left_good_index]             # <<<<<<<<<<<<<<
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]
 */

#line 124 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_tmp_fk), __pyx_v_left_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 124, __pyx_L1_error)

#line 124 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 124 "root_numpy/src/innerjoin.pyx"
      __pyx_t_23 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_23 == (long)-1) && PyErr_Occurred())) __PYX_ERR(9, 124, __pyx_L1_error)

#line 124 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 124 "root_numpy/src/innerjoin.pyx"
      __pyx_v_right_good_index = __pyx_t_23;

      /* "root_numpy/src/innerjoin.pyx":125
 *             left_good_index = tmp_good_fk_index[i_fk]
 *             right_good_index = tmp_fk[left_good_index]
 *             for i_repeat from 0 <= i_repeat < nrepeat:             # <<<<<<<<<<<<<<
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 */

#line 125 "root_numpy/src/innerjoin.pyx"
      __pyx_t_23 = __pyx_v_nrepeat;

#line 125 "root_numpy/src/innerjoin.pyx"
      for (__pyx_v_i_repeat = 0; __pyx_v_i_repeat < __pyx_t_23; __pyx_v_i_repeat++) {

        /* "root_numpy/src/innerjoin.pyx":126
 *             right_good_index = tmp_fk[left_good_index]
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 */

#line 126 "root_numpy/src/innerjoin.pyx"
        __pyx_t_24 = __pyx_v_i_repeat;

#line 126 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 126 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_24 < 0) {

#line 126 "root_numpy/src/innerjoin.pyx"
          __pyx_t_24 += __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape;

#line 126 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 0;
        } else 
#line 126 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 126 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 126 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 126 "root_numpy/src/innerjoin.pyx"
          __PYX_ERR(9, 126, __pyx_L1_error)

#line 126 "root_numpy/src/innerjoin.pyx"
        }

#line 126 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_repeat_result_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":127
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 *             for i_stretch from 0 <= i_stretch < nstretch:
 */

#line 127 "root_numpy/src/innerjoin.pyx"
        __pyx_t_25 = __pyx_v_i_repeat;

#line 127 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 127 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_25 < 0) {

#line 127 "root_numpy/src/innerjoin.pyx"
          __pyx_t_25 += __pyx_pybuffernd_repeat_indices.diminfo[0].shape;

#line 127 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
        } else 
#line 127 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_repeat_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 127 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 127 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 127 "root_numpy/src/innerjoin.pyx"
          __PYX_ERR(9, 127, __pyx_L1_error)

#line 127 "root_numpy/src/innerjoin.pyx"
        }

#line 127 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_repeat_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":128
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster             # <<<<<<<<<<<<<<
 *             for i_stretch from 0 <= i_stretch < nstretch:
 *                 i_land = stretch_result_indices[i_stretch]
 */

#line 128 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 128, __pyx_L1_error)

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 128 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 128, __pyx_L1_error)

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 128 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 128, __pyx_L1_error)

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 128 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i_land, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 128, __pyx_L1_error)

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 128 "root_numpy/src/innerjoin.pyx"
      }

      /* "root_numpy/src/innerjoin.pyx":129
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 *             for i_stretch from 0 <= i_stretch < nstretch:             # <<<<<<<<<<<<<<
 *                 i_land = stretch_result_indices[i_stretch]
 *                 i_source = stretch_indices[i_stretch]
 */

#line 129 "root_numpy/src/innerjoin.pyx"
      __pyx_t_23 = __pyx_v_nstretch;

#line 129 "root_numpy/src/innerjoin.pyx"
      for (__pyx_v_i_stretch = 0; __pyx_v_i_stretch < __pyx_t_23; __pyx_v_i_stretch++) {

        /* "root_numpy/src/innerjoin.pyx":130
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 *             for i_stretch from 0 <= i_stretch < nstretch:
 *                 i_land = stretch_result_indices[i_stretch]             # <<<<<<<<<<<<<<
 *                 i_source = stretch_indices[i_stretch]
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 */

#line 130 "root_numpy/src/innerjoin.pyx"
        __pyx_t_26 = __pyx_v_i_stretch;

#line 130 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 130 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_26 < 0) {

#line 130 "root_numpy/src/innerjoin.pyx"
          __pyx_t_26 += __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape;

#line 130 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_26 < 0)) __pyx_t_9 = 0;
        } else 
#line 130 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 130 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 130 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 130 "root_numpy/src/innerjoin.pyx"
          __PYX_ERR(9, 130, __pyx_L1_error)

#line 130 "root_numpy/src/innerjoin.pyx"
        }

#line 130 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_stretch_result_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":131
 *             for i_stretch from 0 <= i_stretch < nstretch:
 *                 i_land = stretch_result_indices[i_stretch]
 *                 i_source = stretch_indices[i_stretch]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 *             for i_right from 0 <= i_right < nright:
 */

#line 131 "root_numpy/src/innerjoin.pyx"
        __pyx_t_27 = __pyx_v_i_stretch;

#line 131 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 131 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_27 < 0) {

#line 131 "root_numpy/src/innerjoin.pyx"
          __pyx_t_27 += __pyx_pybuffernd_stretch_indices.diminfo[0].shape;

#line 131 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_9 = 0;
        } else 
#line 131 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_stretch_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 131 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 131 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 131 "root_numpy/src/innerjoin.pyx"
          __PYX_ERR(9, 131, __pyx_L1_error)

#line 131 "root_numpy/src/innerjoin.pyx"
        }

#line 131 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_stretch_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":132
 *                 i_land = stretch_result_indices[i_stretch]
 *                 i_source = stretch_indices[i_stretch]
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster             # <<<<<<<<<<<<<<
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]
 */

#line 132 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 132, __pyx_L1_error)

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 132 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 132, __pyx_L1_error)

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 132 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_left_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 132, __pyx_L1_error)

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 132 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 132, __pyx_L1_error)

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 132 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i_land, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 132, __pyx_L1_error)

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 132 "root_numpy/src/innerjoin.pyx"
      }

      /* "root_numpy/src/innerjoin.pyx":133
 *                 i_source = stretch_indices[i_stretch]
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 *             for i_right from 0 <= i_right < nright:             # <<<<<<<<<<<<<<
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 */

#line 133 "root_numpy/src/innerjoin.pyx"
      __pyx_t_23 = __pyx_v_nright;

#line 133 "root_numpy/src/innerjoin.pyx"
      for (__pyx_v_i_right = 0; __pyx_v_i_right < __pyx_t_23; __pyx_v_i_right++) {

        /* "root_numpy/src/innerjoin.pyx":134
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]             # <<<<<<<<<<<<<<
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 */

#line 134 "root_numpy/src/innerjoin.pyx"
        __pyx_t_28 = __pyx_v_i_right;

#line 134 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 134 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_28 < 0) {

#line 134 "root_numpy/src/innerjoin.pyx"
          __pyx_t_28 += __pyx_pybuffernd_right_result_indices.diminfo[0].shape;

#line 134 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_9 = 0;
        } else 
#line 134 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_right_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 134 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 134 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 134 "root_numpy/src/innerjoin.pyx"
          __PYX_ERR(9, 134, __pyx_L1_error)

#line 134 "root_numpy/src/innerjoin.pyx"
        }

#line 134 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_right_result_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":135
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 *             ret[i_ret][fk_result_index] = right_good_index
 */

#line 135 "root_numpy/src/innerjoin.pyx"
        __pyx_t_29 = __pyx_v_i_right;

#line 135 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 135 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_29 < 0) {

#line 135 "root_numpy/src/innerjoin.pyx"
          __pyx_t_29 += __pyx_pybuffernd_right_indices.diminfo[0].shape;

#line 135 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_29 < 0)) __pyx_t_9 = 0;
        } else 
#line 135 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_right_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 135 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 135 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 135 "root_numpy/src/innerjoin.pyx"
          __PYX_ERR(9, 135, __pyx_L1_error)

#line 135 "root_numpy/src/innerjoin.pyx"
        }

#line 135 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_right_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":136
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster             # <<<<<<<<<<<<<<
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1
 */

#line 136 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 136, __pyx_L1_error)

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 136 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 136, __pyx_L1_error)

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 136 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_right_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 136, __pyx_L1_error)

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 136 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 136, __pyx_L1_error)

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 136 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i_land, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 136, __pyx_L1_error)

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 136 "root_numpy/src/innerjoin.pyx"
      }

      /* "root_numpy/src/innerjoin.pyx":137
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 *             ret[i_ret][fk_result_index] = right_good_index             # <<<<<<<<<<<<<<
 *             i_ret += 1
 *     return ret
 */

#line 137 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_right_good_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 137, __pyx_L1_error)

#line 137 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 137 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 137, __pyx_L1_error)

#line 137 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 137 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_fk_result_index, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(9, 137, __pyx_L1_error)

#line 137 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 137 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "root_numpy/src/innerjoin.pyx":138
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */

#line 138 "root_numpy/src/innerjoin.pyx"
      __pyx_v_i_ret = (__pyx_v_i_ret + 1);

#line 138 "root_numpy/src/innerjoin.pyx"
    }

#line 138 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":139
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 139 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 139 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));

#line 139 "root_numpy/src/innerjoin.pyx"
  __pyx_r = ((PyObject *)__pyx_v_ret);

#line 139 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/innerjoin.pyx":69
 * 
 * 
 * cdef _vector_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name,
 *                            new_dtype,
 */

#line 69 "root_numpy/src/innerjoin.pyx"


#line 69 "root_numpy/src/innerjoin.pyx"
  /* function exit code */

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_L1_error:;

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_14);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_15);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_16);

#line 69 "root_numpy/src/innerjoin.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_PyThreadState_declare

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_PyThreadState_assign

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_AddTraceback("_librootnumpy._vector_fk_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_r = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L2;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_L0:;

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_L2:;

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_first_right);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_good_fk_index);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_good_index);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_fks);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_repeat_result_indices);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_stretch_result_indices);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_right_result_indices);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp_good_fk_index);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp_fk);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_x);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 69 "root_numpy/src/innerjoin.pyx"
  return __pyx_r;

#line 69 "root_numpy/src/innerjoin.pyx"
}

/* "root_numpy/src/innerjoin.pyx":142
 * 
 * 
 * cdef _scalar_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name, new_dtype,
 *                            repeat_columns, stretch_columns,
 */

#line 142 "root_numpy/src/innerjoin.pyx"


#line 142 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_f_13_librootnumpy__scalar_fk_inner_join(PyArrayObject *__pyx_v_data, PyObject *__pyx_v_right, PyArrayObject *__pyx_v_fk, PyObject *__pyx_v_fk_name, PyObject *__pyx_v_new_dtype, PyObject *__pyx_v_repeat_columns, PyObject *__pyx_v_stretch_columns, PyArrayObject *__pyx_v_repeat_indices, CYTHON_UNUSED PyArrayObject *__pyx_v_stretch_indices, PyArrayObject *__pyx_v_right_indices) {
  long __pyx_v_ndata
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_first_right = 0
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_fk_index_good = 0
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_max_fks
#line 142 "root_numpy/src/innerjoin.pyx"
;
  int __pyx_v_fks
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nresult
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_data
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_ret = NULL
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_repeat_result_indices = 0
#line 142 "root_numpy/src/innerjoin.pyx"
;
  CYTHON_UNUSED PyArrayObject *__pyx_v_stretch_result_indices = 0
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_right_result_indices = 0
#line 142 "root_numpy/src/innerjoin.pyx"
;
  int __pyx_v_fk_result_index
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nrepeat
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nright
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_repeat
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_right
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_land
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_source
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_ret
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_right_good_index
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_x = NULL
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fk_index_good
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_fk_index_good
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_repeat_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_repeat_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_right_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_right_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_stretch_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_stretch_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_r = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyDeclarations

#line 142 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_1;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_8 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  long __pyx_t_9;

#line 142 "root_numpy/src/innerjoin.pyx"
  int __pyx_t_10;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5numpy_int8_t __pyx_t_11;

#line 142 "root_numpy/src/innerjoin.pyx"
  int __pyx_t_12;

#line 142 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_13;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *(*__pyx_t_14)(PyObject *);

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_15 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_t_16 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_17 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_18 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyArrayObject *__pyx_t_19 = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_20;

#line 142 "root_numpy/src/innerjoin.pyx"
  long __pyx_t_21;

#line 142 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_22;

#line 142 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_23;

#line 142 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_24;

#line 142 "root_numpy/src/innerjoin.pyx"
  Py_ssize_t __pyx_t_25;

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannySetupContext("_scalar_fk_inner_join", 0);

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_fk_index_good.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_fk_index_good.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_fk_index_good.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_fk_index_good.rcbuffer = &__pyx_pybuffer_fk_index_good;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_result_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_result_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_result_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_result_indices.rcbuffer = &__pyx_pybuffer_repeat_result_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_result_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_result_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_result_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_result_indices.rcbuffer = &__pyx_pybuffer_stretch_result_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_result_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_result_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_result_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_result_indices.rcbuffer = &__pyx_pybuffer_right_result_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.rcbuffer = &__pyx_pybuffer_repeat_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.rcbuffer = &__pyx_pybuffer_stretch_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.rcbuffer = &__pyx_pybuffer_right_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  {

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 142 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_repeat_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(9, 142, __pyx_L1_error)

#line 142 "root_numpy/src/innerjoin.pyx"
  }

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.shape[0];

#line 142 "root_numpy/src/innerjoin.pyx"
  {

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 142 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_stretch_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(9, 142, __pyx_L1_error)

#line 142 "root_numpy/src/innerjoin.pyx"
  }

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.shape[0];

#line 142 "root_numpy/src/innerjoin.pyx"
  {

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 142 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_right_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(9, 142, __pyx_L1_error)

#line 142 "root_numpy/src/innerjoin.pyx"
  }

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.diminfo[0].strides = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_indices.diminfo[0].shape = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/innerjoin.pyx":148
 *                            np.ndarray[np.int_t] stretch_indices,
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata, np.int8)
 */

#line 148 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_data)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 148, __pyx_L1_error)

#line 148 "root_numpy/src/innerjoin.pyx"
  __pyx_v_ndata = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":149
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata, np.int8)
 *     cdef long max_fks
 */

#line 149 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_right, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 149, __pyx_L1_error)

#line 149 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 149 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_data), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 149, __pyx_L1_error)

#line 149 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 149 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 149 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 149, __pyx_L1_error)

#line 149 "root_numpy/src/innerjoin.pyx"
  __pyx_v_first_right = ((PyArrayObject *)__pyx_t_3);

#line 149 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":150
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata, np.int8)             # <<<<<<<<<<<<<<
 *     cdef long max_fks
 *     cdef int fks = 0
 */

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_ndata); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int8); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = NULL;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 150 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 150 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_5)) {

#line 150 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 150 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 150 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 150 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 150 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 150 "root_numpy/src/innerjoin.pyx"
    }

#line 150 "root_numpy/src/innerjoin.pyx"
  }

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 150 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_5) {

#line 150 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 150 "root_numpy/src/innerjoin.pyx"
  }

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 150 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_2);

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 150 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);

#line 150 "root_numpy/src/innerjoin.pyx"
  {

#line 150 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 150 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 150 "root_numpy/src/innerjoin.pyx"
      __pyx_v_fk_index_good = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.buf = NULL;

#line 150 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 150, __pyx_L1_error)
    } else {
#line 150 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_fk_index_good.diminfo[0].strides = __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fk_index_good.diminfo[0].shape = __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.shape[0];

#line 150 "root_numpy/src/innerjoin.pyx"
    }

#line 150 "root_numpy/src/innerjoin.pyx"
  }

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_v_fk_index_good = ((PyArrayObject *)__pyx_t_3);

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":152
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata, np.int8)
 *     cdef long max_fks
 *     cdef int fks = 0             # <<<<<<<<<<<<<<
 *     cdef long nresult = 0
 * 
 */

#line 152 "root_numpy/src/innerjoin.pyx"
  __pyx_v_fks = 0;

  /* "root_numpy/src/innerjoin.pyx":153
 *     cdef long max_fks
 *     cdef int fks = 0
 *     cdef long nresult = 0             # <<<<<<<<<<<<<<
 * 
 *     for i_data from 0 <= i_data < ndata:
 */

#line 153 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nresult = 0;

  /* "root_numpy/src/innerjoin.pyx":155
 *     cdef long nresult = 0
 * 
 *     for i_data from 0 <= i_data < ndata:             # <<<<<<<<<<<<<<
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 */

#line 155 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __pyx_v_ndata;

#line 155 "root_numpy/src/innerjoin.pyx"
  for (__pyx_v_i_data = 0; __pyx_v_i_data < __pyx_t_9; __pyx_v_i_data++) {

    /* "root_numpy/src/innerjoin.pyx":156
 * 
 *     for i_data from 0 <= i_data < ndata:
 *         max_fks = len(first_right[i_data])             # <<<<<<<<<<<<<<
 *         fks = fk[i_data]
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)
 */

#line 156 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_first_right), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 156, __pyx_L1_error)

#line 156 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 156 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 156, __pyx_L1_error)

#line 156 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 156 "root_numpy/src/innerjoin.pyx"
    __pyx_v_max_fks = __pyx_t_1;

    /* "root_numpy/src/innerjoin.pyx":157
 *     for i_data from 0 <= i_data < ndata:
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]             # <<<<<<<<<<<<<<
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)
 * 
 */

#line 157 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 157, __pyx_L1_error)

#line 157 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 157 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 157, __pyx_L1_error)

#line 157 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 157 "root_numpy/src/innerjoin.pyx"
    __pyx_v_fks = __pyx_t_10;

    /* "root_numpy/src/innerjoin.pyx":158
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)             # <<<<<<<<<<<<<<
 * 
 *     nresult = np.count_nonzero(fk_index_good)
 */

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = (__pyx_v_fks >= 0);

#line 158 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_12) {

#line 158 "root_numpy/src/innerjoin.pyx"
    } else {

#line 158 "root_numpy/src/innerjoin.pyx"
      __pyx_t_11 = __pyx_t_12;

#line 158 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L5_bool_binop_done;

#line 158 "root_numpy/src/innerjoin.pyx"
    }

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = (__pyx_v_fks < __pyx_v_max_fks);

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_t_11 = __pyx_t_12;

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_L5_bool_binop_done:;

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = __pyx_v_i_data;

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = -1;

#line 158 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_13 < 0) {

#line 158 "root_numpy/src/innerjoin.pyx"
      __pyx_t_13 += __pyx_pybuffernd_fk_index_good.diminfo[0].shape;

#line 158 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_10 = 0;
    } else 
#line 158 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_fk_index_good.diminfo[0].shape)) __pyx_t_10 = 0;

#line 158 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 158 "root_numpy/src/innerjoin.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 158 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 158, __pyx_L1_error)

#line 158 "root_numpy/src/innerjoin.pyx"
    }

#line 158 "root_numpy/src/innerjoin.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_fk_index_good.diminfo[0].strides) = __pyx_t_11;

#line 158 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":160
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)
 * 
 *     nresult = np.count_nonzero(fk_index_good)             # <<<<<<<<<<<<<<
 *     ret = np.empty(nresult, new_dtype)
 * 
 */

#line 160 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 160, __pyx_L1_error)

#line 160 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 160 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_count_nonzero); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 160, __pyx_L1_error)

#line 160 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 160 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 160 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = NULL;

#line 160 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {

#line 160 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);

#line 160 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_4)) {

#line 160 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 160 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 160 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 160 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_7, function);

#line 160 "root_numpy/src/innerjoin.pyx"
    }

#line 160 "root_numpy/src/innerjoin.pyx"
  }

#line 160 "root_numpy/src/innerjoin.pyx"
  if (!__pyx_t_4) {

#line 160 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)__pyx_v_fk_index_good)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 160, __pyx_L1_error)

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 160 "root_numpy/src/innerjoin.pyx"
  } else {

#line 160 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 160, __pyx_L1_error)

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_fk_index_good));

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_fk_index_good));

#line 160 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)__pyx_v_fk_index_good));

#line 160 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 160, __pyx_L1_error)

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 160 "root_numpy/src/innerjoin.pyx"
  }

#line 160 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 160 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(9, 160, __pyx_L1_error)

#line 160 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 160 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nresult = __pyx_t_9;

  /* "root_numpy/src/innerjoin.pyx":161
 * 
 *     nresult = np.count_nonzero(fk_index_good)
 *     ret = np.empty(nresult, new_dtype)             # <<<<<<<<<<<<<<
 * 
 *     # find where each of repeat/stretch/right lands
 */

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 161, __pyx_L1_error)

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 161, __pyx_L1_error)

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_nresult); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 161, __pyx_L1_error)

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = NULL;

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 161 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 161 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);

#line 161 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_4)) {

#line 161 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 161 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 161 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 161 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 161 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 161 "root_numpy/src/innerjoin.pyx"
    }

#line 161 "root_numpy/src/innerjoin.pyx"
  }

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 161, __pyx_L1_error)

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 161 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_4) {

#line 161 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 161 "root_numpy/src/innerjoin.pyx"
  }

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 161 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_1, __pyx_t_7);

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_new_dtype);

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_v_new_dtype);

#line 161 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_1, __pyx_v_new_dtype);

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = 0;

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 161, __pyx_L1_error)

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_v_ret = __pyx_t_3;

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":165
 *     # find where each of repeat/stretch/right lands
 *     cdef np.ndarray[np.int_t] repeat_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in repeat_columns], np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] stretch_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)
 */

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 165 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_repeat_columns)) || PyTuple_CheckExact(__pyx_v_repeat_columns)) {

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = __pyx_v_repeat_columns; __Pyx_INCREF(__pyx_t_7); __pyx_t_1 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 165 "root_numpy/src/innerjoin.pyx"
__pyx_t_7 = PyObject_GetIter(__pyx_v_repeat_columns); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
  }

#line 165 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 165 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_14)) {

#line 165 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_7))) {

#line 165 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_7)) break;

#line 165 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 165 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
        #else

#line 165 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
        #endif

#line 165 "root_numpy/src/innerjoin.pyx"
      } else {

#line 165 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_7)) break;

#line 165 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 165 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
        #else

#line 165 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
        #endif

#line 165 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 165 "root_numpy/src/innerjoin.pyx"
{

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __pyx_t_14(__pyx_t_7);

#line 165 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_4)) {

#line 165 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 165 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 165 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 165 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
        }

#line 165 "root_numpy/src/innerjoin.pyx"
        break;

#line 165 "root_numpy/src/innerjoin.pyx"
      }

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
    }

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_names); if (unlikely(!__pyx_t_15)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_15);

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);

#line 165 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_15)) {

#line 165 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 165 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_15);

#line 165 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 165 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 165 "root_numpy/src/innerjoin.pyx"
      }

#line 165 "root_numpy/src/innerjoin.pyx"
    }

#line 165 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_15) {

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
    } else {

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __pyx_t_15 = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 165 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_x);

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_16, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    }

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_4))) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  }

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);

#line 165 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_7)) {

#line 165 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_7);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 165 "root_numpy/src/innerjoin.pyx"
    }

#line 165 "root_numpy/src/innerjoin.pyx"
  }

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 165 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_7) {

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
  }

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 165 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_1, __pyx_t_6);

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_1, __pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_17 = ((PyArrayObject *)__pyx_t_3);

#line 165 "root_numpy/src/innerjoin.pyx"
  {

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 165 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_v_repeat_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 164, __pyx_L1_error)
    } else {
#line 165 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_repeat_result_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.shape[0];

#line 165 "root_numpy/src/innerjoin.pyx"
    }

#line 165 "root_numpy/src/innerjoin.pyx"
  }

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_17 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_v_repeat_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":167
 *         np.array([ret.dtype.names.index(x) for x in repeat_columns], np.int)
 *     cdef np.ndarray[np.int_t] stretch_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] right_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)
 */

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 167 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_stretch_columns)) || PyTuple_CheckExact(__pyx_v_stretch_columns)) {

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __pyx_v_stretch_columns; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 167 "root_numpy/src/innerjoin.pyx"
__pyx_t_4 = PyObject_GetIter(__pyx_v_stretch_columns); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
  }

#line 167 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 167 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_14)) {

#line 167 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_4))) {

#line 167 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;

#line 167 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 167 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
        #else

#line 167 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
        #endif

#line 167 "root_numpy/src/innerjoin.pyx"
      } else {

#line 167 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 167 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 167 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
        #else

#line 167 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
        #endif

#line 167 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 167 "root_numpy/src/innerjoin.pyx"
{

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = __pyx_t_14(__pyx_t_4);

#line 167 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_6)) {

#line 167 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 167 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 167 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 167 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
        }

#line 167 "root_numpy/src/innerjoin.pyx"
        break;

#line 167 "root_numpy/src/innerjoin.pyx"
      }

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
    }

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_names); if (unlikely(!__pyx_t_16)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_16);

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_16 = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_7);

#line 167 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_16)) {

#line 167 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 167 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_16);

#line 167 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 167 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_7, function);

#line 167 "root_numpy/src/innerjoin.pyx"
      }

#line 167 "root_numpy/src/innerjoin.pyx"
    }

#line 167 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_16) {

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
    } else {

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_15);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_16); __pyx_t_16 = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 167 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_v_x);

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_15, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    }

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  }

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 167 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_4)) {

#line 167 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 167 "root_numpy/src/innerjoin.pyx"
    }

#line 167 "root_numpy/src/innerjoin.pyx"
  }

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 167 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_4) {

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
  }

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 167 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_2);

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 167, __pyx_L1_error)

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_18 = ((PyArrayObject *)__pyx_t_3);

#line 167 "root_numpy/src/innerjoin.pyx"
  {

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 167 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_v_stretch_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 166, __pyx_L1_error)
    } else {
#line 167 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_stretch_result_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.shape[0];

#line 167 "root_numpy/src/innerjoin.pyx"
    }

#line 167 "root_numpy/src/innerjoin.pyx"
  }

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_18 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_v_stretch_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":169
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)
 *     cdef np.ndarray[np.int_t] right_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)             # <<<<<<<<<<<<<<
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 * 
 */

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 169 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_right)) || PyTuple_CheckExact(__pyx_v_right)) {

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = __pyx_v_right; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 169 "root_numpy/src/innerjoin.pyx"
__pyx_t_6 = PyObject_GetIter(__pyx_v_right); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
  }

#line 169 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 169 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_14)) {

#line 169 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_6))) {

#line 169 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;

#line 169 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 169 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
        #else

#line 169 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
        #endif

#line 169 "root_numpy/src/innerjoin.pyx"
      } else {

#line 169 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_6)) break;

#line 169 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 169 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
        #else

#line 169 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
        #endif

#line 169 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 169 "root_numpy/src/innerjoin.pyx"
{

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __pyx_t_14(__pyx_t_6);

#line 169 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 169 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 169 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 169 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 169 "root_numpy/src/innerjoin.pyx"
          else __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
        }

#line 169 "root_numpy/src/innerjoin.pyx"
        break;

#line 169 "root_numpy/src/innerjoin.pyx"
      }

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
    }

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_names); if (unlikely(!__pyx_t_15)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_15);

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);

#line 169 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_15)) {

#line 169 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 169 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_15);

#line 169 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 169 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 169 "root_numpy/src/innerjoin.pyx"
      }

#line 169 "root_numpy/src/innerjoin.pyx"
    }

#line 169 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_15) {

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
    } else {

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __pyx_t_15 = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 169 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_x);

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    }

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_2))) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  }

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);

#line 169 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_6)) {

#line 169 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_6);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_7, function);

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 169 "root_numpy/src/innerjoin.pyx"
    }

#line 169 "root_numpy/src/innerjoin.pyx"
  }

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 169 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_6) {

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
  }

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 169 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_1, __pyx_t_5);

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_1, __pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(9, 169, __pyx_L1_error)

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_19 = ((PyArrayObject *)__pyx_t_3);

#line 169 "root_numpy/src/innerjoin.pyx"
  {

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 169 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_19, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_v_right_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 168, __pyx_L1_error)
    } else {
#line 169 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_right_result_indices.diminfo[0].strides = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_result_indices.diminfo[0].shape = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.shape[0];

#line 169 "root_numpy/src/innerjoin.pyx"
    }

#line 169 "root_numpy/src/innerjoin.pyx"
  }

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_19 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_v_right_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":170
 *     cdef np.ndarray[np.int_t] right_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)             # <<<<<<<<<<<<<<
 * 
 *     cdef long nrepeat = len(repeat_indices)
 */

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_names); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = NULL;

#line 170 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {

#line 170 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);

#line 170 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_4)) {

#line 170 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 170 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 170 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 170 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_7, function);

#line 170 "root_numpy/src/innerjoin.pyx"
    }

#line 170 "root_numpy/src/innerjoin.pyx"
  }

#line 170 "root_numpy/src/innerjoin.pyx"
  if (!__pyx_t_4) {

#line 170 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_fk_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 170 "root_numpy/src/innerjoin.pyx"
  } else {

#line 170 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_v_fk_name);

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_v_fk_name);

#line 170 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_fk_name);

#line 170 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 170 "root_numpy/src/innerjoin.pyx"
  }

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_v_fk_result_index = __pyx_t_10;

  /* "root_numpy/src/innerjoin.pyx":172
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 * 
 *     cdef long nrepeat = len(repeat_indices)             # <<<<<<<<<<<<<<
 *     cdef long nright = len(right_indices)
 *     cdef long i_repeat = 0
 */

#line 172 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_repeat_indices)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 172, __pyx_L1_error)

#line 172 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nrepeat = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":173
 * 
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nright = len(right_indices)             # <<<<<<<<<<<<<<
 *     cdef long i_repeat = 0
 *     cdef long i_right = 0
 */

#line 173 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_right_indices)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 173, __pyx_L1_error)

#line 173 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nright = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":174
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nright = len(right_indices)
 *     cdef long i_repeat = 0             # <<<<<<<<<<<<<<
 *     cdef long i_right = 0
 *     cdef long i_land = 0
 */

#line 174 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_repeat = 0;

  /* "root_numpy/src/innerjoin.pyx":175
 *     cdef long nright = len(right_indices)
 *     cdef long i_repeat = 0
 *     cdef long i_right = 0             # <<<<<<<<<<<<<<
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 */

#line 175 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_right = 0;

  /* "root_numpy/src/innerjoin.pyx":176
 *     cdef long i_repeat = 0
 *     cdef long i_right = 0
 *     cdef long i_land = 0             # <<<<<<<<<<<<<<
 *     cdef long i_source = 0
 *     cdef long i_ret = 0
 */

#line 176 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_land = 0;

  /* "root_numpy/src/innerjoin.pyx":177
 *     cdef long i_right = 0
 *     cdef long i_land = 0
 *     cdef long i_source = 0             # <<<<<<<<<<<<<<
 *     cdef long i_ret = 0
 *     cdef long right_good_index=0
 */

#line 177 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_source = 0;

  /* "root_numpy/src/innerjoin.pyx":178
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 *     cdef long i_ret = 0             # <<<<<<<<<<<<<<
 *     cdef long right_good_index=0
 * 
 */

#line 178 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_ret = 0;

  /* "root_numpy/src/innerjoin.pyx":179
 *     cdef long i_source = 0
 *     cdef long i_ret = 0
 *     cdef long right_good_index=0             # <<<<<<<<<<<<<<
 * 
 *     for i_data from 0 <= i_data < ndata:
 */

#line 179 "root_numpy/src/innerjoin.pyx"
  __pyx_v_right_good_index = 0;

  /* "root_numpy/src/innerjoin.pyx":181
 *     cdef long right_good_index=0
 * 
 *     for i_data from 0 <= i_data < ndata:             # <<<<<<<<<<<<<<
 *         if fk_index_good[i_data]:
 *             right_good_index = fk[i_data]
 */

#line 181 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __pyx_v_ndata;

#line 181 "root_numpy/src/innerjoin.pyx"
  for (__pyx_v_i_data = 0; __pyx_v_i_data < __pyx_t_9; __pyx_v_i_data++) {

    /* "root_numpy/src/innerjoin.pyx":182
 * 
 *     for i_data from 0 <= i_data < ndata:
 *         if fk_index_good[i_data]:             # <<<<<<<<<<<<<<
 *             right_good_index = fk[i_data]
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 */

#line 182 "root_numpy/src/innerjoin.pyx"
    __pyx_t_20 = __pyx_v_i_data;

#line 182 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = -1;

#line 182 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_20 < 0) {

#line 182 "root_numpy/src/innerjoin.pyx"
      __pyx_t_20 += __pyx_pybuffernd_fk_index_good.diminfo[0].shape;

#line 182 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_20 < 0)) __pyx_t_10 = 0;
    } else 
#line 182 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_fk_index_good.diminfo[0].shape)) __pyx_t_10 = 0;

#line 182 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 182 "root_numpy/src/innerjoin.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 182 "root_numpy/src/innerjoin.pyx"
      __PYX_ERR(9, 182, __pyx_L1_error)

#line 182 "root_numpy/src/innerjoin.pyx"
    }

#line 182 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_fk_index_good.diminfo[0].strides)) != 0);

#line 182 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_12) {

      /* "root_numpy/src/innerjoin.pyx":183
 *     for i_data from 0 <= i_data < ndata:
 *         if fk_index_good[i_data]:
 *             right_good_index = fk[i_data]             # <<<<<<<<<<<<<<
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]
 */

#line 183 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 183, __pyx_L1_error)

#line 183 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 183 "root_numpy/src/innerjoin.pyx"
      __pyx_t_21 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_21 == (long)-1) && PyErr_Occurred())) __PYX_ERR(9, 183, __pyx_L1_error)

#line 183 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 183 "root_numpy/src/innerjoin.pyx"
      __pyx_v_right_good_index = __pyx_t_21;

      /* "root_numpy/src/innerjoin.pyx":184
 *         if fk_index_good[i_data]:
 *             right_good_index = fk[i_data]
 *             for i_repeat from 0 <= i_repeat < nrepeat:             # <<<<<<<<<<<<<<
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 */

#line 184 "root_numpy/src/innerjoin.pyx"
      __pyx_t_21 = __pyx_v_nrepeat;

#line 184 "root_numpy/src/innerjoin.pyx"
      for (__pyx_v_i_repeat = 0; __pyx_v_i_repeat < __pyx_t_21; __pyx_v_i_repeat++) {

        /* "root_numpy/src/innerjoin.pyx":185
 *             right_good_index = fk[i_data]
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 */

#line 185 "root_numpy/src/innerjoin.pyx"
        __pyx_t_22 = __pyx_v_i_repeat;

#line 185 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = -1;

#line 185 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_22 < 0) {

#line 185 "root_numpy/src/innerjoin.pyx"
          __pyx_t_22 += __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape;

#line 185 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_22 < 0)) __pyx_t_10 = 0;
        } else 
#line 185 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape)) __pyx_t_10 = 0;

#line 185 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_10 != -1)) {

#line 185 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 185 "root_numpy/src/innerjoin.pyx"
          __PYX_ERR(9, 185, __pyx_L1_error)

#line 185 "root_numpy/src/innerjoin.pyx"
        }

#line 185 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_repeat_result_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":186
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 *             for i_right from 0 <= i_right < nright:
 */

#line 186 "root_numpy/src/innerjoin.pyx"
        __pyx_t_23 = __pyx_v_i_repeat;

#line 186 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = -1;

#line 186 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_23 < 0) {

#line 186 "root_numpy/src/innerjoin.pyx"
          __pyx_t_23 += __pyx_pybuffernd_repeat_indices.diminfo[0].shape;

#line 186 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_23 < 0)) __pyx_t_10 = 0;
        } else 
#line 186 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_repeat_indices.diminfo[0].shape)) __pyx_t_10 = 0;

#line 186 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_10 != -1)) {

#line 186 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 186 "root_numpy/src/innerjoin.pyx"
          __PYX_ERR(9, 186, __pyx_L1_error)

#line 186 "root_numpy/src/innerjoin.pyx"
        }

#line 186 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_repeat_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":187
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source]             # <<<<<<<<<<<<<<
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]
 */

#line 187 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 187, __pyx_L1_error)

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 187 "root_numpy/src/innerjoin.pyx"
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 187, __pyx_L1_error)

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 187 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_ret, __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 187, __pyx_L1_error)

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 187 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i_land, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 187, __pyx_L1_error)

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 187 "root_numpy/src/innerjoin.pyx"
      }

      /* "root_numpy/src/innerjoin.pyx":188
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 *             for i_right from 0 <= i_right < nright:             # <<<<<<<<<<<<<<
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 */

#line 188 "root_numpy/src/innerjoin.pyx"
      __pyx_t_21 = __pyx_v_nright;

#line 188 "root_numpy/src/innerjoin.pyx"
      for (__pyx_v_i_right = 0; __pyx_v_i_right < __pyx_t_21; __pyx_v_i_right++) {

        /* "root_numpy/src/innerjoin.pyx":189
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]             # <<<<<<<<<<<<<<
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 */

#line 189 "root_numpy/src/innerjoin.pyx"
        __pyx_t_24 = __pyx_v_i_right;

#line 189 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = -1;

#line 189 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_24 < 0) {

#line 189 "root_numpy/src/innerjoin.pyx"
          __pyx_t_24 += __pyx_pybuffernd_right_result_indices.diminfo[0].shape;

#line 189 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_24 < 0)) __pyx_t_10 = 0;
        } else 
#line 189 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_right_result_indices.diminfo[0].shape)) __pyx_t_10 = 0;

#line 189 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_10 != -1)) {

#line 189 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 189 "root_numpy/src/innerjoin.pyx"
          __PYX_ERR(9, 189, __pyx_L1_error)

#line 189 "root_numpy/src/innerjoin.pyx"
        }

#line 189 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_right_result_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":190
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 *             ret[i_ret][fk_result_index] = right_good_index
 */

#line 190 "root_numpy/src/innerjoin.pyx"
        __pyx_t_25 = __pyx_v_i_right;

#line 190 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = -1;

#line 190 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_25 < 0) {

#line 190 "root_numpy/src/innerjoin.pyx"
          __pyx_t_25 += __pyx_pybuffernd_right_indices.diminfo[0].shape;

#line 190 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_10 = 0;
        } else 
#line 190 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_right_indices.diminfo[0].shape)) __pyx_t_10 = 0;

#line 190 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_10 != -1)) {

#line 190 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 190 "root_numpy/src/innerjoin.pyx"
          __PYX_ERR(9, 190, __pyx_L1_error)

#line 190 "root_numpy/src/innerjoin.pyx"
        }

#line 190 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_right_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":191
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]             # <<<<<<<<<<<<<<
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1
 */

#line 191 "root_numpy/src/innerjoin.pyx"
        __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 191, __pyx_L1_error)

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 191 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_7, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 191, __pyx_L1_error)

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 191 "root_numpy/src/innerjoin.pyx"
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_right_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 191, __pyx_L1_error)

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 191 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_ret, __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 191, __pyx_L1_error)

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 191 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i_land, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 191, __pyx_L1_error)

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 191 "root_numpy/src/innerjoin.pyx"
      }

      /* "root_numpy/src/innerjoin.pyx":192
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 *             ret[i_ret][fk_result_index] = right_good_index             # <<<<<<<<<<<<<<
 *             i_ret += 1
 *     return ret
 */

#line 192 "root_numpy/src/innerjoin.pyx"
      __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_right_good_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 192, __pyx_L1_error)

#line 192 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 192 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_ret, __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 192, __pyx_L1_error)

#line 192 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 192 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_fk_result_index, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(9, 192, __pyx_L1_error)

#line 192 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 192 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "root_numpy/src/innerjoin.pyx":193
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1             # <<<<<<<<<<<<<<
 *     return ret
 */

#line 193 "root_numpy/src/innerjoin.pyx"
      __pyx_v_i_ret = (__pyx_v_i_ret + 1);

      /* "root_numpy/src/innerjoin.pyx":182
 * 
 *     for i_data from 0 <= i_data < ndata:
 *         if fk_index_good[i_data]:             # <<<<<<<<<<<<<<
 *             right_good_index = fk[i_data]
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 */

#line 182 "root_numpy/src/innerjoin.pyx"
    }

#line 182 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":194
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1
 *     return ret             # <<<<<<<<<<<<<<
 */

#line 194 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 194 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_ret);

#line 194 "root_numpy/src/innerjoin.pyx"
  __pyx_r = __pyx_v_ret;

#line 194 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/innerjoin.pyx":142
 * 
 * 
 * cdef _scalar_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name, new_dtype,
 *                            repeat_columns, stretch_columns,
 */

#line 142 "root_numpy/src/innerjoin.pyx"


#line 142 "root_numpy/src/innerjoin.pyx"
  /* function exit code */

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_L1_error:;

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_15);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_16);

#line 142 "root_numpy/src/innerjoin.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_PyThreadState_declare

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_PyThreadState_assign

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_AddTraceback("_librootnumpy._scalar_fk_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_r = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L2;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_L0:;

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_L2:;

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_first_right);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_fk_index_good);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_ret);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_repeat_result_indices);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_stretch_result_indices);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_right_result_indices);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_x);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 142 "root_numpy/src/innerjoin.pyx"
  return __pyx_r;

#line 142 "root_numpy/src/innerjoin.pyx"
}

/* "array.pxd":91
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 91 "array.pxd"


#line 91 "array.pxd"
/* Python wrapper */

#line 91 "array.pxd"
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 91 "array.pxd"
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 91 "array.pxd"
  int __pyx_r;

#line 91 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 91 "array.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 91 "array.pxd"
__pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 91 "array.pxd"


#line 91 "array.pxd"
  /* function exit code */

#line 91 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 91 "array.pxd"
  return __pyx_r;

#line 91 "array.pxd"
}

#line 91 "array.pxd"


#line 91 "array.pxd"
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  PyObject *__pyx_v_item_count = NULL
#line 91 "array.pxd"
;

#line 91 "array.pxd"
  int __pyx_r;

#line 91 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 91 "array.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 91 "array.pxd"
  char *__pyx_t_2;

#line 91 "array.pxd"
  int __pyx_t_3;

#line 91 "array.pxd"
  PyObject *__pyx_t_4 = NULL;

#line 91 "array.pxd"
  Py_ssize_t __pyx_t_5;

#line 91 "array.pxd"
  int __pyx_t_6;

#line 91 "array.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 91 "array.pxd"
  if (__pyx_v_info != NULL) {

#line 91 "array.pxd"
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 91 "array.pxd"
    __Pyx_GIVEREF(__pyx_v_info->obj);

#line 91 "array.pxd"
  }

  /* "array.pxd":96
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
 */

#line 96 "array.pxd"
  __pyx_t_1 = PyInt_FromSsize_t(Py_SIZE(((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 96, __pyx_L1_error)

#line 96 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 96 "array.pxd"
  __pyx_v_item_count = __pyx_t_1;

#line 96 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":98
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 */

#line 98 "array.pxd"
  __pyx_v_info->suboffsets = NULL;

  /* "array.pxd":99
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
 */

#line 99 "array.pxd"
  __pyx_t_2 = __pyx_v_self->data.as_chars;

#line 99 "array.pxd"
  __pyx_v_info->buf = __pyx_t_2;

  /* "array.pxd":100
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 */

#line 100 "array.pxd"
  __pyx_v_info->readonly = 0;

  /* "array.pxd":101
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
 */

#line 101 "array.pxd"
  __pyx_v_info->ndim = 1;

  /* "array.pxd":102
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
 */

#line 102 "array.pxd"
  __pyx_t_3 = __pyx_v_self->ob_descr->itemsize;

#line 102 "array.pxd"
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "array.pxd":103
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 */

#line 103 "array.pxd"
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_info->itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 103, __pyx_L1_error)

#line 103 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "array.pxd"
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_item_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 103, __pyx_L1_error)

#line 103 "array.pxd"
  __Pyx_GOTREF(__pyx_t_4);

#line 103 "array.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 103 "array.pxd"
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 103, __pyx_L1_error)

#line 103 "array.pxd"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 103 "array.pxd"
  __pyx_v_info->len = __pyx_t_5;

  /* "array.pxd":105
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
 */

#line 105 "array.pxd"
  __pyx_v_info->shape = ((Py_ssize_t *)PyObject_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "array.pxd":106
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */

#line 106 "array.pxd"
  __pyx_t_6 = ((!(__pyx_v_info->shape != 0)) != 0);

#line 106 "array.pxd"
  if (__pyx_t_6) {

    /* "array.pxd":107
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
 */

#line 107 "array.pxd"
    PyErr_NoMemory(); __PYX_ERR(10, 107, __pyx_L1_error)

    /* "array.pxd":106
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */

#line 106 "array.pxd"
  }

  /* "array.pxd":108
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
 */

#line 108 "array.pxd"
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_item_count); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 108, __pyx_L1_error)

#line 108 "array.pxd"
  (__pyx_v_info->shape[0]) = __pyx_t_5;

  /* "array.pxd":109
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
 */

#line 109 "array.pxd"
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "array.pxd":111
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 */

#line 111 "array.pxd"
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "array.pxd":112
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
 */

#line 112 "array.pxd"
  __pyx_t_3 = __pyx_v_self->ob_descr->typecode;

#line 112 "array.pxd"
  (__pyx_v_info->format[0]) = __pyx_t_3;

  /* "array.pxd":113
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
 */

#line 113 "array.pxd"
  (__pyx_v_info->format[1]) = 0;

  /* "array.pxd":114
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 */

#line 114 "array.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 114 "array.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 114 "array.pxd"
  __Pyx_GOTREF(__pyx_v_info->obj);

#line 114 "array.pxd"
  __Pyx_DECREF(__pyx_v_info->obj);

#line 114 "array.pxd"
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "array.pxd":91
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 91 "array.pxd"


#line 91 "array.pxd"
  /* function exit code */

#line 91 "array.pxd"
  __pyx_r = 0;

#line 91 "array.pxd"
  goto __pyx_L0;

#line 91 "array.pxd"
  __pyx_L1_error:;

#line 91 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 91 "array.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 91 "array.pxd"
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 91 "array.pxd"
  __pyx_r = -1;

#line 91 "array.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

#line 91 "array.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 91 "array.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

#line 91 "array.pxd"
  }

#line 91 "array.pxd"
  goto __pyx_L2;

#line 91 "array.pxd"
  __pyx_L0:;

#line 91 "array.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

#line 91 "array.pxd"
    __Pyx_GOTREF(Py_None);

#line 91 "array.pxd"
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

#line 91 "array.pxd"
  }

#line 91 "array.pxd"
  __pyx_L2:;

#line 91 "array.pxd"
  __Pyx_XDECREF(__pyx_v_item_count);

#line 91 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 91 "array.pxd"
  return __pyx_r;

#line 91 "array.pxd"
}

/* "array.pxd":116
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

#line 116 "array.pxd"


#line 116 "array.pxd"
/* Python wrapper */

#line 116 "array.pxd"
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/

#line 116 "array.pxd"
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 116 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 116 "array.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);

#line 116 "array.pxd"
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

#line 116 "array.pxd"


#line 116 "array.pxd"
  /* function exit code */

#line 116 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 116 "array.pxd"
}

#line 116 "array.pxd"


#line 116 "array.pxd"
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 116 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 116 "array.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "array.pxd":117
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyObject_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
 */

#line 117 "array.pxd"
  PyObject_Free(__pyx_v_info->shape);

  /* "array.pxd":116
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

#line 116 "array.pxd"


#line 116 "array.pxd"
  /* function exit code */

#line 116 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 116 "array.pxd"
}

/* "array.pxd":128
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

#line 128 "array.pxd"


#line 128 "array.pxd"
static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = NULL
#line 128 "array.pxd"
;

#line 128 "array.pxd"
  arrayobject *__pyx_r = NULL;

#line 128 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 128 "array.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 128 "array.pxd"
  int __pyx_t_2;

#line 128 "array.pxd"
  int __pyx_t_3;

#line 128 "array.pxd"
  int __pyx_t_4;

#line 128 "array.pxd"
  __Pyx_RefNannySetupContext("clone", 0);

  /* "array.pxd":132
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 */

#line 132 "array.pxd"
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 132, __pyx_L1_error)

#line 132 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 132 "array.pxd"
  __pyx_v_op = ((arrayobject *)__pyx_t_1);

#line 132 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":133
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */

#line 133 "array.pxd"
  __pyx_t_3 = (__pyx_v_zero != 0);

#line 133 "array.pxd"
  if (__pyx_t_3) {

#line 133 "array.pxd"
  } else {

#line 133 "array.pxd"
    __pyx_t_2 = __pyx_t_3;

#line 133 "array.pxd"
    goto __pyx_L4_bool_binop_done;

#line 133 "array.pxd"
  }

#line 133 "array.pxd"
  __pyx_t_3 = (((PyObject *)__pyx_v_op) != Py_None);

#line 133 "array.pxd"
  __pyx_t_4 = (__pyx_t_3 != 0);

#line 133 "array.pxd"
  __pyx_t_2 = __pyx_t_4;

#line 133 "array.pxd"
  __pyx_L4_bool_binop_done:;

#line 133 "array.pxd"
  if (__pyx_t_2) {

    /* "array.pxd":134
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */

#line 134 "array.pxd"
    memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize));

    /* "array.pxd":133
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */

#line 133 "array.pxd"
  }

  /* "array.pxd":135
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
 */

#line 135 "array.pxd"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 135 "array.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_v_op));

#line 135 "array.pxd"
  __pyx_r = __pyx_v_op;

#line 135 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":128
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

#line 128 "array.pxd"


#line 128 "array.pxd"
  /* function exit code */

#line 128 "array.pxd"
  __pyx_L1_error:;

#line 128 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 128 "array.pxd"
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 128 "array.pxd"
  __pyx_r = 0;

#line 128 "array.pxd"
  __pyx_L0:;

#line 128 "array.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_op);

#line 128 "array.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 128 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 128 "array.pxd"
  return __pyx_r;

#line 128 "array.pxd"
}

/* "array.pxd":137
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

#line 137 "array.pxd"


#line 137 "array.pxd"
static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = NULL
#line 137 "array.pxd"
;

#line 137 "array.pxd"
  arrayobject *__pyx_r = NULL;

#line 137 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 137 "array.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 137 "array.pxd"
  __Pyx_RefNannySetupContext("copy", 0);

  /* "array.pxd":139
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
 */

#line 139 "array.pxd"
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 139, __pyx_L1_error)

#line 139 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 139 "array.pxd"
  __pyx_v_op = ((arrayobject *)__pyx_t_1);

#line 139 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":140
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */

#line 140 "array.pxd"
  memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize));

  /* "array.pxd":141
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
 */

#line 141 "array.pxd"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 141 "array.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_v_op));

#line 141 "array.pxd"
  __pyx_r = __pyx_v_op;

#line 141 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":137
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

#line 137 "array.pxd"


#line 137 "array.pxd"
  /* function exit code */

#line 137 "array.pxd"
  __pyx_L1_error:;

#line 137 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 137 "array.pxd"
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 137 "array.pxd"
  __pyx_r = 0;

#line 137 "array.pxd"
  __pyx_L0:;

#line 137 "array.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_op);

#line 137 "array.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 137 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 137 "array.pxd"
  return __pyx_r;

#line 137 "array.pxd"
}

/* "array.pxd":143
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

#line 143 "array.pxd"


#line 143 "array.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize
#line 143 "array.pxd"
;
  Py_ssize_t __pyx_v_origsize
#line 143 "array.pxd"
;

#line 143 "array.pxd"
  int __pyx_r;

#line 143 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 143 "array.pxd"
  int __pyx_t_1;

#line 143 "array.pxd"
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "array.pxd":147
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 */

#line 147 "array.pxd"
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;

#line 147 "array.pxd"
  __pyx_v_itemsize = __pyx_t_1;

  /* "array.pxd":148
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 */

#line 148 "array.pxd"
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "array.pxd":149
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
 */

#line 149 "array.pxd"
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(10, 149, __pyx_L1_error)

  /* "array.pxd":150
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

#line 150 "array.pxd"
  memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize));

  /* "array.pxd":151
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
 */

#line 151 "array.pxd"
  __pyx_r = 0;

#line 151 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":143
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

#line 143 "array.pxd"


#line 143 "array.pxd"
  /* function exit code */

#line 143 "array.pxd"
  __pyx_L1_error:;

#line 143 "array.pxd"
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 143 "array.pxd"
  __pyx_r = -1;

#line 143 "array.pxd"
  __pyx_L0:;

#line 143 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 143 "array.pxd"
  return __pyx_r;

#line 143 "array.pxd"
}

/* "array.pxd":153
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

#line 153 "array.pxd"


#line 153 "array.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {

#line 153 "array.pxd"
  int __pyx_r;

#line 153 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 153 "array.pxd"
  int __pyx_t_1;

#line 153 "array.pxd"
  int __pyx_t_2;

#line 153 "array.pxd"
  __Pyx_RefNannySetupContext("extend", 0);

  /* "array.pxd":155
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */

#line 155 "array.pxd"
  __pyx_t_1 = ((__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode) != 0);

#line 155 "array.pxd"
  if (__pyx_t_1) {

    /* "array.pxd":156
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 */

#line 156 "array.pxd"
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == 0)) __PYX_ERR(10, 156, __pyx_L1_error)

    /* "array.pxd":155
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */

#line 155 "array.pxd"
  }

  /* "array.pxd":157
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self):
 */

#line 157 "array.pxd"
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(10, 157, __pyx_L1_error)

#line 157 "array.pxd"
  __pyx_r = __pyx_t_2;

#line 157 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":153
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

#line 153 "array.pxd"


#line 153 "array.pxd"
  /* function exit code */

#line 153 "array.pxd"
  __pyx_L1_error:;

#line 153 "array.pxd"
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 153 "array.pxd"
  __pyx_r = -1;

#line 153 "array.pxd"
  __pyx_L0:;

#line 153 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 153 "array.pxd"
  return __pyx_r;

#line 153 "array.pxd"
}

/* "array.pxd":159
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

#line 159 "array.pxd"


#line 159 "array.pxd"
static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {

#line 159 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 159 "array.pxd"
  __Pyx_RefNannySetupContext("zero", 0);

  /* "array.pxd":161
 * cdef inline void zero(array self):
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 */

#line 161 "array.pxd"
  memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize));

  /* "array.pxd":159
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

#line 159 "array.pxd"


#line 159 "array.pxd"
  /* function exit code */

#line 159 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 159 "array.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
/* Python wrapper */

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
__pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_i
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_ndim
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_endian_detector
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_little_endian
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_t
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  char *__pyx_v_f
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyArray_Descr *__pyx_v_descr = 0
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_offset
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_hasfields
#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_1;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_2;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_4;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_5;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_6 = NULL;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  char *__pyx_t_7;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL) {

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(__pyx_v_info->obj);

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */

#line 203 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);

#line 203 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

#line 203 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = 0;

#line 203 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 203 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */

#line 206 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_endian_detector = 1;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */

#line 207 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 209 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */

#line 211 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);

#line 211 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */

#line 212 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_copy_shape = 1;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */

#line 211 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L4;

#line 211 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_copy_shape = 0;

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L4:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */

#line 216 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);

#line 216 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 216 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 216 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 216 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L6_bool_binop_done;

#line 216 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L6_bool_binop_done:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */

#line 216 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 218, __pyx_L1_error)

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __PYX_ERR(11, 218, __pyx_L1_error)

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */

#line 216 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */

#line 220 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);

#line 220 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 220 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 220 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 220 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L9_bool_binop_done;

#line 220 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */

#line 221 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);

#line 221 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 221 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L9_bool_binop_done:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */

#line 220 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 222 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 222, __pyx_L1_error)

#line 222 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 222 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 222 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 222 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __PYX_ERR(11, 222, __pyx_L1_error)

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */

#line 220 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */

#line 224 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */

#line 225 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */

#line 226 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (__pyx_v_copy_shape != 0);

#line 226 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */

#line 229 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */

#line 231 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __pyx_v_ndim;

#line 231 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 231 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_i = __pyx_t_5;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */

#line 232 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */

#line 233 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);

#line 233 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */

#line 226 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L11;

#line 226 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */

#line 235 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 235 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */

#line 236 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));

#line 236 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 236 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L11:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */

#line 237 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->suboffsets = NULL;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */

#line 238 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */

#line 239 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */

#line 242 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_f = NULL;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */

#line 243 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);

#line 243 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_INCREF(__pyx_t_3);

#line 243 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);

#line 243 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_3 = 0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L15_bool_binop_done;

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L15_bool_binop_done:;

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */

#line 250 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(Py_None);

#line 250 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(Py_None);

#line 250 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 250 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 250 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = Py_None;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L14;

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L14:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __pyx_v_descr->type_num;

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_t = __pyx_t_4;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_2) {

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L20_next_or;

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = (__pyx_v_little_endian != 0);

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_2) {

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_1 = __pyx_t_2;

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L19_bool_binop_done;

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L20_next_or:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_2) {

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_1 = __pyx_t_2;

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L19_bool_binop_done;

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L19_bool_binop_done:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_1) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 259, __pyx_L1_error)

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(11, 259, __pyx_L1_error)

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */

#line 260 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    switch (__pyx_v_t) {

#line 260 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_BYTE:

#line 260 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"b");

#line 260 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */

#line 261 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_UBYTE:

#line 261 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"B");

#line 261 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */

#line 262 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_SHORT:

#line 262 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"h");

#line 262 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */

#line 263 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_USHORT:

#line 263 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"H");

#line 263 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */

#line 264 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_INT:

#line 264 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"i");

#line 264 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */

#line 265 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_UINT:

#line 265 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"I");

#line 265 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */

#line 266 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONG:

#line 266 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"l");

#line 266 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */

#line 267 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_ULONG:

#line 267 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"L");

#line 267 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */

#line 268 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONGLONG:

#line 268 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"q");

#line 268 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */

#line 269 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_ULONGLONG:

#line 269 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"Q");

#line 269 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */

#line 270 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_FLOAT:

#line 270 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"f");

#line 270 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */

#line 271 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_DOUBLE:

#line 271 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"d");

#line 271 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */

#line 272 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONGDOUBLE:

#line 272 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"g");

#line 272 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */

#line 273 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CFLOAT:

#line 273 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"Zf");

#line 273 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CDOUBLE:

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"Zd");

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */

#line 275 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CLONGDOUBLE:

#line 275 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"Zg");

#line 275 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_OBJECT:

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"O");

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      default:

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 278, __pyx_L1_error)

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 278, __pyx_L1_error)

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 278, __pyx_L1_error)

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GIVEREF(__pyx_t_6);

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = 0;

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 278, __pyx_L1_error)

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(11, 278, __pyx_L1_error)

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */

#line 279 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->format = __pyx_v_f;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */

#line 280 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = 0;

#line 280 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */

#line 282 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 282 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */

#line 283 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_info->format[0]) = '^';

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */

#line 284 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_offset = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */

#line 285 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(11, 285, __pyx_L1_error)

#line 285 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_f = __pyx_t_7;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_f[0]) = '\x00';

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_6);

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = -1;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L2;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(Py_None);

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L2:;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 197 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
/* Python wrapper */

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_1;

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 291 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);

#line 291 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */

#line 292 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    free(__pyx_v_info->format);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 291 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */

#line 293 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);

#line 293 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */

#line 294 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    free(__pyx_v_info->strides);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */

#line 293 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 771, __pyx_L1_error)

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 770 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 774, __pyx_L1_error)

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 773 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 777, __pyx_L1_error)

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 776 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 780, __pyx_L1_error)

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 779 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 783, __pyx_L1_error)

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 782 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0
#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_endian_detector
#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_little_endian
#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_fields = 0
#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_childname = NULL
#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_new_offset = NULL
#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_t = NULL
#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  char *__pyx_r;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  Py_ssize_t __pyx_t_2;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_4 = NULL;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_5;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_6;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_7;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  long __pyx_t_8;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  char *__pyx_t_9;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */

#line 790 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_endian_detector = 1;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */

#line 791 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (unlikely(__pyx_v_descr->names == Py_None)) {

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __PYX_ERR(11, 794, __pyx_L1_error)

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  for (;;) {

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(11, 794, __pyx_L1_error)

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    #else

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 794, __pyx_L1_error)

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    #endif

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (unlikely(__pyx_v_descr->fields == Py_None)) {

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(11, 795, __pyx_L1_error)

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 795, __pyx_L1_error)

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(11, 795, __pyx_L1_error)

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (likely(__pyx_v_fields != Py_None)) {

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      PyObject* sequence = __pyx_v_fields;

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      Py_ssize_t size = Py_SIZE(sequence);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #else

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      Py_ssize_t size = PySequence_Size(sequence);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #endif

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (unlikely(size != 2)) {

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __PYX_ERR(11, 796, __pyx_L1_error)

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_INCREF(__pyx_t_3);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_INCREF(__pyx_t_4);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #else

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 796, __pyx_L1_error)

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 796, __pyx_L1_error)

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #endif

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(11, 796, __pyx_L1_error)

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(11, 796, __pyx_L1_error)

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 798, __pyx_L1_error)

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_4);

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 798, __pyx_L1_error)

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 798, __pyx_L1_error)

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 799, __pyx_L1_error)

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(11, 799, __pyx_L1_error)

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_7) {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L8_next_or;

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = (__pyx_v_little_endian != 0);

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_7) {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __pyx_t_7;

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L7_bool_binop_done;

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L8_next_or:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_7) {

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __pyx_t_7;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L7_bool_binop_done;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = __pyx_t_7;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L7_bool_binop_done:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 803, __pyx_L1_error)

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(11, 803, __pyx_L1_error)

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    while (1) {

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 813, __pyx_L1_error)

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 813, __pyx_L1_error)

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 813, __pyx_L1_error)

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (!__pyx_t_6) break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */

#line 814 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_f[0]) = 0x78;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */

#line 815 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */

#line 816 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_8 = 0;

#line 816 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);

#line 816 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */

#line 818 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_8 = 0;

#line 818 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */

#line 820 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);

#line 820 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 821, __pyx_L1_error)

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = 0;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */

#line 822 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);

#line 822 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

        /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 823, __pyx_L1_error)

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_4);

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __PYX_ERR(11, 823, __pyx_L1_error)

        /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */

#line 822 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 826, __pyx_L1_error)

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 826, __pyx_L1_error)

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 826, __pyx_L1_error)

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 98;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 827, __pyx_L1_error)

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 827, __pyx_L1_error)

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 827, __pyx_L1_error)

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 66;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 828, __pyx_L1_error)

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 828, __pyx_L1_error)

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 828, __pyx_L1_error)

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x68;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 829, __pyx_L1_error)

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 829, __pyx_L1_error)

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 829, __pyx_L1_error)

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 72;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 830, __pyx_L1_error)

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 830, __pyx_L1_error)

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 830, __pyx_L1_error)

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x69;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 831, __pyx_L1_error)

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 831, __pyx_L1_error)

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 831, __pyx_L1_error)

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 73;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 832, __pyx_L1_error)

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 832, __pyx_L1_error)

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 832, __pyx_L1_error)

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x6C;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 833, __pyx_L1_error)

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 833, __pyx_L1_error)

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 833, __pyx_L1_error)

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 76;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 834, __pyx_L1_error)

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 834, __pyx_L1_error)

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 834, __pyx_L1_error)

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x71;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 835, __pyx_L1_error)

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 835, __pyx_L1_error)

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 835, __pyx_L1_error)

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 81;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 836, __pyx_L1_error)

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 836, __pyx_L1_error)

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 836, __pyx_L1_error)

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x66;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 837, __pyx_L1_error)

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 837, __pyx_L1_error)

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 837, __pyx_L1_error)

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x64;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 838, __pyx_L1_error)

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 838, __pyx_L1_error)

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 838, __pyx_L1_error)

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x67;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 839, __pyx_L1_error)

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 839, __pyx_L1_error)

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 839, __pyx_L1_error)

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 0x66;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 840, __pyx_L1_error)

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 840, __pyx_L1_error)

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 840, __pyx_L1_error)

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 0x64;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 841, __pyx_L1_error)

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 841, __pyx_L1_error)

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 841, __pyx_L1_error)

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 0x67;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 842, __pyx_L1_error)

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 842, __pyx_L1_error)

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(11, 842, __pyx_L1_error)

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 79;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      /*else*/ {

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 844, __pyx_L1_error)

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 844, __pyx_L1_error)

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_4);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GIVEREF(__pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = 0;

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 844, __pyx_L1_error)

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __PYX_ERR(11, 844, __pyx_L1_error)

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_L15:;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */

#line 845 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */

#line 820 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L13;

#line 820 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    /*else*/ {

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(11, 849, __pyx_L1_error)

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_t_9;

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L13:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 850 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_v_f;

#line 850 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = NULL;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_child);

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_fields);

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_childname);

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_new_offset);

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_t);

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 785 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr
#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_1;

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_2;

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (__pyx_v_base == Py_None);

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */

#line 969 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_baseptr = NULL;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L3;

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */

#line 971 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 971 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    Py_INCREF(__pyx_v_base);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */

#line 972 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);

#line 972 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 972 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L3:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */

#line 973 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */

#line 974 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_1;

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 977 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);

#line 977 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(Py_None);

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = Py_None;

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 977 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = ((PyObject *)__pyx_v_arr->base);

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length
#line 13 "string.from_py"
;
  char *__pyx_v_data
#line 13 "string.from_py"
;

#line 13 "string.from_py"
  std::string __pyx_r;

#line 13 "string.from_py"
  __Pyx_RefNannyDeclarations

#line 13 "string.from_py"
  char *__pyx_t_1;

#line 13 "string.from_py"
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */

#line 15 "string.from_py"
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(12, 15, __pyx_L1_error)

#line 15 "string.from_py"
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 16 "string.from_py"
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);

#line 16 "string.from_py"
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
  /* function exit code */

#line 13 "string.from_py"
  __pyx_L1_error:;

#line 13 "string.from_py"
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 13 "string.from_py"
  __pyx_L0:;

#line 13 "string.from_py"
  __Pyx_RefNannyFinishContext();

#line 13 "string.from_py"
  return __pyx_r;

#line 13 "string.from_py"
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 31 "string.to_py"


#line 31 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {

#line 31 "string.to_py"
  PyObject *__pyx_r = NULL;

#line 31 "string.to_py"
  __Pyx_RefNannyDeclarations

#line 31 "string.to_py"
  PyObject *__pyx_t_1 = NULL;

#line 31 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */

#line 32 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 32 "string.to_py"
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 32, __pyx_L1_error)

#line 32 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 32 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 32 "string.to_py"
  __pyx_t_1 = 0;

#line 32 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 31 "string.to_py"


#line 31 "string.to_py"
  /* function exit code */

#line 31 "string.to_py"
  __pyx_L1_error:;

#line 31 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 31 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 31 "string.to_py"
  __pyx_r = 0;

#line 31 "string.to_py"
  __pyx_L0:;

#line 31 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 31 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 31 "string.to_py"
  return __pyx_r;

#line 31 "string.to_py"
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 37 "string.to_py"


#line 37 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {

#line 37 "string.to_py"
  PyObject *__pyx_r = NULL;

#line 37 "string.to_py"
  __Pyx_RefNannyDeclarations

#line 37 "string.to_py"
  PyObject *__pyx_t_1 = NULL;

#line 37 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */

#line 38 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 38 "string.to_py"
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 38, __pyx_L1_error)

#line 38 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 38 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 38 "string.to_py"
  __pyx_t_1 = 0;

#line 38 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 37 "string.to_py"


#line 37 "string.to_py"
  /* function exit code */

#line 37 "string.to_py"
  __pyx_L1_error:;

#line 37 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 37 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 37 "string.to_py"
  __pyx_r = 0;

#line 37 "string.to_py"
  __pyx_L0:;

#line 37 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 37 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 37 "string.to_py"
  return __pyx_r;

#line 37 "string.to_py"
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 43 "string.to_py"


#line 43 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {

#line 43 "string.to_py"
  PyObject *__pyx_r = NULL;

#line 43 "string.to_py"
  __Pyx_RefNannyDeclarations

#line 43 "string.to_py"
  PyObject *__pyx_t_1 = NULL;

#line 43 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */

#line 44 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 44 "string.to_py"
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 44, __pyx_L1_error)

#line 44 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 44 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 44 "string.to_py"
  __pyx_t_1 = 0;

#line 44 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 43 "string.to_py"


#line 43 "string.to_py"
  /* function exit code */

#line 43 "string.to_py"
  __pyx_L1_error:;

#line 43 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 43 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 43 "string.to_py"
  __pyx_r = 0;

#line 43 "string.to_py"
  __pyx_L0:;

#line 43 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 43 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 43 "string.to_py"
  return __pyx_r;

#line 43 "string.to_py"
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 49 "string.to_py"


#line 49 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {

#line 49 "string.to_py"
  PyObject *__pyx_r = NULL;

#line 49 "string.to_py"
  __Pyx_RefNannyDeclarations

#line 49 "string.to_py"
  PyObject *__pyx_t_1 = NULL;

#line 49 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */

#line 50 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 50 "string.to_py"
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 50, __pyx_L1_error)

#line 50 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 50 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 50 "string.to_py"
  __pyx_t_1 = 0;

#line 50 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 49 "string.to_py"


#line 49 "string.to_py"
  /* function exit code */

#line 49 "string.to_py"
  __pyx_L1_error:;

#line 49 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 49 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 49 "string.to_py"
  __pyx_r = 0;

#line 49 "string.to_py"
  __pyx_L0:;

#line 49 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 49 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 49 "string.to_py"
  return __pyx_r;

#line 49 "string.to_py"
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

#line 55 "string.to_py"


#line 55 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {

#line 55 "string.to_py"
  PyObject *__pyx_r = NULL;

#line 55 "string.to_py"
  __Pyx_RefNannyDeclarations

#line 55 "string.to_py"
  PyObject *__pyx_t_1 = NULL;

#line 55 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */

#line 56 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 56 "string.to_py"
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 56, __pyx_L1_error)

#line 56 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 56 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 56 "string.to_py"
  __pyx_t_1 = 0;

#line 56 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

#line 55 "string.to_py"


#line 55 "string.to_py"
  /* function exit code */

#line 55 "string.to_py"
  __pyx_L1_error:;

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 55 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 55 "string.to_py"
  __pyx_r = 0;

#line 55 "string.to_py"
  __pyx_L0:;

#line 55 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 55 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 55 "string.to_py"
  return __pyx_r;

#line 55 "string.to_py"
}

#line 55 "string.to_py"


#line 55 "string.to_py"
static PyMethodDef __pyx_methods[] = {

#line 55 "string.to_py"
  {"_blockwise_inner_join", (PyCFunction)__pyx_pw_13_librootnumpy_129_blockwise_inner_join, METH_VARARGS|METH_KEYWORDS, 0},

#line 55 "string.to_py"
  {0, 0, 0, 0}

#line 55 "string.to_py"
};

#line 55 "string.to_py"


#line 55 "string.to_py"
#if PY_MAJOR_VERSION >= 3

#line 55 "string.to_py"
static struct PyModuleDef __pyx_moduledef = {

#line 55 "string.to_py"
  #if PY_VERSION_HEX < 0x03020000

#line 55 "string.to_py"
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },

#line 55 "string.to_py"
  #else

#line 55 "string.to_py"
    PyModuleDef_HEAD_INIT,

#line 55 "string.to_py"
  #endif

#line 55 "string.to_py"
    "_librootnumpy",

#line 55 "string.to_py"
    0, /* m_doc */

#line 55 "string.to_py"
    -1, /* m_size */

#line 55 "string.to_py"
    __pyx_methods /* m_methods */,

#line 55 "string.to_py"
    NULL, /* m_reload */

#line 55 "string.to_py"
    NULL, /* m_traverse */

#line 55 "string.to_py"
    NULL, /* m_clear */

#line 55 "string.to_py"
    NULL /* m_free */

#line 55 "string.to_py"
};

#line 55 "string.to_py"
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0_d, __pyx_k_0_d, sizeof(__pyx_k_0_d), 0, 0, 1, 0},
  {&__pyx_kp_s_0_d_C, __pyx_k_0_d_C, sizeof(__pyx_k_0_d_C), 0, 0, 1, 0},
  {&__pyx_kp_s_0_is_not_a_ROOT_class, __pyx_k_0_is_not_a_ROOT_class, sizeof(__pyx_k_0_is_not_a_ROOT_class), 0, 0, 1, 0},
  {&__pyx_kp_s_1_byte, __pyx_k_1_byte, sizeof(__pyx_k_1_byte), 0, 0, 1, 0},
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_b_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 0, 1},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_GB, __pyx_k_GB, sizeof(__pyx_k_GB), 0, 0, 1, 1},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_LEAF_PATTERN, __pyx_k_LEAF_PATTERN, sizeof(__pyx_k_LEAF_PATTERN), 0, 0, 1, 1},
  {&__pyx_n_s_Long64_t, __pyx_k_Long64_t, sizeof(__pyx_k_Long64_t), 0, 0, 1, 1},
  {&__pyx_n_s_MB, __pyx_k_MB, sizeof(__pyx_k_MB), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 1, 1},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_n_s_PB, __pyx_k_PB, sizeof(__pyx_k_PB), 0, 0, 1, 1},
  {&__pyx_n_s_RootNumpyUnconvertibleWarning, __pyx_k_RootNumpyUnconvertibleWarning, sizeof(__pyx_k_RootNumpyUnconvertibleWarning), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeWarning, __pyx_k_RuntimeWarning, sizeof(__pyx_k_RuntimeWarning), 0, 0, 1, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_n_s_SPECIAL_TYPEDEFS, __pyx_k_SPECIAL_TYPEDEFS, sizeof(__pyx_k_SPECIAL_TYPEDEFS), 0, 0, 1, 1},
  {&__pyx_kp_s_S_0_d, __pyx_k_S_0_d, sizeof(__pyx_k_S_0_d), 0, 0, 1, 0},
  {&__pyx_n_s_TB, __pyx_k_TB, sizeof(__pyx_k_TB), 0, 0, 1, 1},
  {&__pyx_n_s_TDirectoryFile, __pyx_k_TDirectoryFile, sizeof(__pyx_k_TDirectoryFile), 0, 0, 1, 1},
  {&__pyx_n_s_TTree, __pyx_k_TTree, sizeof(__pyx_k_TTree), 0, 0, 1, 1},
  {&__pyx_n_s_TYPES, __pyx_k_TYPES, sizeof(__pyx_k_TYPES), 0, 0, 1, 1},
  {&__pyx_n_s_TYPES_NUMPY2ROOT, __pyx_k_TYPES_NUMPY2ROOT, sizeof(__pyx_k_TYPES_NUMPY2ROOT), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ULong64_t, __pyx_k_ULong64_t, sizeof(__pyx_k_ULong64_t), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 0},
  {&__pyx_kp_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 0},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_s__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 1, 0},
  {&__pyx_kp_s__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 0},
  {&__pyx_n_b__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 0, 0, 1},
  {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
  {&__pyx_kp_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 0},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arr, __pyx_k_arr, sizeof(__pyx_k_arr), 0, 0, 1, 1},
  {&__pyx_n_s_arr_2, __pyx_k_arr_2, sizeof(__pyx_k_arr_2), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_array2root, __pyx_k_array2root, sizeof(__pyx_k_array2root), 0, 0, 1, 1},
  {&__pyx_n_s_array2tree_toCObj, __pyx_k_array2tree_toCObj, sizeof(__pyx_k_array2tree_toCObj), 0, 0, 1, 1},
  {&__pyx_n_s_array_c, __pyx_k_array_c, sizeof(__pyx_k_array_c), 0, 0, 1, 1},
  {&__pyx_n_s_array_d, __pyx_k_array_d, sizeof(__pyx_k_array_d), 0, 0, 1, 1},
  {&__pyx_n_s_array_f, __pyx_k_array_f, sizeof(__pyx_k_array_f), 0, 0, 1, 1},
  {&__pyx_n_s_array_h1c, __pyx_k_array_h1c, sizeof(__pyx_k_array_h1c), 0, 0, 1, 1},
  {&__pyx_n_s_array_h2c, __pyx_k_array_h2c, sizeof(__pyx_k_array_h2c), 0, 0, 1, 1},
  {&__pyx_n_s_array_h3c, __pyx_k_array_h3c, sizeof(__pyx_k_array_h3c), 0, 0, 1, 1},
  {&__pyx_n_s_array_i, __pyx_k_array_i, sizeof(__pyx_k_array_i), 0, 0, 1, 1},
  {&__pyx_n_s_array_l, __pyx_k_array_l, sizeof(__pyx_k_array_l), 0, 0, 1, 1},
  {&__pyx_n_s_array_ravel_view, __pyx_k_array_ravel_view, sizeof(__pyx_k_array_ravel_view), 0, 0, 1, 1},
  {&__pyx_n_s_array_s, __pyx_k_array_s, sizeof(__pyx_k_array_s), 0, 0, 1, 1},
  {&__pyx_n_s_atexit, __pyx_k_atexit, sizeof(__pyx_k_atexit), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_bin_idx, __pyx_k_bin_idx, sizeof(__pyx_k_bin_idx), 0, 0, 1, 1},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_kp_s_branch_0_has_no_leaves, __pyx_k_branch_0_has_no_leaves, sizeof(__pyx_k_branch_0_has_no_leaves), 0, 0, 1, 0},
  {&__pyx_n_s_branches, __pyx_k_branches, sizeof(__pyx_k_branches), 0, 0, 1, 1},
  {&__pyx_kp_s_branches_is_an_empty_list, __pyx_k_branches_is_an_empty_list, sizeof(__pyx_k_branches_is_an_empty_list), 0, 0, 1, 0},
  {&__pyx_n_s_bytes, __pyx_k_bytes, sizeof(__pyx_k_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_cache_size, __pyx_k_cache_size, sizeof(__pyx_k_cache_size), 0, 0, 1, 1},
  {&__pyx_kp_s_cannot_access_tree_in_current_fi, __pyx_k_cannot_access_tree_in_current_fi, sizeof(__pyx_k_cannot_access_tree_in_current_fi), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_convert_leaf_0_of_branch, __pyx_k_cannot_convert_leaf_0_of_branch, sizeof(__pyx_k_cannot_convert_leaf_0_of_branch), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_convert_leaf_0_of_branch_2, __pyx_k_cannot_convert_leaf_0_of_branch_2, sizeof(__pyx_k_cannot_convert_leaf_0_of_branch_2), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_open_current_file, __pyx_k_cannot_open_current_file, sizeof(__pyx_k_cannot_open_current_file), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_open_file_0, __pyx_k_cannot_open_file_0, sizeof(__pyx_k_cannot_open_file_0), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_read_0, __pyx_k_cannot_read_0, sizeof(__pyx_k_cannot_read_0), 0, 0, 1, 0},
  {&__pyx_n_s_chain, __pyx_k_chain, sizeof(__pyx_k_chain), 0, 0, 1, 1},
  {&__pyx_kp_s_chain_is_empty, __pyx_k_chain_is_empty, sizeof(__pyx_k_chain_is_empty), 0, 0, 1, 0},
  {&__pyx_n_b_char, __pyx_k_char, sizeof(__pyx_k_char), 0, 0, 0, 1},
  {&__pyx_n_s_char, __pyx_k_char, sizeof(__pyx_k_char), 0, 0, 1, 1},
  {&__pyx_n_s_classes, __pyx_k_classes, sizeof(__pyx_k_classes), 0, 0, 1, 1},
  {&__pyx_n_s_cleanup, __pyx_k_cleanup, sizeof(__pyx_k_cleanup), 0, 0, 1, 1},
  {&__pyx_n_s_clsname, __pyx_k_clsname, sizeof(__pyx_k_clsname), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_compile, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {&__pyx_n_s_content, __pyx_k_content, sizeof(__pyx_k_content), 0, 0, 1, 1},
  {&__pyx_kp_s_converter_for_r_is_not_implement, __pyx_k_converter_for_r_is_not_implement, sizeof(__pyx_k_converter_for_r_is_not_implement), 0, 0, 1, 0},
  {&__pyx_n_s_coord, __pyx_k_coord, sizeof(__pyx_k_coord), 0, 0, 1, 1},
  {&__pyx_kp_s_could_not_allocate_d_bytes, __pyx_k_could_not_allocate_d_bytes, sizeof(__pyx_k_could_not_allocate_d_bytes), 0, 0, 1, 0},
  {&__pyx_kp_s_could_not_compile_selection_expr, __pyx_k_could_not_compile_selection_expr, sizeof(__pyx_k_could_not_compile_selection_expr), 0, 0, 1, 0},
  {&__pyx_kp_s_could_not_find_formula_converter, __pyx_k_could_not_find_formula_converter, sizeof(__pyx_k_could_not_find_formula_converter), 0, 0, 1, 0},
  {&__pyx_n_s_count_nonzero, __pyx_k_count_nonzero, sizeof(__pyx_k_count_nonzero), 0, 0, 1, 1},
  {&__pyx_n_s_ctype, __pyx_k_ctype, sizeof(__pyx_k_ctype), 0, 0, 1, 1},
  {&__pyx_n_s_ctypename, __pyx_k_ctypename, sizeof(__pyx_k_ctypename), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_b_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 0, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtypecode, __pyx_k_dtypecode, sizeof(__pyx_k_dtypecode), 0, 0, 1, 1},
  {&__pyx_kp_s_duplicate_branches_requested, __pyx_k_duplicate_branches_requested, sizeof(__pyx_k_duplicate_branches_requested), 0, 0, 1, 0},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_f1, __pyx_k_evaluate_f1, sizeof(__pyx_k_evaluate_f1), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_f2, __pyx_k_evaluate_f2, sizeof(__pyx_k_evaluate_f2), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_f3, __pyx_k_evaluate_f3, sizeof(__pyx_k_evaluate_f3), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_formula_1d, __pyx_k_evaluate_formula_1d, sizeof(__pyx_k_evaluate_formula_1d), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_formula_2d, __pyx_k_evaluate_formula_2d, sizeof(__pyx_k_evaluate_formula_2d), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_formula_3d, __pyx_k_evaluate_formula_3d, sizeof(__pyx_k_evaluate_formula_3d), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_formula_4d, __pyx_k_evaluate_formula_4d, sizeof(__pyx_k_evaluate_formula_4d), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_graph, __pyx_k_evaluate_graph, sizeof(__pyx_k_evaluate_graph), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_h1, __pyx_k_evaluate_h1, sizeof(__pyx_k_evaluate_h1), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_h2, __pyx_k_evaluate_h2, sizeof(__pyx_k_evaluate_h2), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_h3, __pyx_k_evaluate_h3, sizeof(__pyx_k_evaluate_h3), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_spline, __pyx_k_evaluate_spline, sizeof(__pyx_k_evaluate_spline), 0, 0, 1, 1},
  {&__pyx_n_s_extern_ordereddict, __pyx_k_extern_ordereddict, sizeof(__pyx_k_extern_ordereddict), 0, 0, 1, 1},
  {&__pyx_n_s_f1, __pyx_k_f1, sizeof(__pyx_k_f1), 0, 0, 1, 1},
  {&__pyx_n_s_f1_2, __pyx_k_f1_2, sizeof(__pyx_k_f1_2), 0, 0, 1, 1},
  {&__pyx_n_s_f2, __pyx_k_f2, sizeof(__pyx_k_f2), 0, 0, 1, 1},
  {&__pyx_n_s_f2_2, __pyx_k_f2_2, sizeof(__pyx_k_f2_2), 0, 0, 1, 1},
  {&__pyx_n_s_f3, __pyx_k_f3, sizeof(__pyx_k_f3), 0, 0, 1, 1},
  {&__pyx_n_s_f3_2, __pyx_k_f3_2, sizeof(__pyx_k_f3_2), 0, 0, 1, 1},
  {&__pyx_kp_s_f_s, __pyx_k_f_s, sizeof(__pyx_k_f_s), 0, 0, 1, 0},
  {&__pyx_kp_s_failed_to_allocate_memory_for_0, __pyx_k_failed_to_allocate_memory_for_0, sizeof(__pyx_k_failed_to_allocate_memory_for_0), 0, 0, 1, 0},
  {&__pyx_kp_s_field_0_of_type_1_is_not_compati, __pyx_k_field_0_of_type_1_is_not_compati, sizeof(__pyx_k_field_0_of_type_1_is_not_compati), 0, 0, 1, 0},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_kp_s_file_0_is_not_writable, __pyx_k_file_0_is_not_writable, sizeof(__pyx_k_file_0_is_not_writable), 0, 0, 1, 0},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_fill_g1, __pyx_k_fill_g1, sizeof(__pyx_k_fill_g1), 0, 0, 1, 1},
  {&__pyx_n_s_fill_g2, __pyx_k_fill_g2, sizeof(__pyx_k_fill_g2), 0, 0, 1, 1},
  {&__pyx_n_s_fill_h1, __pyx_k_fill_h1, sizeof(__pyx_k_fill_h1), 0, 0, 1, 1},
  {&__pyx_n_s_fill_h2, __pyx_k_fill_h2, sizeof(__pyx_k_fill_h2), 0, 0, 1, 1},
  {&__pyx_n_s_fill_h3, __pyx_k_fill_h3, sizeof(__pyx_k_fill_h3), 0, 0, 1, 1},
  {&__pyx_n_s_fill_p1, __pyx_k_fill_p1, sizeof(__pyx_k_fill_p1), 0, 0, 1, 1},
  {&__pyx_n_s_fill_p2, __pyx_k_fill_p2, sizeof(__pyx_k_fill_p2), 0, 0, 1, 1},
  {&__pyx_n_s_fill_p3, __pyx_k_fill_p3, sizeof(__pyx_k_fill_p3), 0, 0, 1, 1},
  {&__pyx_n_s_find, __pyx_k_find, sizeof(__pyx_k_find), 0, 0, 1, 1},
  {&__pyx_n_s_fk, __pyx_k_fk, sizeof(__pyx_k_fk), 0, 0, 1, 1},
  {&__pyx_kp_s_fk_d, __pyx_k_fk_d, sizeof(__pyx_k_fk_d), 0, 0, 1, 0},
  {&__pyx_n_s_fk_name, __pyx_k_fk_name, sizeof(__pyx_k_fk_name), 0, 0, 1, 1},
  {&__pyx_n_s_flatnonzero, __pyx_k_flatnonzero, sizeof(__pyx_k_flatnonzero), 0, 0, 1, 1},
  {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_fn, __pyx_k_fn, sizeof(__pyx_k_fn), 0, 0, 1, 1},
  {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
  {&__pyx_n_s_fnames, __pyx_k_fnames, sizeof(__pyx_k_fnames), 0, 0, 1, 1},
  {&__pyx_n_s_force_repeat, __pyx_k_force_repeat, sizeof(__pyx_k_force_repeat), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_func, __pyx_k_func, sizeof(__pyx_k_func), 0, 0, 1, 1},
  {&__pyx_n_s_func_2, __pyx_k_func_2, sizeof(__pyx_k_func_2), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 1, 1},
  {&__pyx_n_s_graph_2, __pyx_k_graph_2, sizeof(__pyx_k_graph_2), 0, 0, 1, 1},
  {&__pyx_n_s_group, __pyx_k_group, sizeof(__pyx_k_group), 0, 0, 1, 1},
  {&__pyx_n_s_h1, __pyx_k_h1, sizeof(__pyx_k_h1), 0, 0, 1, 1},
  {&__pyx_n_s_h1_2, __pyx_k_h1_2, sizeof(__pyx_k_h1_2), 0, 0, 1, 1},
  {&__pyx_n_s_h1c_array, __pyx_k_h1c_array, sizeof(__pyx_k_h1c_array), 0, 0, 1, 1},
  {&__pyx_n_s_h1d_array, __pyx_k_h1d_array, sizeof(__pyx_k_h1d_array), 0, 0, 1, 1},
  {&__pyx_n_s_h1f_array, __pyx_k_h1f_array, sizeof(__pyx_k_h1f_array), 0, 0, 1, 1},
  {&__pyx_n_s_h1i_array, __pyx_k_h1i_array, sizeof(__pyx_k_h1i_array), 0, 0, 1, 1},
  {&__pyx_n_s_h1s_array, __pyx_k_h1s_array, sizeof(__pyx_k_h1s_array), 0, 0, 1, 1},
  {&__pyx_n_s_h2, __pyx_k_h2, sizeof(__pyx_k_h2), 0, 0, 1, 1},
  {&__pyx_n_s_h2_2, __pyx_k_h2_2, sizeof(__pyx_k_h2_2), 0, 0, 1, 1},
  {&__pyx_n_s_h2c_array, __pyx_k_h2c_array, sizeof(__pyx_k_h2c_array), 0, 0, 1, 1},
  {&__pyx_n_s_h2d_array, __pyx_k_h2d_array, sizeof(__pyx_k_h2d_array), 0, 0, 1, 1},
  {&__pyx_n_s_h2f_array, __pyx_k_h2f_array, sizeof(__pyx_k_h2f_array), 0, 0, 1, 1},
  {&__pyx_n_s_h2i_array, __pyx_k_h2i_array, sizeof(__pyx_k_h2i_array), 0, 0, 1, 1},
  {&__pyx_n_s_h2s_array, __pyx_k_h2s_array, sizeof(__pyx_k_h2s_array), 0, 0, 1, 1},
  {&__pyx_n_s_h3, __pyx_k_h3, sizeof(__pyx_k_h3), 0, 0, 1, 1},
  {&__pyx_n_s_h3_2, __pyx_k_h3_2, sizeof(__pyx_k_h3_2), 0, 0, 1, 1},
  {&__pyx_n_s_h3c_array, __pyx_k_h3c_array, sizeof(__pyx_k_h3c_array), 0, 0, 1, 1},
  {&__pyx_n_s_h3d_array, __pyx_k_h3d_array, sizeof(__pyx_k_h3d_array), 0, 0, 1, 1},
  {&__pyx_n_s_h3f_array, __pyx_k_h3f_array, sizeof(__pyx_k_h3f_array), 0, 0, 1, 1},
  {&__pyx_n_s_h3i_array, __pyx_k_h3i_array, sizeof(__pyx_k_h3i_array), 0, 0, 1, 1},
  {&__pyx_n_s_h3s_array, __pyx_k_h3s_array, sizeof(__pyx_k_h3s_array), 0, 0, 1, 1},
  {&__pyx_n_s_hist, __pyx_k_hist, sizeof(__pyx_k_hist), 0, 0, 1, 1},
  {&__pyx_n_s_hist_2, __pyx_k_hist_2, sizeof(__pyx_k_hist_2), 0, 0, 1, 1},
  {&__pyx_kp_s_home_endw_workspace_root_numpy, __pyx_k_home_endw_workspace_root_numpy, sizeof(__pyx_k_home_endw_workspace_root_numpy), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_k_home_endw_workspace_root_numpy_2, sizeof(__pyx_k_home_endw_workspace_root_numpy_2), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_k_home_endw_workspace_root_numpy_3, sizeof(__pyx_k_home_endw_workspace_root_numpy_3), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_4, __pyx_k_home_endw_workspace_root_numpy_4, sizeof(__pyx_k_home_endw_workspace_root_numpy_4), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_k_home_endw_workspace_root_numpy_5, sizeof(__pyx_k_home_endw_workspace_root_numpy_5), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_k_home_endw_workspace_root_numpy_6, sizeof(__pyx_k_home_endw_workspace_root_numpy_6), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_k_home_endw_workspace_root_numpy_7, sizeof(__pyx_k_home_endw_workspace_root_numpy_7), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_k_home_endw_workspace_root_numpy_8, sizeof(__pyx_k_home_endw_workspace_root_numpy_8), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_ibin, __pyx_k_ibin, sizeof(__pyx_k_ibin), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_kp_s_ignoring_duplicate_branch_named, __pyx_k_ignoring_duplicate_branch_named, sizeof(__pyx_k_ignoring_duplicate_branch_named), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_include_weight, __pyx_k_include_weight, sizeof(__pyx_k_include_weight), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_int16, __pyx_k_int16, sizeof(__pyx_k_int16), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
  {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
  {&__pyx_n_s_intree, __pyx_k_intree, sizeof(__pyx_k_intree), 0, 0, 1, 1},
  {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itemset, __pyx_k_itemset, sizeof(__pyx_k_itemset), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_kB, __pyx_k_kB, sizeof(__pyx_k_kB), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_kind, __pyx_k_kind, sizeof(__pyx_k_kind), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_kp_s_leaf_list_for_branch_0_is_empty, __pyx_k_leaf_list_for_branch_0_is_empty, sizeof(__pyx_k_leaf_list_for_branch_0_is_empty), 0, 0, 1, 0},
  {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
  {&__pyx_n_s_librootnumpy, __pyx_k_librootnumpy, sizeof(__pyx_k_librootnumpy), 0, 0, 1, 1},
  {&__pyx_n_s_list_branches, __pyx_k_list_branches, sizeof(__pyx_k_list_branches), 0, 0, 1, 1},
  {&__pyx_n_s_list_directories, __pyx_k_list_directories, sizeof(__pyx_k_list_directories), 0, 0, 1, 1},
  {&__pyx_n_s_list_objects, __pyx_k_list_objects, sizeof(__pyx_k_list_objects), 0, 0, 1, 1},
  {&__pyx_n_s_list_structures, __pyx_k_list_structures, sizeof(__pyx_k_list_structures), 0, 0, 1, 1},
  {&__pyx_n_s_list_trees, __pyx_k_list_trees, sizeof(__pyx_k_list_trees), 0, 0, 1, 1},
  {&__pyx_n_s_long, __pyx_k_long, sizeof(__pyx_k_long), 0, 0, 1, 1},
  {&__pyx_kp_s_long_long, __pyx_k_long_long, sizeof(__pyx_k_long_long), 0, 0, 1, 0},
  {&__pyx_n_s_longlong, __pyx_k_longlong, sizeof(__pyx_k_longlong), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mat, __pyx_k_mat, sizeof(__pyx_k_mat), 0, 0, 1, 1},
  {&__pyx_n_s_match, __pyx_k_match, sizeof(__pyx_k_match), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_matrix_d, __pyx_k_matrix_d, sizeof(__pyx_k_matrix_d), 0, 0, 1, 1},
  {&__pyx_n_s_matrix_f, __pyx_k_matrix_f, sizeof(__pyx_k_matrix_f), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_kp_s_multiple_trees_found_0, __pyx_k_multiple_trees_found_0, sizeof(__pyx_k_multiple_trees_found_0), 0, 0, 1, 0},
  {&__pyx_n_s_n_samples, __pyx_k_n_samples, sizeof(__pyx_k_n_samples), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_names, __pyx_k_names, sizeof(__pyx_k_names), 0, 0, 1, 1},
  {&__pyx_n_s_nbins, __pyx_k_nbins, sizeof(__pyx_k_nbins), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_kp_s_none_of_the_input_files_contain, __pyx_k_none_of_the_input_files_contain, sizeof(__pyx_k_none_of_the_input_files_contain), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_objects, __pyx_k_objects, sizeof(__pyx_k_objects), 0, 0, 1, 1},
  {&__pyx_n_s_outtree, __pyx_k_outtree, sizeof(__pyx_k_outtree), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_profile, __pyx_k_profile, sizeof(__pyx_k_profile), 0, 0, 1, 1},
  {&__pyx_n_s_profile_2, __pyx_k_profile_2, sizeof(__pyx_k_profile_2), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ravel, __pyx_k_ravel, sizeof(__pyx_k_ravel), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_kp_s_read_failure_in_current_tree_or, __pyx_k_read_failure_in_current_tree_or, sizeof(__pyx_k_read_failure_in_current_tree_or), 0, 0, 1, 0},
  {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {&__pyx_n_s_resize, __pyx_k_resize, sizeof(__pyx_k_resize), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_return_indices, __pyx_k_return_indices, sizeof(__pyx_k_return_indices), 0, 0, 1, 1},
  {&__pyx_n_s_rfile, __pyx_k_rfile, sizeof(__pyx_k_rfile), 0, 0, 1, 1},
  {&__pyx_n_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 1},
  {&__pyx_n_s_root2array_fromfile, __pyx_k_root2array_fromfile, sizeof(__pyx_k_root2array_fromfile), 0, 0, 1, 1},
  {&__pyx_n_s_root2array_fromtree, __pyx_k_root2array_fromtree, sizeof(__pyx_k_root2array_fromtree), 0, 0, 1, 1},
  {&__pyx_n_s_root_arr, __pyx_k_root_arr, sizeof(__pyx_k_root_arr), 0, 0, 1, 1},
  {&__pyx_n_s_root_hist, __pyx_k_root_hist, sizeof(__pyx_k_root_hist), 0, 0, 1, 1},
  {&__pyx_n_s_root_mat, __pyx_k_root_mat, sizeof(__pyx_k_root_mat), 0, 0, 1, 1},
  {&__pyx_n_s_rtree, __pyx_k_rtree, sizeof(__pyx_k_rtree), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_s_s_0_9, __pyx_k_s_0_9, sizeof(__pyx_k_s_0_9), 0, 0, 1, 0},
  {&__pyx_n_s_sample_f1, __pyx_k_sample_f1, sizeof(__pyx_k_sample_f1), 0, 0, 1, 1},
  {&__pyx_n_s_sample_f2, __pyx_k_sample_f2, sizeof(__pyx_k_sample_f2), 0, 0, 1, 1},
  {&__pyx_n_s_sample_f3, __pyx_k_sample_f3, sizeof(__pyx_k_sample_f3), 0, 0, 1, 1},
  {&__pyx_n_s_sample_h1, __pyx_k_sample_h1, sizeof(__pyx_k_sample_h1), 0, 0, 1, 1},
  {&__pyx_n_s_sample_h2, __pyx_k_sample_h2, sizeof(__pyx_k_sample_h2), 0, 0, 1, 1},
  {&__pyx_n_s_sample_h3, __pyx_k_sample_h3, sizeof(__pyx_k_sample_h3), 0, 0, 1, 1},
  {&__pyx_n_s_selection, __pyx_k_selection, sizeof(__pyx_k_selection), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_short, __pyx_k_short, sizeof(__pyx_k_short), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_spline, __pyx_k_spline, sizeof(__pyx_k_spline), 0, 0, 1, 1},
  {&__pyx_n_s_spline_2, __pyx_k_spline_2, sizeof(__pyx_k_spline_2), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_startswith, __pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_b_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 0, 1},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_structure, __pyx_k_structure, sizeof(__pyx_k_structure), 0, 0, 1, 1},
  {&__pyx_n_s_subdtype, __pyx_k_subdtype, sizeof(__pyx_k_subdtype), 0, 0, 1, 1},
  {&__pyx_n_s_tclass, __pyx_k_tclass, sizeof(__pyx_k_tclass), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_the_branch_or_expression_0_is_no, __pyx_k_the_branch_or_expression_0_is_no, sizeof(__pyx_k_the_branch_or_expression_0_is_no), 0, 0, 1, 0},
  {&__pyx_kp_s_the_chain_is_not_initialized, __pyx_k_the_chain_is_not_initialized, sizeof(__pyx_k_the_chain_is_not_initialized), 0, 0, 1, 0},
  {&__pyx_n_s_thn2array, __pyx_k_thn2array, sizeof(__pyx_k_thn2array), 0, 0, 1, 1},
  {&__pyx_n_s_thnsparse2array, __pyx_k_thnsparse2array, sizeof(__pyx_k_thnsparse2array), 0, 0, 1, 1},
  {&__pyx_n_b_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 0, 1},
  {&__pyx_n_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 1},
  {&__pyx_kp_s_tree_0_not_found_in_1, __pyx_k_tree_0_not_found_in_1, sizeof(__pyx_k_tree_0_not_found_in_1), 0, 0, 1, 0},
  {&__pyx_kp_s_tree_has_no_branches, __pyx_k_tree_has_no_branches, sizeof(__pyx_k_tree_has_no_branches), 0, 0, 1, 0},
  {&__pyx_kp_s_tree_index_in_chain_is_out_of_bo, __pyx_k_tree_index_in_chain_is_out_of_bo, sizeof(__pyx_k_tree_index_in_chain_is_out_of_bo), 0, 0, 1, 0},
  {&__pyx_n_s_treename, __pyx_k_treename, sizeof(__pyx_k_treename), 0, 0, 1, 1},
  {&__pyx_n_s_types, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {&__pyx_n_s_uint16, __pyx_k_uint16, sizeof(__pyx_k_uint16), 0, 0, 1, 1},
  {&__pyx_n_s_uint32, __pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 0, 1, 1},
  {&__pyx_n_s_uint64, __pyx_k_uint64, sizeof(__pyx_k_uint64), 0, 0, 1, 1},
  {&__pyx_n_s_uint8, __pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 0, 1, 1},
  {&__pyx_n_s_ulonglong, __pyx_k_ulonglong, sizeof(__pyx_k_ulonglong), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_access_tree_0_in_1, __pyx_k_unable_to_access_tree_0_in_1, sizeof(__pyx_k_unable_to_access_tree_0_in_1), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_convert_any_branches_i, __pyx_k_unable_to_convert_any_branches_i, sizeof(__pyx_k_unable_to_convert_any_branches_i), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_get_keys_in_0, __pyx_k_unable_to_get_keys_in_0, sizeof(__pyx_k_unable_to_get_keys_in_0), 0, 0, 1, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_kp_s_unsigned_char, __pyx_k_unsigned_char, sizeof(__pyx_k_unsigned_char), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_int, __pyx_k_unsigned_int, sizeof(__pyx_k_unsigned_int), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_long, __pyx_k_unsigned_long, sizeof(__pyx_k_unsigned_long), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_long_long, __pyx_k_unsigned_long_long, sizeof(__pyx_k_unsigned_long_long), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_short, __pyx_k_unsigned_short, sizeof(__pyx_k_unsigned_short), 0, 0, 1, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_kp_b_vector_bool, __pyx_k_vector_bool, sizeof(__pyx_k_vector_bool), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_char, __pyx_k_vector_char, sizeof(__pyx_k_vector_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_double, __pyx_k_vector_double, sizeof(__pyx_k_vector_double), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_float, __pyx_k_vector_float, sizeof(__pyx_k_vector_float), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_int, __pyx_k_vector_int, sizeof(__pyx_k_vector_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_long, __pyx_k_vector_long, sizeof(__pyx_k_vector_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_long_long, __pyx_k_vector_long_long, sizeof(__pyx_k_vector_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_short, __pyx_k_vector_short, sizeof(__pyx_k_vector_short), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_string, __pyx_k_vector_string, sizeof(__pyx_k_vector_string), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_char, __pyx_k_vector_unsigned_char, sizeof(__pyx_k_vector_unsigned_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_int, __pyx_k_vector_unsigned_int, sizeof(__pyx_k_vector_unsigned_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_long, __pyx_k_vector_unsigned_long, sizeof(__pyx_k_vector_unsigned_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_long_long, __pyx_k_vector_unsigned_long_long, sizeof(__pyx_k_vector_unsigned_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_short, __pyx_k_vector_unsigned_short, sizeof(__pyx_k_vector_unsigned_short), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_bool, __pyx_k_vector_vector_bool, sizeof(__pyx_k_vector_vector_bool), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_char, __pyx_k_vector_vector_char, sizeof(__pyx_k_vector_vector_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_double, __pyx_k_vector_vector_double, sizeof(__pyx_k_vector_vector_double), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_float, __pyx_k_vector_vector_float, sizeof(__pyx_k_vector_vector_float), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_int, __pyx_k_vector_vector_int, sizeof(__pyx_k_vector_vector_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_long, __pyx_k_vector_vector_long, sizeof(__pyx_k_vector_vector_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_long_long, __pyx_k_vector_vector_long_long, sizeof(__pyx_k_vector_vector_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_short, __pyx_k_vector_vector_short, sizeof(__pyx_k_vector_vector_short), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_string, __pyx_k_vector_vector_string, sizeof(__pyx_k_vector_vector_string), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_char, __pyx_k_vector_vector_unsigned_char, sizeof(__pyx_k_vector_vector_unsigned_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_int, __pyx_k_vector_vector_unsigned_int, sizeof(__pyx_k_vector_vector_unsigned_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_long, __pyx_k_vector_vector_unsigned_long, sizeof(__pyx_k_vector_vector_unsigned_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_long_long, __pyx_k_vector_vector_unsigned_long_long, sizeof(__pyx_k_vector_vector_unsigned_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_short, __pyx_k_vector_vector_unsigned_short, sizeof(__pyx_k_vector_vector_unsigned_short), 0, 0, 0, 0},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warn_missing_tree, __pyx_k_warn_missing_tree, sizeof(__pyx_k_warn_missing_tree), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_warnings_2, __pyx_k_warnings_2, sizeof(__pyx_k_warnings_2), 0, 0, 1, 1},
  {&__pyx_n_s_weight_name, __pyx_k_weight_name, sizeof(__pyx_k_weight_name), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 84, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 476, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 588, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(2, 7, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 41, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 90, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 147, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(2, 240, __pyx_L1_error)
  __pyx_builtin_RuntimeWarning = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeWarning); if (!__pyx_builtin_RuntimeWarning) __PYX_ERR(2, 260, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(2, 337, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(2, 373, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(2, 373, __pyx_L1_error)
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "root_numpy/src/converters.pyx":95
 *     cdef SIZE_t dims[1]
 *     dims[0] = numele;
 *     cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_OBJECT, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 */

#line 95 "root_numpy/src/converters.pyx"
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_O); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 95, __pyx_L1_error)

#line 95 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple_);

#line 95 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "root_numpy/src/converters.pyx":263
 *         cdef T* fa
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 263 "root_numpy/src/converters.pyx"
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 263, __pyx_L1_error)

#line 263 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__2);

#line 263 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "root_numpy/src/converters.pyx":303
 *         cdef unsigned long numele
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 303 "root_numpy/src/converters.pyx"
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 303, __pyx_L1_error)

#line 303 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__3);

#line 303 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "root_numpy/src/converters.pyx":351
 *         cdef unsigned long numele
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 351 "root_numpy/src/converters.pyx"
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 351, __pyx_L1_error)

#line 351 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__4);

#line 351 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "root_numpy/src/converters.pyx":458
 * cdef Converter* get_array_converter(string typename, arraydef):
 *     # Determine shape ignoring possible variable first dimension
 *     arraytokens = arraydef.strip('[]')             # <<<<<<<<<<<<<<
 *     if arraytokens:
 *         arraytokens = arraytokens.split('][')
 */

#line 458 "root_numpy/src/converters.pyx"
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s__5); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 458, __pyx_L1_error)

#line 458 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__6);

#line 458 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "root_numpy/src/converters.pyx":460
 *     arraytokens = arraydef.strip('[]')
 *     if arraytokens:
 *         arraytokens = arraytokens.split('][')             # <<<<<<<<<<<<<<
 *     shape = tuple([int(token) for token in arraytokens])
 * 
 */

#line 460 "root_numpy/src/converters.pyx"
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s__7); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 460, __pyx_L1_error)

#line 460 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__8);

#line 460 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "root_numpy/src/converters.pyx":464
 * 
 *     # Variable-length array
 *     if arraydef.startswith('[]'):             # <<<<<<<<<<<<<<
 *         conv = find_converter_by_typename(typename + arraydef)
 *         if conv == NULL:
 */

#line 464 "root_numpy/src/converters.pyx"
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s__5); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 464, __pyx_L1_error)

#line 464 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__9);

#line 464 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "root_numpy/src/converters.pyx":522
 *     match = re.match(LEAF_PATTERN, leaf_title)
 *     if match is not None:
 *         arraydef = match.group(1)             # <<<<<<<<<<<<<<
 *         if arraydef is not None:
 *             if leaf_count != NULL:
 */

#line 522 "root_numpy/src/converters.pyx"
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 522, __pyx_L1_error)

#line 522 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__10);

#line 522 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "root_numpy/src/converters.pyx":526
 *             if leaf_count != NULL:
 *                 # Ignore length-leaf name and use [] to denote variable-length first dimension
 *                 arraydef = '[' + arraydef[arraydef.find(']'):]             # <<<<<<<<<<<<<<
 *             return get_array_converter(leaf_type, arraydef)
 *     return find_converter_by_typename(leaf_type)
 */

#line 526 "root_numpy/src/converters.pyx"
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s__12); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 526, __pyx_L1_error)

#line 526 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__13);

#line 526 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "root_numpy/src/converters.pyx":578
 *         if ndim > 0 and roottype.compare('C') != 0:
 *             for axis in range(ndim):
 *                 token = ('[{0:d}]'.format(dims[axis])).encode('utf-8')             # <<<<<<<<<<<<<<
 *                 leaflist.append(<char*> token)
 *         leaflist.append(b'/')
 */

#line 578 "root_numpy/src/converters.pyx"
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 578, __pyx_L1_error)

#line 578 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__14);

#line 578 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "root_numpy/src/tree.pyx":125
 * cdef humanize_bytes(long value, int precision=1):
 *     abbrevs = (
 *         (1<<50, 'PB'),             # <<<<<<<<<<<<<<
 *         (1<<40, 'TB'),
 *         (1<<30, 'GB'),
 */

#line 125 "root_numpy/src/tree.pyx"
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_int_1125899906842624, __pyx_n_s_PB); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(2, 125, __pyx_L1_error)

#line 125 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__18);

#line 125 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "root_numpy/src/tree.pyx":126
 *     abbrevs = (
 *         (1<<50, 'PB'),
 *         (1<<40, 'TB'),             # <<<<<<<<<<<<<<
 *         (1<<30, 'GB'),
 *         (1<<20, 'MB'),
 */

#line 126 "root_numpy/src/tree.pyx"
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_int_1099511627776, __pyx_n_s_TB); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 126, __pyx_L1_error)

#line 126 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__19);

#line 126 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "root_numpy/src/tree.pyx":127
 *         (1<<50, 'PB'),
 *         (1<<40, 'TB'),
 *         (1<<30, 'GB'),             # <<<<<<<<<<<<<<
 *         (1<<20, 'MB'),
 *         (1<<10, 'kB'),
 */

#line 127 "root_numpy/src/tree.pyx"
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_int_1073741824, __pyx_n_s_GB); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(2, 127, __pyx_L1_error)

#line 127 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__20);

#line 127 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "root_numpy/src/tree.pyx":128
 *         (1<<40, 'TB'),
 *         (1<<30, 'GB'),
 *         (1<<20, 'MB'),             # <<<<<<<<<<<<<<
 *         (1<<10, 'kB'),
 *         (1, 'bytes'))
 */

#line 128 "root_numpy/src/tree.pyx"
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_int_1048576, __pyx_n_s_MB); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(2, 128, __pyx_L1_error)

#line 128 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__21);

#line 128 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "root_numpy/src/tree.pyx":129
 *         (1<<30, 'GB'),
 *         (1<<20, 'MB'),
 *         (1<<10, 'kB'),             # <<<<<<<<<<<<<<
 *         (1, 'bytes'))
 *     if value == 1:
 */

#line 129 "root_numpy/src/tree.pyx"
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_int_1024, __pyx_n_s_kB); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 129, __pyx_L1_error)

#line 129 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__22);

#line 129 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "root_numpy/src/tree.pyx":130
 *         (1<<20, 'MB'),
 *         (1<<10, 'kB'),
 *         (1, 'bytes'))             # <<<<<<<<<<<<<<
 *     if value == 1:
 *         return '1 byte'
 */

#line 130 "root_numpy/src/tree.pyx"
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_int_1, __pyx_n_s_bytes); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 130, __pyx_L1_error)

#line 130 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__23);

#line 130 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "root_numpy/src/tree.pyx":125
 * cdef humanize_bytes(long value, int precision=1):
 *     abbrevs = (
 *         (1<<50, 'PB'),             # <<<<<<<<<<<<<<
 *         (1<<40, 'TB'),
 *         (1<<30, 'GB'),
 */

#line 125 "root_numpy/src/tree.pyx"
  __pyx_tuple__24 = PyTuple_Pack(6, __pyx_tuple__18, __pyx_tuple__19, __pyx_tuple__20, __pyx_tuple__21, __pyx_tuple__22, __pyx_tuple__23); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(2, 125, __pyx_L1_error)

#line 125 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__24);

#line 125 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "root_numpy/src/tree.pyx":143
 *         return
 *     if load == -1:
 *         raise ValueError("chain is empty")             # <<<<<<<<<<<<<<
 *     elif load == -2:
 *         if ignore_index:
 */

#line 143 "root_numpy/src/tree.pyx"
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_chain_is_empty); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(2, 143, __pyx_L1_error)

#line 143 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__25);

#line 143 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "root_numpy/src/tree.pyx":147
 *         if ignore_index:
 *             return
 *         raise IndexError("tree index in chain is out of bounds")             # <<<<<<<<<<<<<<
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 */

#line 147 "root_numpy/src/tree.pyx"
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_tree_index_in_chain_is_out_of_bo); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(2, 147, __pyx_L1_error)

#line 147 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__26);

#line 147 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "root_numpy/src/tree.pyx":149
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:
 *         raise IOError("cannot open current file")             # <<<<<<<<<<<<<<
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 */

#line 149 "root_numpy/src/tree.pyx"
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_cannot_open_current_file); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(2, 149, __pyx_L1_error)

#line 149 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__27);

#line 149 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "root_numpy/src/tree.pyx":151
 *         raise IOError("cannot open current file")
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")             # <<<<<<<<<<<<<<
 *     raise RuntimeError("the chain is not initialized")
 * 
 */

#line 151 "root_numpy/src/tree.pyx"
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_cannot_access_tree_in_current_fi); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(2, 151, __pyx_L1_error)

#line 151 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__28);

#line 151 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "root_numpy/src/tree.pyx":152
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 152 "root_numpy/src/tree.pyx"
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_the_chain_is_not_initialized); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(2, 152, __pyx_L1_error)

#line 152 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__29);

#line 152 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "root_numpy/src/tree.pyx":161
 * 
 *     if tree.GetNbranches() == 0:
 *         raise ValueError("tree has no branches")             # <<<<<<<<<<<<<<
 * 
 *     cdef int num_requested_branches = 0
 */

#line 161 "root_numpy/src/tree.pyx"
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_tree_has_no_branches); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 161, __pyx_L1_error)

#line 161 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__30);

#line 161 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "root_numpy/src/tree.pyx":167
 *         num_requested_branches = len(branches)
 *         if num_requested_branches == 0:
 *             raise ValueError("branches is an empty list")             # <<<<<<<<<<<<<<
 * 
 *     cdef long long num_entries = tree.GetEntries()
 */

#line 167 "root_numpy/src/tree.pyx"
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_branches_is_an_empty_list); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(2, 167, __pyx_L1_error)

#line 167 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__31);

#line 167 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "root_numpy/src/tree.pyx":242
 *             branch_dict = dict([(b, idx) for idx, b in enumerate(branches)])
 *             if len(branch_dict) != num_requested_branches:
 *                 raise ValueError("duplicate branches requested")             # <<<<<<<<<<<<<<
 * 
 *         seen_branches = set()
 */

#line 242 "root_numpy/src/tree.pyx"
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_duplicate_branches_requested); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(2, 242, __pyx_L1_error)

#line 242 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__32);

#line 242 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "root_numpy/src/tree.pyx":337
 *                 if conv == NULL:
 *                     # Oops, this should never happen
 *                     raise AssertionError(             # <<<<<<<<<<<<<<
 *                         "could not find formula converter")
 *                 column_buckets[branch_idx].push_back(col)
 */

#line 337 "root_numpy/src/tree.pyx"
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_could_not_find_formula_converter); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(2, 337, __pyx_L1_error)

#line 337 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__34);

#line 337 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "root_numpy/src/tree.pyx":352
 * 
 *         elif columns.size() == 0:
 *             raise RuntimeError("unable to convert any branches in this tree")             # <<<<<<<<<<<<<<
 * 
 *         # Activate branches used by formulae and columns
 */

#line 352 "root_numpy/src/tree.pyx"
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_unable_to_convert_any_branches_i); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(2, 352, __pyx_L1_error)

#line 352 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__35);

#line 352 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "root_numpy/src/tree.pyx":365
 *             dtype_fields.append((this_col.name, this_conv.get_nptype()))
 *         if include_weight:
 *             dtype_fields.append((weight_name, np.dtype('d')))             # <<<<<<<<<<<<<<
 *         dtype = np.dtype(dtype_fields)
 * 
 */

#line 365 "root_numpy/src/tree.pyx"
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_n_s_d); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(2, 365, __pyx_L1_error)

#line 365 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__36);

#line 365 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "root_numpy/src/tree.pyx":400
 *             handle_load(entry_size)
 *             if entry_size == 0:
 *                 raise IOError("read failure in current tree or requested entry "             # <<<<<<<<<<<<<<
 *                               "does not exist (branches have different lengths?)")
 * 
 */

#line 400 "root_numpy/src/tree.pyx"
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_read_failure_in_current_tree_or); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(2, 400, __pyx_L1_error)

#line 400 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__37);

#line 400 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "root_numpy/src/hist.pyx":10
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 10 "root_numpy/src/hist.pyx"
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(6, 10, __pyx_L1_error)

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__39);

#line 10 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "root_numpy/src/hist.pyx":38
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 38 "root_numpy/src/hist.pyx"
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__40);

#line 38 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "root_numpy/src/hist.pyx":66
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 66 "root_numpy/src/hist.pyx"
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(6, 66, __pyx_L1_error)

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__41);

#line 66 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "root_numpy/src/hist.pyx":94
 *     cdef TProfile* _profile = <TProfile*> PyCObject_AsVoidPtr(profile)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 94 "root_numpy/src/hist.pyx"
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(6, 94, __pyx_L1_error)

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__42);

#line 94 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "root_numpy/src/hist.pyx":122
 *     cdef TProfile2D* _profile = <TProfile2D*> PyCObject_AsVoidPtr(profile)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 122 "root_numpy/src/hist.pyx"
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(6, 122, __pyx_L1_error)

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__43);

#line 122 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "root_numpy/src/hist.pyx":150
 *     cdef TProfile3D* _profile = <TProfile3D*> PyCObject_AsVoidPtr(profile)
 *     cdef SIZE_t size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef SIZE_t i
 *     cdef int bin_idx
 */

#line 150 "root_numpy/src/hist.pyx"
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(6, 150, __pyx_L1_error)

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__44);

#line 150 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(11, 218, __pyx_L1_error)

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__45);

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 222 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(11, 222, __pyx_L1_error)

#line 222 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__46);

#line 222 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(11, 259, __pyx_L1_error)

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__47);

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(11, 799, __pyx_L1_error)

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__48);

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(11, 803, __pyx_L1_error)

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__49);

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(11, 823, __pyx_L1_error)

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__50);

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "root_numpy/src/converters.pyx":4
 * 
 * # match leaf_name[length_leaf][N][M]... or leaf_name[N][M]...
 * LEAF_PATTERN = re.compile('^[^\[]+((?:\[[^\s\]]+\])(?:\[[0-9]+\])*)?$')             # <<<<<<<<<<<<<<
 * 
 * TYPES = {
 */

#line 4 "root_numpy/src/converters.pyx"
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_s_0_9); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__51);

#line 4 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "root_numpy/src/converters.pyx":23
 * 
 * TYPES_NUMPY2ROOT = {
 *     np.dtype(np.bool):    (1, 'O'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int8):    (1, 'B'),
 *     np.dtype(np.int16):   (2, 'S'),
 */

#line 23 "root_numpy/src/converters.pyx"
  __pyx_tuple__52 = PyTuple_Pack(2, __pyx_int_1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 23, __pyx_L1_error)

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__52);

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "root_numpy/src/converters.pyx":24
 * TYPES_NUMPY2ROOT = {
 *     np.dtype(np.bool):    (1, 'O'),
 *     np.dtype(np.int8):    (1, 'B'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int16):   (2, 'S'),
 *     np.dtype(np.int32):   (4, 'I'),
 */

#line 24 "root_numpy/src/converters.pyx"
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_int_1, __pyx_n_s_B); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 24, __pyx_L1_error)

#line 24 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__53);

#line 24 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "root_numpy/src/converters.pyx":25
 *     np.dtype(np.bool):    (1, 'O'),
 *     np.dtype(np.int8):    (1, 'B'),
 *     np.dtype(np.int16):   (2, 'S'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int32):   (4, 'I'),
 *     np.dtype(np.int64):   (8, 'L'),
 */

#line 25 "root_numpy/src/converters.pyx"
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_int_2, __pyx_n_s_S); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 25, __pyx_L1_error)

#line 25 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__54);

#line 25 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "root_numpy/src/converters.pyx":26
 *     np.dtype(np.int8):    (1, 'B'),
 *     np.dtype(np.int16):   (2, 'S'),
 *     np.dtype(np.int32):   (4, 'I'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int64):   (8, 'L'),
 *     np.dtype(np.uint8):   (1, 'b'),
 */

#line 26 "root_numpy/src/converters.pyx"
  __pyx_tuple__55 = PyTuple_Pack(2, __pyx_int_4, __pyx_n_s_I); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 26, __pyx_L1_error)

#line 26 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__55);

#line 26 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "root_numpy/src/converters.pyx":27
 *     np.dtype(np.int16):   (2, 'S'),
 *     np.dtype(np.int32):   (4, 'I'),
 *     np.dtype(np.int64):   (8, 'L'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint8):   (1, 'b'),
 *     np.dtype(np.uint16):  (2, 's'),
 */

#line 27 "root_numpy/src/converters.pyx"
  __pyx_tuple__56 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_L); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 27, __pyx_L1_error)

#line 27 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__56);

#line 27 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "root_numpy/src/converters.pyx":28
 *     np.dtype(np.int32):   (4, 'I'),
 *     np.dtype(np.int64):   (8, 'L'),
 *     np.dtype(np.uint8):   (1, 'b'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint16):  (2, 's'),
 *     np.dtype(np.uint32):  (4, 'i'),
 */

#line 28 "root_numpy/src/converters.pyx"
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_int_1, __pyx_n_s_b); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 28, __pyx_L1_error)

#line 28 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__57);

#line 28 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "root_numpy/src/converters.pyx":29
 *     np.dtype(np.int64):   (8, 'L'),
 *     np.dtype(np.uint8):   (1, 'b'),
 *     np.dtype(np.uint16):  (2, 's'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint32):  (4, 'i'),
 *     np.dtype(np.uint64):  (8, 'l'),
 */

#line 29 "root_numpy/src/converters.pyx"
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_int_2, __pyx_n_s_s); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 29, __pyx_L1_error)

#line 29 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__58);

#line 29 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "root_numpy/src/converters.pyx":30
 *     np.dtype(np.uint8):   (1, 'b'),
 *     np.dtype(np.uint16):  (2, 's'),
 *     np.dtype(np.uint32):  (4, 'i'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint64):  (8, 'l'),
 *     np.dtype(np.float):   (8, 'D'),
 */

#line 30 "root_numpy/src/converters.pyx"
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_int_4, __pyx_n_s_i); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 30, __pyx_L1_error)

#line 30 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__59);

#line 30 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "root_numpy/src/converters.pyx":31
 *     np.dtype(np.uint16):  (2, 's'),
 *     np.dtype(np.uint32):  (4, 'i'),
 *     np.dtype(np.uint64):  (8, 'l'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float):   (8, 'D'),
 *     np.dtype(np.float32): (4, 'F'),
 */

#line 31 "root_numpy/src/converters.pyx"
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_l); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 31, __pyx_L1_error)

#line 31 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__60);

#line 31 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "root_numpy/src/converters.pyx":32
 *     np.dtype(np.uint32):  (4, 'i'),
 *     np.dtype(np.uint64):  (8, 'l'),
 *     np.dtype(np.float):   (8, 'D'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float32): (4, 'F'),
 *     np.dtype(np.float64): (8, 'D'),
 */

#line 32 "root_numpy/src/converters.pyx"
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_D); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 32, __pyx_L1_error)

#line 32 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__61);

#line 32 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "root_numpy/src/converters.pyx":33
 *     np.dtype(np.uint64):  (8, 'l'),
 *     np.dtype(np.float):   (8, 'D'),
 *     np.dtype(np.float32): (4, 'F'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float64): (8, 'D'),
 * }
 */

#line 33 "root_numpy/src/converters.pyx"
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_int_4, __pyx_n_s_F); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 33, __pyx_L1_error)

#line 33 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__62);

#line 33 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "root_numpy/src/converters.pyx":34
 *     np.dtype(np.float):   (8, 'D'),
 *     np.dtype(np.float32): (4, 'F'),
 *     np.dtype(np.float64): (8, 'D'),             # <<<<<<<<<<<<<<
 * }
 * 
 */

#line 34 "root_numpy/src/converters.pyx"
  __pyx_tuple__63 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_D); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 34, __pyx_L1_error)

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__63);

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "root_numpy/src/converters.pyx":532
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # Delete all converters when module is town down
 *     it = CONVERTERS.begin()
 */

#line 532 "root_numpy/src/converters.pyx"
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_n_s_it); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 532, __pyx_L1_error)

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_tuple__64);

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_tuple__64);

#line 532 "root_numpy/src/converters.pyx"
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_cleanup, 532, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(1, 532, __pyx_L1_error)

  /* "root_numpy/src/tree.pyx":33
 * 
 * 
 * def list_objects(fname, types=None):             # <<<<<<<<<<<<<<
 *     cdef TClass* tclass
 *     # ROOT owns these pointers
 */

#line 33 "root_numpy/src/tree.pyx"
  __pyx_tuple__66 = PyTuple_Pack(7, __pyx_n_s_fname, __pyx_n_s_types, __pyx_n_s_tclass, __pyx_n_s_classes, __pyx_n_s_clsname, __pyx_n_s_rfile, __pyx_n_s_objects); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(2, 33, __pyx_L1_error)

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__66);

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__66);

#line 33 "root_numpy/src/tree.pyx"
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_list_objects, 33, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(2, 33, __pyx_L1_error)

  /* "root_numpy/src/tree.pyx":53
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     return list_objects(fname, types=['TTree'])
 * 
 */

#line 53 "root_numpy/src/tree.pyx"
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_n_s_fname); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(2, 53, __pyx_L1_error)

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__68);

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__68);

#line 53 "root_numpy/src/tree.pyx"
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_list_trees, 53, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(2, 53, __pyx_L1_error)

  /* "root_numpy/src/tree.pyx":57
 * 
 * 
 * def list_directories(fname):             # <<<<<<<<<<<<<<
 *     return list_objects(fname, types=['TDirectoryFile'])
 * 
 */

#line 57 "root_numpy/src/tree.pyx"
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_n_s_fname); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(2, 57, __pyx_L1_error)

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__70);

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__70);

#line 57 "root_numpy/src/tree.pyx"
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_list_directories, 57, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(2, 57, __pyx_L1_error)

  /* "root_numpy/src/tree.pyx":61
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree == None:
 *         # automatically select single tree
 */

#line 61 "root_numpy/src/tree.pyx"
  __pyx_tuple__72 = PyTuple_Pack(5, __pyx_n_s_fname, __pyx_n_s_tree, __pyx_n_s_rfile, __pyx_n_s_rtree, __pyx_n_s_structure); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(2, 61, __pyx_L1_error)

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__72);

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__72);

#line 61 "root_numpy/src/tree.pyx"
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_list_structures, 61, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(2, 61, __pyx_L1_error)

  /* "root_numpy/src/tree.pyx":80
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list(list_structures(fname, tree).keys())
 * 
 */

#line 80 "root_numpy/src/tree.pyx"
  __pyx_tuple__74 = PyTuple_Pack(2, __pyx_n_s_fname, __pyx_n_s_tree); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(2, 80, __pyx_L1_error)

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__74);

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__74);

#line 80 "root_numpy/src/tree.pyx"
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_list_branches, 80, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(2, 80, __pyx_L1_error)

  /* "root_numpy/src/tree.pyx":441
 * 
 * 
 * def root2array_fromfile(fnames, string treename, branches,             # <<<<<<<<<<<<<<
 *                         selection, start, stop, step,
 *                         bool include_weight, string weight_name,
 */

#line 441 "root_numpy/src/tree.pyx"
  __pyx_tuple__76 = PyTuple_Pack(16, __pyx_n_s_fnames, __pyx_n_s_treename, __pyx_n_s_branches, __pyx_n_s_selection, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_step, __pyx_n_s_include_weight, __pyx_n_s_weight_name, __pyx_n_s_cache_size, __pyx_n_s_warn_missing_tree, __pyx_n_s_chain, __pyx_n_s_file, __pyx_n_s_tree, __pyx_n_s_fn, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(2, 441, __pyx_L1_error)

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__76);

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__76);

#line 441 "root_numpy/src/tree.pyx"
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(11, 0, 16, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_root2array_fromfile, 441, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(2, 441, __pyx_L1_error)

  /* "root_numpy/src/tree.pyx":479
 * 
 * 
 * def root2array_fromtree(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         bool include_weight, string weight_name,
 */

#line 479 "root_numpy/src/tree.pyx"
  __pyx_tuple__78 = PyTuple_Pack(10, __pyx_n_s_tree, __pyx_n_s_branches, __pyx_n_s_selection, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_step, __pyx_n_s_include_weight, __pyx_n_s_weight_name, __pyx_n_s_cache_size, __pyx_n_s_rtree); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(2, 479, __pyx_L1_error)

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__78);

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__78);

#line 479 "root_numpy/src/tree.pyx"
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(9, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_root2array_fromtree, 479, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(2, 479, __pyx_L1_error)

  /* "root_numpy/src/tree.pyx":546
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */

#line 546 "root_numpy/src/tree.pyx"
  __pyx_tuple__80 = PyTuple_Pack(5, __pyx_n_s_arr, __pyx_n_s_name, __pyx_n_s_tree, __pyx_n_s_intree, __pyx_n_s_outtree); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(2, 546, __pyx_L1_error)

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__80);

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__80);

#line 546 "root_numpy/src/tree.pyx"
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_array2tree_toCObj, 546, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(2, 546, __pyx_L1_error)

  /* "root_numpy/src/tree.pyx":555
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* rfile = Open(filename, mode)
 *     if rfile == NULL:
 */

#line 555 "root_numpy/src/tree.pyx"
  __pyx_tuple__82 = PyTuple_Pack(6, __pyx_n_s_arr, __pyx_n_s_filename, __pyx_n_s_treename, __pyx_n_s_mode, __pyx_n_s_rfile, __pyx_n_s_tree); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(2, 555, __pyx_L1_error)

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__82);

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__82);

#line 555 "root_numpy/src/tree.pyx"
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_array2root, 555, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(2, 555, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":10
 * 
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */

#line 10 "root_numpy/src/array.pyx"
  __pyx_tuple__84 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(3, 10, __pyx_L1_error)

#line 10 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__84);

#line 10 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__84);

#line 10 "root_numpy/src/array.pyx"
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_array_d, 10, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(3, 10, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":15
 * 
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */

#line 15 "root_numpy/src/array.pyx"
  __pyx_tuple__86 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(3, 15, __pyx_L1_error)

#line 15 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__86);

#line 15 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__86);

#line 15 "root_numpy/src/array.pyx"
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_array_f, 15, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(3, 15, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":20
 * 
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */

#line 20 "root_numpy/src/array.pyx"
  __pyx_tuple__88 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(3, 20, __pyx_L1_error)

#line 20 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__88);

#line 20 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__88);

#line 20 "root_numpy/src/array.pyx"
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_array_l, 20, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(3, 20, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":25
 * 
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */

#line 25 "root_numpy/src/array.pyx"
  __pyx_tuple__90 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(3, 25, __pyx_L1_error)

#line 25 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__90);

#line 25 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__90);

#line 25 "root_numpy/src/array.pyx"
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_array_i, 25, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(3, 25, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":30
 * 
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */

#line 30 "root_numpy/src/array.pyx"
  __pyx_tuple__92 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(3, 30, __pyx_L1_error)

#line 30 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__92);

#line 30 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__92);

#line 30 "root_numpy/src/array.pyx"
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_array_s, 30, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(3, 30, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":35
 * 
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 35 "root_numpy/src/array.pyx"
  __pyx_tuple__94 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(3, 35, __pyx_L1_error)

#line 35 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__94);

#line 35 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__94);

#line 35 "root_numpy/src/array.pyx"
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_array_c, 35, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(3, 35, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":40
 * 
 * 
 * def array_h1c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 40 "root_numpy/src/array.pyx"
  __pyx_tuple__96 = PyTuple_Pack(3, __pyx_n_s_root_hist, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(3, 40, __pyx_L1_error)

#line 40 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__96);

#line 40 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__96);

#line 40 "root_numpy/src/array.pyx"
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_array_h1c, 40, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(3, 40, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":46
 * 
 * 
 * def array_h2c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 46 "root_numpy/src/array.pyx"
  __pyx_tuple__98 = PyTuple_Pack(3, __pyx_n_s_root_hist, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(3, 46, __pyx_L1_error)

#line 46 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__98);

#line 46 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__98);

#line 46 "root_numpy/src/array.pyx"
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_array_h2c, 46, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(3, 46, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":52
 * 
 * 
 * def array_h3c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 52 "root_numpy/src/array.pyx"
  __pyx_tuple__100 = PyTuple_Pack(3, __pyx_n_s_root_hist, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(3, 52, __pyx_L1_error)

#line 52 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__100);

#line 52 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__100);

#line 52 "root_numpy/src/array.pyx"
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_array_h3c, 52, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(3, 52, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":62
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1D* _hist = <TH1D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 62 "root_numpy/src/array.pyx"
  __pyx_tuple__102 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(3, 62, __pyx_L1_error)

#line 62 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__102);

#line 62 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__102);

#line 62 "root_numpy/src/array.pyx"
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h1d_array, 62, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(3, 62, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":70
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2D* _hist = <TH2D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 70 "root_numpy/src/array.pyx"
  __pyx_tuple__104 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(3, 70, __pyx_L1_error)

#line 70 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__104);

#line 70 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__104);

#line 70 "root_numpy/src/array.pyx"
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h2d_array, 70, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(3, 70, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":78
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3D* _hist = <TH3D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 78 "root_numpy/src/array.pyx"
  __pyx_tuple__106 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(3, 78, __pyx_L1_error)

#line 78 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__106);

#line 78 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__106);

#line 78 "root_numpy/src/array.pyx"
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h3d_array, 78, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(3, 78, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":86
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1F* _hist = <TH1F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 86 "root_numpy/src/array.pyx"
  __pyx_tuple__108 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(3, 86, __pyx_L1_error)

#line 86 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__108);

#line 86 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__108);

#line 86 "root_numpy/src/array.pyx"
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h1f_array, 86, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(3, 86, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2F* _hist = <TH2F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 94 "root_numpy/src/array.pyx"
  __pyx_tuple__110 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(3, 94, __pyx_L1_error)

#line 94 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__110);

#line 94 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__110);

#line 94 "root_numpy/src/array.pyx"
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h2f_array, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(3, 94, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":102
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3F* _hist = <TH3F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 102 "root_numpy/src/array.pyx"
  __pyx_tuple__112 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(3, 102, __pyx_L1_error)

#line 102 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__112);

#line 102 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__112);

#line 102 "root_numpy/src/array.pyx"
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h3f_array, 102, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(3, 102, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":110
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1I* _hist = <TH1I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 110 "root_numpy/src/array.pyx"
  __pyx_tuple__114 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(3, 110, __pyx_L1_error)

#line 110 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__114);

#line 110 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__114);

#line 110 "root_numpy/src/array.pyx"
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h1i_array, 110, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(3, 110, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":118
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2I* _hist = <TH2I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 118 "root_numpy/src/array.pyx"
  __pyx_tuple__116 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__116);

#line 118 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__116);

#line 118 "root_numpy/src/array.pyx"
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h2i_array, 118, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(3, 118, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":126
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3I* _hist = <TH3I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 126 "root_numpy/src/array.pyx"
  __pyx_tuple__118 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(3, 126, __pyx_L1_error)

#line 126 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__118);

#line 126 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__118);

#line 126 "root_numpy/src/array.pyx"
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h3i_array, 126, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(3, 126, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":134
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1S* _hist = <TH1S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 134 "root_numpy/src/array.pyx"
  __pyx_tuple__120 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(3, 134, __pyx_L1_error)

#line 134 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__120);

#line 134 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__120);

#line 134 "root_numpy/src/array.pyx"
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h1s_array, 134, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(3, 134, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":142
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2S* _hist = <TH2S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 142 "root_numpy/src/array.pyx"
  __pyx_tuple__122 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(3, 142, __pyx_L1_error)

#line 142 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__122);

#line 142 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__122);

#line 142 "root_numpy/src/array.pyx"
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h2s_array, 142, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(3, 142, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":150
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3S* _hist = <TH3S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 150 "root_numpy/src/array.pyx"
  __pyx_tuple__124 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(3, 150, __pyx_L1_error)

#line 150 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__124);

#line 150 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__124);

#line 150 "root_numpy/src/array.pyx"
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h3s_array, 150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(3, 150, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":158
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 158 "root_numpy/src/array.pyx"
  __pyx_tuple__126 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(3, 158, __pyx_L1_error)

#line 158 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__126);

#line 158 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__126);

#line 158 "root_numpy/src/array.pyx"
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h1c_array, 158, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(3, 158, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":166
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 166 "root_numpy/src/array.pyx"
  __pyx_tuple__128 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(3, 166, __pyx_L1_error)

#line 166 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__128);

#line 166 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__128);

#line 166 "root_numpy/src/array.pyx"
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h2c_array, 166, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(3, 166, __pyx_L1_error)

  /* "root_numpy/src/array.pyx":174
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 174 "root_numpy/src/array.pyx"
  __pyx_tuple__130 = PyTuple_Pack(4, __pyx_n_s_root_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(3, 174, __pyx_L1_error)

#line 174 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__130);

#line 174 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__130);

#line 174 "root_numpy/src/array.pyx"
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_h3c_array, 174, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(3, 174, __pyx_L1_error)

  /* "root_numpy/src/matrix.pyx":6
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_tuple__132 = PyTuple_Pack(5, __pyx_n_s_root_mat, __pyx_n_s_mat, __pyx_n_s_arr, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(4, 6, __pyx_L1_error)

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_tuple__132);

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_tuple__132);

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_4, __pyx_n_s_matrix_d, 6, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(4, 6, __pyx_L1_error)

  /* "root_numpy/src/matrix.pyx":19
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_tuple__134 = PyTuple_Pack(5, __pyx_n_s_root_mat, __pyx_n_s_mat, __pyx_n_s_arr, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(4, 19, __pyx_L1_error)

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_tuple__134);

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_tuple__134);

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_4, __pyx_n_s_matrix_f, 19, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(4, 19, __pyx_L1_error)

  /* "root_numpy/src/sample.pyx":6
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f1(f1, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef SIZE_t i
 */

#line 6 "root_numpy/src/sample.pyx"
  __pyx_tuple__136 = PyTuple_Pack(5, __pyx_n_s_f1, __pyx_n_s_n_samples, __pyx_n_s_f1_2, __pyx_n_s_i, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(5, 6, __pyx_L1_error)

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__136);

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__136);

#line 6 "root_numpy/src/sample.pyx"
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_sample_f1, 6, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(5, 6, __pyx_L1_error)

  /* "root_numpy/src/sample.pyx":17
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h1(h1, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef SIZE_t i
 */

#line 17 "root_numpy/src/sample.pyx"
  __pyx_tuple__138 = PyTuple_Pack(5, __pyx_n_s_h1, __pyx_n_s_n_samples, __pyx_n_s_h1_2, __pyx_n_s_i, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(5, 17, __pyx_L1_error)

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__138);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__138);

#line 17 "root_numpy/src/sample.pyx"
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_sample_h1, 17, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(5, 17, __pyx_L1_error)

  /* "root_numpy/src/sample.pyx":28
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f2(f2, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef SIZE_t i
 */

#line 28 "root_numpy/src/sample.pyx"
  __pyx_tuple__140 = PyTuple_Pack(7, __pyx_n_s_f2, __pyx_n_s_n_samples, __pyx_n_s_f2_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(5, 28, __pyx_L1_error)

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__140);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__140);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_sample_f2, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(5, 28, __pyx_L1_error)

  /* "root_numpy/src/sample.pyx":43
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h2(h2, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef SIZE_t i
 */

#line 43 "root_numpy/src/sample.pyx"
  __pyx_tuple__142 = PyTuple_Pack(7, __pyx_n_s_h2, __pyx_n_s_n_samples, __pyx_n_s_h2_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(5, 43, __pyx_L1_error)

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__142);

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__142);

#line 43 "root_numpy/src/sample.pyx"
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_sample_h2, 43, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(5, 43, __pyx_L1_error)

  /* "root_numpy/src/sample.pyx":58
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f3(f3, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef SIZE_t i
 */

#line 58 "root_numpy/src/sample.pyx"
  __pyx_tuple__144 = PyTuple_Pack(8, __pyx_n_s_f3, __pyx_n_s_n_samples, __pyx_n_s_f3_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(5, 58, __pyx_L1_error)

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__144);

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__144);

#line 58 "root_numpy/src/sample.pyx"
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_sample_f3, 58, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(5, 58, __pyx_L1_error)

  /* "root_numpy/src/sample.pyx":75
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h3(h3, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef SIZE_t i
 */

#line 75 "root_numpy/src/sample.pyx"
  __pyx_tuple__146 = PyTuple_Pack(8, __pyx_n_s_h3, __pyx_n_s_n_samples, __pyx_n_s_h3_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(5, 75, __pyx_L1_error)

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__146);

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__146);

#line 75 "root_numpy/src/sample.pyx"
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_sample_h3, 75, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(5, 75, __pyx_L1_error)

  /* "root_numpy/src/hist.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 3 "root_numpy/src/hist.pyx"
  __pyx_tuple__148 = PyTuple_Pack(9, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(6, 3, __pyx_L1_error)

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__148);

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__148);

#line 3 "root_numpy/src/hist.pyx"
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_n_s_fill_h1, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(6, 3, __pyx_L1_error)

  /* "root_numpy/src/hist.pyx":31
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 31 "root_numpy/src/hist.pyx"
  __pyx_tuple__150 = PyTuple_Pack(9, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(6, 31, __pyx_L1_error)

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__150);

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__150);

#line 31 "root_numpy/src/hist.pyx"
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_n_s_fill_h2, 31, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(6, 31, __pyx_L1_error)

  /* "root_numpy/src/hist.pyx":59
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 59 "root_numpy/src/hist.pyx"
  __pyx_tuple__152 = PyTuple_Pack(9, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(6, 59, __pyx_L1_error)

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__152);

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__152);

#line 59 "root_numpy/src/hist.pyx"
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_n_s_fill_h3, 59, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(6, 59, __pyx_L1_error)

  /* "root_numpy/src/hist.pyx":87
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p1(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 87 "root_numpy/src/hist.pyx"
  __pyx_tuple__154 = PyTuple_Pack(9, __pyx_n_s_profile, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_profile_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(6, 87, __pyx_L1_error)

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__154);

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__154);

#line 87 "root_numpy/src/hist.pyx"
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_n_s_fill_p1, 87, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(6, 87, __pyx_L1_error)

  /* "root_numpy/src/hist.pyx":115
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p2(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 115 "root_numpy/src/hist.pyx"
  __pyx_tuple__156 = PyTuple_Pack(9, __pyx_n_s_profile, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_profile_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(6, 115, __pyx_L1_error)

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__156);

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__156);

#line 115 "root_numpy/src/hist.pyx"
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__156, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_n_s_fill_p2, 115, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(6, 115, __pyx_L1_error)

  /* "root_numpy/src/hist.pyx":143
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p3(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 143 "root_numpy/src/hist.pyx"
  __pyx_tuple__158 = PyTuple_Pack(9, __pyx_n_s_profile, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_profile_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(6, 143, __pyx_L1_error)

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__158);

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__158);

#line 143 "root_numpy/src/hist.pyx"
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__158, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_n_s_fill_p3, 143, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(6, 143, __pyx_L1_error)

  /* "root_numpy/src/hist.pyx":171
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def thn2array(hist, shape, dtype):             # <<<<<<<<<<<<<<
 *     cdef THnBase* _hist = <THnBase*> PyCObject_AsVoidPtr(hist)
 *     cdef double content
 */

#line 171 "root_numpy/src/hist.pyx"
  __pyx_tuple__160 = PyTuple_Pack(9, __pyx_n_s_hist, __pyx_n_s_shape, __pyx_n_s_dtype, __pyx_n_s_hist_2, __pyx_n_s_content, __pyx_n_s_ibin, __pyx_n_s_nbins, __pyx_n_s_array, __pyx_n_s_array_ravel_view); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(6, 171, __pyx_L1_error)

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__160);

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__160);

#line 171 "root_numpy/src/hist.pyx"
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(3, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_n_s_thn2array, 171, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) __PYX_ERR(6, 171, __pyx_L1_error)

  /* "root_numpy/src/hist.pyx":185
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def thnsparse2array(hist, shape, dtype):             # <<<<<<<<<<<<<<
 *     cdef THnBase* _hist = <THnBase*> PyCObject_AsVoidPtr(hist)
 *     cdef double content
 */

#line 185 "root_numpy/src/hist.pyx"
  __pyx_tuple__162 = PyTuple_Pack(10, __pyx_n_s_hist, __pyx_n_s_shape, __pyx_n_s_dtype, __pyx_n_s_hist_2, __pyx_n_s_content, __pyx_n_s_ibin, __pyx_n_s_nbins, __pyx_n_s_array, __pyx_n_s_coord, __pyx_n_s_itemset); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(6, 185, __pyx_L1_error)

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__162);

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__162);

#line 185 "root_numpy/src/hist.pyx"
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(3, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__162, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_n_s_thnsparse2array, 185, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) __PYX_ERR(6, 185, __pyx_L1_error)

  /* "root_numpy/src/graph.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 3 "root_numpy/src/graph.pyx"
  __pyx_tuple__164 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_array, __pyx_n_s_graph_2, __pyx_n_s_size, __pyx_n_s_i); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(7, 3, __pyx_L1_error)

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_GOTREF(__pyx_tuple__164);

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_GIVEREF(__pyx_tuple__164);

#line 3 "root_numpy/src/graph.pyx"
  __pyx_codeobj__165 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__164, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_fill_g1, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__165)) __PYX_ERR(7, 3, __pyx_L1_error)

  /* "root_numpy/src/graph.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 16 "root_numpy/src/graph.pyx"
  __pyx_tuple__166 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_array, __pyx_n_s_graph_2, __pyx_n_s_size, __pyx_n_s_i); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(7, 16, __pyx_L1_error)

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_GOTREF(__pyx_tuple__166);

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_GIVEREF(__pyx_tuple__166);

#line 16 "root_numpy/src/graph.pyx"
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_fill_g2, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h1(hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__168 = PyTuple_Pack(6, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(8, 3, __pyx_L1_error)

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__168);

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__168);

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_h1, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) __PYX_ERR(8, 3, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h2(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__170 = PyTuple_Pack(6, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__170)) __PYX_ERR(8, 16, __pyx_L1_error)

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__170);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__170);

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__171 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__170, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_h2, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__171)) __PYX_ERR(8, 16, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":29
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h3(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__172 = PyTuple_Pack(6, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__172)) __PYX_ERR(8, 29, __pyx_L1_error)

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__172);

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__172);

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__173 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__172, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_h3, 29, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__173)) __PYX_ERR(8, 29, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":42
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f1(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 */

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__174 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(8, 42, __pyx_L1_error)

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__174);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__174);

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__175 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__174, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_f1, 42, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__175)) __PYX_ERR(8, 42, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":55
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f2(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 */

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__176 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(8, 55, __pyx_L1_error)

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__176);

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__176);

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__177 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__176, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_f2, 55, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__177)) __PYX_ERR(8, 55, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":68
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f3(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 */

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__178 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__178)) __PYX_ERR(8, 68, __pyx_L1_error)

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__178);

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__178);

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__179 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__178, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_f3, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__179)) __PYX_ERR(8, 68, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":81
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_1d(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__180 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(8, 81, __pyx_L1_error)

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__180);

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__180);

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__181 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__180, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_formula_1d, 81, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__181)) __PYX_ERR(8, 81, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_2d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__182 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(8, 94, __pyx_L1_error)

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__182);

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__182);

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__182, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_formula_2d, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) __PYX_ERR(8, 94, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":107
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_3d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__184 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(8, 107, __pyx_L1_error)

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__184);

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__184);

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__185 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__184, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_formula_3d, 107, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__185)) __PYX_ERR(8, 107, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":120
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_4d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__186 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(8, 120, __pyx_L1_error)

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__186);

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__186);

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__187 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__186, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_formula_4d, 120, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__187)) __PYX_ERR(8, 120, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":133
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_graph(graph, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 */

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__188 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_array, __pyx_n_s_graph_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(8, 133, __pyx_L1_error)

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__188);

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__188);

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__189 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__188, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_graph, 133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__189)) __PYX_ERR(8, 133, __pyx_L1_error)

  /* "root_numpy/src/evaluate.pyx":146
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_spline(spline, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 */

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__190 = PyTuple_Pack(6, __pyx_n_s_spline, __pyx_n_s_array, __pyx_n_s_spline_2, __pyx_n_s_size, __pyx_n_s_i, __pyx_n_s_values); if (unlikely(!__pyx_tuple__190)) __PYX_ERR(8, 146, __pyx_L1_error)

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__190);

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__190);

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__191 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__190, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_8, __pyx_n_s_evaluate_spline, 146, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__191)) __PYX_ERR(8, 146, __pyx_L1_error)

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 146 "root_numpy/src/evaluate.pyx"
  return 0;

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 146 "root_numpy/src/evaluate.pyx"
  return -1;

#line 146 "root_numpy/src/evaluate.pyx"
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(13, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_1024 = PyInt_FromLong(1024); if (unlikely(!__pyx_int_1024)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_1048576 = PyInt_FromLong(1048576L); if (unlikely(!__pyx_int_1048576)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_1073741824 = PyInt_FromLong(1073741824L); if (unlikely(!__pyx_int_1073741824)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_1099511627776 = PyInt_FromString((char *)"1099511627776", 0, 0); if (unlikely(!__pyx_int_1099511627776)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_1125899906842624 = PyInt_FromString((char *)"1125899906842624", 0, 0); if (unlikely(!__pyx_int_1125899906842624)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(13, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_librootnumpy(void); /*proto*/
PyMODINIT_FUNC init_librootnumpy(void)
#else
PyMODINIT_FUNC PyInit__librootnumpy(void); /*proto*/
PyMODINIT_FUNC PyInit__librootnumpy(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  std::string __pyx_t_16;
  std::string __pyx_t_17;
  int __pyx_t_18;
  __pyx_t_13_librootnumpy_CONVERTERS_ITEM __pyx_t_19;
  __pyx_t_13_librootnumpy_VectorBoolConverter *__pyx_t_20;
  __pyx_t_13_librootnumpy_VectorVectorBoolConverter *__pyx_t_21;
  __pyx_t_13_librootnumpy_StringConverter *__pyx_t_22;
  __pyx_t_13_librootnumpy_VectorStringConverter *__pyx_t_23;
  __pyx_t_13_librootnumpy_VectorVectorStringConverter *__pyx_t_24;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__librootnumpy(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(13, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_librootnumpy", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(13, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(13, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(13, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main__librootnumpy) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(13, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "_librootnumpy")) {
      if (unlikely(PyDict_SetItemString(modules, "_librootnumpy", __pyx_m) < 0)) __PYX_ERR(13, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(14, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(15, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(16, 15, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(11, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(11, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(11, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(11, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(11, 861, __pyx_L1_error)
  __pyx_ptype_7cpython_5array_array = __Pyx_ImportType("array", "array", sizeof(arrayobject), 0); if (unlikely(!__pyx_ptype_7cpython_5array_array)) __PYX_ERR(10, 58, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif

  /* "root_numpy/src/setup.pxi":3
 * # cython: experimental_cpp_class_def=True, c_string_type=str, c_string_encoding=ascii
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * np.import_array()
 */

#line 3 "root_numpy/src/setup.pxi"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_1);

#line 3 "root_numpy/src/setup.pxi"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)

#line 3 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/setup.pxi":5
 * import numpy as np
 * cimport numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * from cpython cimport array
 */

#line 5 "root_numpy/src/setup.pxi"
  import_array();

  /* "root_numpy/src/setup.pxi":27
 * from libc.stdlib cimport malloc, free, realloc
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from collections import OrderedDict
 * except ImportError:
 */

#line 27 "root_numpy/src/setup.pxi"
  {

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_PyThreadState_declare

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_PyThreadState_assign

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XGOTREF(__pyx_t_2);

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XGOTREF(__pyx_t_3);

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XGOTREF(__pyx_t_4);

#line 27 "root_numpy/src/setup.pxi"
    /*try:*/ {

      /* "root_numpy/src/setup.pxi":28
 * 
 * try:
 *     from collections import OrderedDict             # <<<<<<<<<<<<<<
 * except ImportError:
 *     # Fall back on drop-in
 */

#line 28 "root_numpy/src/setup.pxi"
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L2_error)

#line 28 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_1);

#line 28 "root_numpy/src/setup.pxi"
      __Pyx_INCREF(__pyx_n_s_OrderedDict);

#line 28 "root_numpy/src/setup.pxi"
      __Pyx_GIVEREF(__pyx_n_s_OrderedDict);

#line 28 "root_numpy/src/setup.pxi"
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderedDict);

#line 28 "root_numpy/src/setup.pxi"
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 28, __pyx_L2_error)

#line 28 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_5);

#line 28 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 28 "root_numpy/src/setup.pxi"
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L2_error)

#line 28 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_1);

#line 28 "root_numpy/src/setup.pxi"
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L2_error)

#line 28 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 28 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "root_numpy/src/setup.pxi":27
 * from libc.stdlib cimport malloc, free, realloc
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from collections import OrderedDict
 * except ImportError:
 */

#line 27 "root_numpy/src/setup.pxi"
    }

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 27 "root_numpy/src/setup.pxi"
    goto __pyx_L9_try_end;

#line 27 "root_numpy/src/setup.pxi"
    __pyx_L2_error:;

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_PyThreadState_assign

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "root_numpy/src/setup.pxi":29
 * try:
 *     from collections import OrderedDict
 * except ImportError:             # <<<<<<<<<<<<<<
 *     # Fall back on drop-in
 *     from .extern.ordereddict import OrderedDict
 */

#line 29 "root_numpy/src/setup.pxi"
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);

#line 29 "root_numpy/src/setup.pxi"
    if (__pyx_t_6) {

#line 29 "root_numpy/src/setup.pxi"
      __Pyx_AddTraceback("_librootnumpy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 29 "root_numpy/src/setup.pxi"
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(0, 29, __pyx_L4_except_error)

#line 29 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_5);

#line 29 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_1);

#line 29 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_7);

      /* "root_numpy/src/setup.pxi":31
 * except ImportError:
 *     # Fall back on drop-in
 *     from .extern.ordereddict import OrderedDict             # <<<<<<<<<<<<<<
 * 
 * import atexit
 */

#line 31 "root_numpy/src/setup.pxi"
      __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 31, __pyx_L4_except_error)

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_8);

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_INCREF(__pyx_n_s_OrderedDict);

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_GIVEREF(__pyx_n_s_OrderedDict);

#line 31 "root_numpy/src/setup.pxi"
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_OrderedDict);

#line 31 "root_numpy/src/setup.pxi"
      __pyx_t_9 = __Pyx_Import(__pyx_n_s_extern_ordereddict, __pyx_t_8, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 31, __pyx_L4_except_error)

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_9);

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 31 "root_numpy/src/setup.pxi"
      __pyx_t_8 = __Pyx_ImportFrom(__pyx_t_9, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 31, __pyx_L4_except_error)

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_8);

#line 31 "root_numpy/src/setup.pxi"
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_8) < 0) __PYX_ERR(0, 31, __pyx_L4_except_error)

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 31 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 31 "root_numpy/src/setup.pxi"
      goto __pyx_L3_exception_handled;

#line 31 "root_numpy/src/setup.pxi"
    }

#line 31 "root_numpy/src/setup.pxi"
    goto __pyx_L4_except_error;

#line 31 "root_numpy/src/setup.pxi"
    __pyx_L4_except_error:;

    /* "root_numpy/src/setup.pxi":27
 * from libc.stdlib cimport malloc, free, realloc
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from collections import OrderedDict
 * except ImportError:
 */

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_PyThreadState_assign

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

#line 27 "root_numpy/src/setup.pxi"
    goto __pyx_L1_error;

#line 27 "root_numpy/src/setup.pxi"
    __pyx_L3_exception_handled:;

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_PyThreadState_assign

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 27 "root_numpy/src/setup.pxi"
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

#line 27 "root_numpy/src/setup.pxi"
    __pyx_L9_try_end:;

#line 27 "root_numpy/src/setup.pxi"
  }

  /* "root_numpy/src/setup.pxi":33
 *     from .extern.ordereddict import OrderedDict
 * 
 * import atexit             # <<<<<<<<<<<<<<
 * import warnings
 * from ._warnings import RootNumpyUnconvertibleWarning
 */

#line 33 "root_numpy/src/setup.pxi"
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_atexit, 0, -1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 33, __pyx_L1_error)

#line 33 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_7);

#line 33 "root_numpy/src/setup.pxi"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_atexit, __pyx_t_7) < 0) __PYX_ERR(0, 33, __pyx_L1_error)

#line 33 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/setup.pxi":34
 * 
 * import atexit
 * import warnings             # <<<<<<<<<<<<<<
 * from ._warnings import RootNumpyUnconvertibleWarning
 * 
 */

#line 34 "root_numpy/src/setup.pxi"
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 34, __pyx_L1_error)

#line 34 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_7);

#line 34 "root_numpy/src/setup.pxi"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_7) < 0) __PYX_ERR(0, 34, __pyx_L1_error)

#line 34 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/setup.pxi":35
 * import atexit
 * import warnings
 * from ._warnings import RootNumpyUnconvertibleWarning             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned char unsigned_char
 */

#line 35 "root_numpy/src/setup.pxi"
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 35, __pyx_L1_error)

#line 35 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_7);

#line 35 "root_numpy/src/setup.pxi"
  __Pyx_INCREF(__pyx_n_s_RootNumpyUnconvertibleWarning);

#line 35 "root_numpy/src/setup.pxi"
  __Pyx_GIVEREF(__pyx_n_s_RootNumpyUnconvertibleWarning);

#line 35 "root_numpy/src/setup.pxi"
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_RootNumpyUnconvertibleWarning);

#line 35 "root_numpy/src/setup.pxi"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_warnings_2, __pyx_t_7, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)

#line 35 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_1);

#line 35 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 35 "root_numpy/src/setup.pxi"
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_RootNumpyUnconvertibleWarning); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 35, __pyx_L1_error)

#line 35 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_7);

#line 35 "root_numpy/src/setup.pxi"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RootNumpyUnconvertibleWarning, __pyx_t_7) < 0) __PYX_ERR(0, 35, __pyx_L1_error)

#line 35 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 35 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":1
 * import re             # <<<<<<<<<<<<<<
 * 
 * # match leaf_name[length_leaf][N][M]... or leaf_name[N][M]...
 */

#line 1 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_re, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":4
 * 
 * # match leaf_name[length_leaf][N][M]... or leaf_name[N][M]...
 * LEAF_PATTERN = re.compile('^[^\[]+((?:\[[^\s\]]+\])(?:\[[0-9]+\])*)?$')             # <<<<<<<<<<<<<<
 * 
 * TYPES = {
 */

#line 4 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_compile); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 4 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 4 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LEAF_PATTERN, __pyx_t_1) < 0) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":7
 * 
 * TYPES = {
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),             # <<<<<<<<<<<<<<
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 */

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyStr_FromString(TypeName<bool> ().name); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_bool); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 7 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BOOL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_n_s_bool);

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_n_s_bool);

#line 7 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_bool);

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 7 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 7 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 7 "root_numpy/src/converters.pyx"
  __pyx_t_5 = 0;

#line 7 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 7 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/converters.pyx":8
 * TYPES = {
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 */

#line 8 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyStr_FromString(TypeName<char> ().name); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 8 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 8 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int8); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 8 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 8 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);

#line 8 "root_numpy/src/converters.pyx"
  __pyx_t_5 = 0;

#line 8 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 8 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT8); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 8 "root_numpy/src/converters.pyx"
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_n_s_char);

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_n_s_char);

#line 8 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_char);

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 8 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 8 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);

#line 8 "root_numpy/src/converters.pyx"
  __pyx_t_5 = 0;

#line 8 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 8 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_t_9) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 8 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "root_numpy/src/converters.pyx":9
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),             # <<<<<<<<<<<<<<
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT16),
 */

#line 9 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_char> ().name); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 9 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 9 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint8); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 9 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 9 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 9 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 9 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 9 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT8); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 9 "root_numpy/src/converters.pyx"
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_kp_s_unsigned_char);

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_char);

#line 9 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_unsigned_char);

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 9 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 9 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);

#line 9 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 9 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 9 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_t_5) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 9 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "root_numpy/src/converters.pyx":10
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT16),
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 */

#line 10 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyStr_FromString(TypeName<short> ().name); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 10, __pyx_L1_error)

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 10 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 10, __pyx_L1_error)

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 10 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int16); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 10, __pyx_L1_error)

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 10 "root_numpy/src/converters.pyx"
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 10, __pyx_L1_error)

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 10 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);

#line 10 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 10 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 10, __pyx_L1_error)

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 10 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT16); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 10, __pyx_L1_error)

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 10 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 10, __pyx_L1_error)

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_n_s_short);

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_n_s_short);

#line 10 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_short);

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 10 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 10 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);

#line 10 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 10 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 10 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_5, __pyx_t_7) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 10 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/converters.pyx":11
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT16),             # <<<<<<<<<<<<<<
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 */

#line 11 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_short> ().name); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 11, __pyx_L1_error)

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 11 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 11 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uint16); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 11, __pyx_L1_error)

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 11 "root_numpy/src/converters.pyx"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 11 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);

#line 11 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 11 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 11, __pyx_L1_error)

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 11 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT16); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 11 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 11, __pyx_L1_error)

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_kp_s_unsigned_short);

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_short);

#line 11 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_s_unsigned_short);

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 11 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 11 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);

#line 11 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 11 "root_numpy/src/converters.pyx"
  __pyx_t_5 = 0;

#line 11 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 11 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/converters.pyx":12
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT16),
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 */

#line 12 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyStr_FromString(TypeName<int> ().name); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 12 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 12 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 12 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 12 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);

#line 12 "root_numpy/src/converters.pyx"
  __pyx_t_5 = 0;

#line 12 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 12 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT32); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 12 "root_numpy/src/converters.pyx"
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_n_s_int);

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_n_s_int);

#line 12 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_int);

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 12 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 12 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);

#line 12 "root_numpy/src/converters.pyx"
  __pyx_t_5 = 0;

#line 12 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 12 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_t_9) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 12 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "root_numpy/src/converters.pyx":13
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT16),
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),             # <<<<<<<<<<<<<<
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 */

#line 13 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_int> ().name); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 13 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 13 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint32); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 13 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 13 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 13 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 13 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 13 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT32); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 13 "root_numpy/src/converters.pyx"
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_kp_s_unsigned_int);

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_int);

#line 13 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_unsigned_int);

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 13 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 13 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);

#line 13 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 13 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 13 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_t_5) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 13 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "root_numpy/src/converters.pyx":14
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 */

#line 14 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyStr_FromString(TypeName<long> ().name); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 14 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 14 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int64); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 14 "root_numpy/src/converters.pyx"
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 14 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);

#line 14 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 14 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 14 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT64); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 14 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_n_s_long);

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_n_s_long);

#line 14 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_long);

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 14 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 14 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);

#line 14 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 14 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 14 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_5, __pyx_t_7) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 14 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/converters.pyx":15
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),             # <<<<<<<<<<<<<<
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 */

#line 15 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_long> ().name); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 15 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 15 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uint64); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 15 "root_numpy/src/converters.pyx"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 15 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);

#line 15 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 15 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 15 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 15 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_kp_s_unsigned_long);

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_long);

#line 15 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_s_unsigned_long);

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 15 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 15 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);

#line 15 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 15 "root_numpy/src/converters.pyx"
  __pyx_t_5 = 0;

#line 15 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 15 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/converters.pyx":16
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),
 */

#line 16 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_long_long> ().name); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 16, __pyx_L1_error)

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 16 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 16, __pyx_L1_error)

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 16 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_longlong); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 16, __pyx_L1_error)

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 16 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 16, __pyx_L1_error)

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 16 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);

#line 16 "root_numpy/src/converters.pyx"
  __pyx_t_5 = 0;

#line 16 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 16, __pyx_L1_error)

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 16 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 16, __pyx_L1_error)

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 16 "root_numpy/src/converters.pyx"
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 16, __pyx_L1_error)

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_kp_s_long_long);

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_long_long);

#line 16 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_s_long_long);

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 16 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 16 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);

#line 16 "root_numpy/src/converters.pyx"
  __pyx_t_5 = 0;

#line 16 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 16 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_t_9) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 16 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "root_numpy/src/converters.pyx":17
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),             # <<<<<<<<<<<<<<
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),
 *     TypeName[double]().name:             ('double',             np.dtype(np.float64),   np.NPY_FLOAT64),
 */

#line 17 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_long_long> ().name); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 17 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 17 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_ulonglong); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 17 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 17 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 17 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 17 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 17 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 17 "root_numpy/src/converters.pyx"
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_kp_s_unsigned_long_long);

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_long_long);

#line 17 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_unsigned_long_long);

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 17 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 17 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);

#line 17 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 17 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 17 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_t_5) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 17 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "root_numpy/src/converters.pyx":18
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),             # <<<<<<<<<<<<<<
 *     TypeName[double]().name:             ('double',             np.dtype(np.float64),   np.NPY_FLOAT64),
 * }
 */

#line 18 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyStr_FromString(TypeName<float> ().name); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 18, __pyx_L1_error)

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 18 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 18, __pyx_L1_error)

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 18 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float32); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 18, __pyx_L1_error)

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 18 "root_numpy/src/converters.pyx"
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 18, __pyx_L1_error)

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 18 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);

#line 18 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 18 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 18, __pyx_L1_error)

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 18 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT32); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 18, __pyx_L1_error)

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 18 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 18, __pyx_L1_error)

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_n_s_float);

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_n_s_float);

#line 18 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_float);

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 18 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 18 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);

#line 18 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 18 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 18 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_5, __pyx_t_7) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 18 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/converters.pyx":19
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),
 *     TypeName[double]().name:             ('double',             np.dtype(np.float64),   np.NPY_FLOAT64),             # <<<<<<<<<<<<<<
 * }
 * 
 */

#line 19 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyStr_FromString(TypeName<double> ().name); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 19 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 19 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 19 "root_numpy/src/converters.pyx"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 19 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);

#line 19 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 19 "root_numpy/src/converters.pyx"
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 19 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 19 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_INCREF(__pyx_n_s_double);

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_n_s_double);

#line 19 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_double);

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 19 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 19 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);

#line 19 "root_numpy/src/converters.pyx"
  __pyx_t_9 = 0;

#line 19 "root_numpy/src/converters.pyx"
  __pyx_t_5 = 0;

#line 19 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) __PYX_ERR(1, 7, __pyx_L1_error)

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 19 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TYPES, __pyx_t_1) < 0) __PYX_ERR(1, 6, __pyx_L1_error)

#line 19 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":23
 * 
 * TYPES_NUMPY2ROOT = {
 *     np.dtype(np.bool):    (1, 'O'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int8):    (1, 'B'),
 *     np.dtype(np.int16):   (2, 'S'),
 */

#line 23 "root_numpy/src/converters.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 23, __pyx_L1_error)

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 23 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 23, __pyx_L1_error)

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 23 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_bool); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 23, __pyx_L1_error)

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 23 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 23, __pyx_L1_error)

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 23 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 23 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 23 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 23, __pyx_L1_error)

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 23 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__52) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 23 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/converters.pyx":24
 * TYPES_NUMPY2ROOT = {
 *     np.dtype(np.bool):    (1, 'O'),
 *     np.dtype(np.int8):    (1, 'B'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int16):   (2, 'S'),
 *     np.dtype(np.int32):   (4, 'I'),
 */

#line 24 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 24, __pyx_L1_error)

#line 24 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 24 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int8); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 24, __pyx_L1_error)

#line 24 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 24 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 24 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 24, __pyx_L1_error)

#line 24 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 24 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 24 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 24 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 24 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 24, __pyx_L1_error)

#line 24 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 24 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 24 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__53) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 24 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/converters.pyx":25
 *     np.dtype(np.bool):    (1, 'O'),
 *     np.dtype(np.int8):    (1, 'B'),
 *     np.dtype(np.int16):   (2, 'S'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int32):   (4, 'I'),
 *     np.dtype(np.int64):   (8, 'L'),
 */

#line 25 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 25, __pyx_L1_error)

#line 25 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 25 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int16); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 25, __pyx_L1_error)

#line 25 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 25 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 25 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 25, __pyx_L1_error)

#line 25 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 25 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 25 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 25 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 25 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 25, __pyx_L1_error)

#line 25 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 25 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 25 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__54) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 25 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/converters.pyx":26
 *     np.dtype(np.int8):    (1, 'B'),
 *     np.dtype(np.int16):   (2, 'S'),
 *     np.dtype(np.int32):   (4, 'I'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int64):   (8, 'L'),
 *     np.dtype(np.uint8):   (1, 'b'),
 */

#line 26 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 26, __pyx_L1_error)

#line 26 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 26 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 26, __pyx_L1_error)

#line 26 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 26 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 26 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 26, __pyx_L1_error)

#line 26 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 26 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 26 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 26 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 26 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 26, __pyx_L1_error)

#line 26 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 26 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 26 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__55) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 26 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/converters.pyx":27
 *     np.dtype(np.int16):   (2, 'S'),
 *     np.dtype(np.int32):   (4, 'I'),
 *     np.dtype(np.int64):   (8, 'L'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint8):   (1, 'b'),
 *     np.dtype(np.uint16):  (2, 's'),
 */

#line 27 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 27, __pyx_L1_error)

#line 27 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 27 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 27, __pyx_L1_error)

#line 27 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 27 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 27 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 27, __pyx_L1_error)

#line 27 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 27 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 27 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 27 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 27 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 27, __pyx_L1_error)

#line 27 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 27 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 27 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__56) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 27 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/converters.pyx":28
 *     np.dtype(np.int32):   (4, 'I'),
 *     np.dtype(np.int64):   (8, 'L'),
 *     np.dtype(np.uint8):   (1, 'b'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint16):  (2, 's'),
 *     np.dtype(np.uint32):  (4, 'i'),
 */

#line 28 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 28, __pyx_L1_error)

#line 28 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 28 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_uint8); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 28, __pyx_L1_error)

#line 28 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 28 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 28 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 28, __pyx_L1_error)

#line 28 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 28 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 28 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 28 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 28 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 28, __pyx_L1_error)

#line 28 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 28 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 28 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__57) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 28 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/converters.pyx":29
 *     np.dtype(np.int64):   (8, 'L'),
 *     np.dtype(np.uint8):   (1, 'b'),
 *     np.dtype(np.uint16):  (2, 's'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint32):  (4, 'i'),
 *     np.dtype(np.uint64):  (8, 'l'),
 */

#line 29 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 29, __pyx_L1_error)

#line 29 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 29 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint16); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 29, __pyx_L1_error)

#line 29 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 29 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 29 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 29, __pyx_L1_error)

#line 29 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 29 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 29 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 29 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 29 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 29, __pyx_L1_error)

#line 29 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 29 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 29 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__58) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 29 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/converters.pyx":30
 *     np.dtype(np.uint8):   (1, 'b'),
 *     np.dtype(np.uint16):  (2, 's'),
 *     np.dtype(np.uint32):  (4, 'i'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint64):  (8, 'l'),
 *     np.dtype(np.float):   (8, 'D'),
 */

#line 30 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 30, __pyx_L1_error)

#line 30 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 30 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_uint32); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 30, __pyx_L1_error)

#line 30 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 30 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 30 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 30, __pyx_L1_error)

#line 30 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 30 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 30 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 30 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 30 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 30, __pyx_L1_error)

#line 30 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 30 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 30 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__59) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 30 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/converters.pyx":31
 *     np.dtype(np.uint16):  (2, 's'),
 *     np.dtype(np.uint32):  (4, 'i'),
 *     np.dtype(np.uint64):  (8, 'l'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float):   (8, 'D'),
 *     np.dtype(np.float32): (4, 'F'),
 */

#line 31 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 31, __pyx_L1_error)

#line 31 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 31 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint64); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 31, __pyx_L1_error)

#line 31 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 31 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 31 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 31, __pyx_L1_error)

#line 31 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 31 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 31 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 31 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 31 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 31, __pyx_L1_error)

#line 31 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 31 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 31 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__60) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 31 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/converters.pyx":32
 *     np.dtype(np.uint32):  (4, 'i'),
 *     np.dtype(np.uint64):  (8, 'l'),
 *     np.dtype(np.float):   (8, 'D'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float32): (4, 'F'),
 *     np.dtype(np.float64): (8, 'D'),
 */

#line 32 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 32, __pyx_L1_error)

#line 32 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 32 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 32, __pyx_L1_error)

#line 32 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 32 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 32 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 32, __pyx_L1_error)

#line 32 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 32 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 32 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 32 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 32 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 32, __pyx_L1_error)

#line 32 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 32 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 32 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__61) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 32 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/converters.pyx":33
 *     np.dtype(np.uint64):  (8, 'l'),
 *     np.dtype(np.float):   (8, 'D'),
 *     np.dtype(np.float32): (4, 'F'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float64): (8, 'D'),
 * }
 */

#line 33 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 33, __pyx_L1_error)

#line 33 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 33 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float32); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 33, __pyx_L1_error)

#line 33 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 33 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 33 "root_numpy/src/converters.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 33, __pyx_L1_error)

#line 33 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 33 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 33 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 33 "root_numpy/src/converters.pyx"
  __pyx_t_7 = 0;

#line 33 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 33, __pyx_L1_error)

#line 33 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 33 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 33 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__62) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 33 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/converters.pyx":34
 *     np.dtype(np.float):   (8, 'D'),
 *     np.dtype(np.float32): (4, 'F'),
 *     np.dtype(np.float64): (8, 'D'),             # <<<<<<<<<<<<<<
 * }
 * 
 */

#line 34 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 34, __pyx_L1_error)

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 34 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 34, __pyx_L1_error)

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 34 "root_numpy/src/converters.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 34, __pyx_L1_error)

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 34 "root_numpy/src/converters.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 34 "root_numpy/src/converters.pyx"
  __pyx_t_8 = 0;

#line 34 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5numpy_dtype), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 34, __pyx_L1_error)

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 34 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__63) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 34 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TYPES_NUMPY2ROOT, __pyx_t_1) < 0) __PYX_ERR(1, 22, __pyx_L1_error)

#line 34 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":38
 * 
 * SPECIAL_TYPEDEFS = {
 *     'Long64_t': 'long long',             # <<<<<<<<<<<<<<
 *     'ULong64_t': 'unsigned long long',
 * }
 */

#line 38 "root_numpy/src/converters.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)

#line 38 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 38 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Long64_t, __pyx_kp_s_long_long) < 0) __PYX_ERR(1, 38, __pyx_L1_error)

#line 38 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ULong64_t, __pyx_kp_s_unsigned_long_long) < 0) __PYX_ERR(1, 38, __pyx_L1_error)

#line 38 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SPECIAL_TYPEDEFS, __pyx_t_1) < 0) __PYX_ERR(1, 37, __pyx_L1_error)

#line 38 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":379
 * 
 * # basic type converters
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():             # <<<<<<<<<<<<<<
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(
 */

#line 379 "root_numpy/src/converters.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 379 "root_numpy/src/converters.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_items); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 379 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 379 "root_numpy/src/converters.pyx"
  __pyx_t_8 = NULL;

#line 379 "root_numpy/src/converters.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {

#line 379 "root_numpy/src/converters.pyx"
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);

#line 379 "root_numpy/src/converters.pyx"
    if (likely(__pyx_t_8)) {

#line 379 "root_numpy/src/converters.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(function);

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_DECREF_SET(__pyx_t_7, function);

#line 379 "root_numpy/src/converters.pyx"
    }

#line 379 "root_numpy/src/converters.pyx"
  }

#line 379 "root_numpy/src/converters.pyx"
  if (__pyx_t_8) {

#line 379 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 379 "root_numpy/src/converters.pyx"
  } else {

#line 379 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
  }

#line 379 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 379 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 379 "root_numpy/src/converters.pyx"
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {

#line 379 "root_numpy/src/converters.pyx"
    __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7); __pyx_t_10 = 0;

#line 379 "root_numpy/src/converters.pyx"
    __pyx_t_11 = NULL;

#line 379 "root_numpy/src/converters.pyx"
  } else {
    __pyx_t_10 = -1; 
#line 379 "root_numpy/src/converters.pyx"
__pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 379 "root_numpy/src/converters.pyx"
    __pyx_t_11 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
  }

#line 379 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 379 "root_numpy/src/converters.pyx"
  for (;;) {

#line 379 "root_numpy/src/converters.pyx"
    if (likely(!__pyx_t_11)) {

#line 379 "root_numpy/src/converters.pyx"
      if (likely(PyList_CheckExact(__pyx_t_7))) {

#line 379 "root_numpy/src/converters.pyx"
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_7)) break;

#line 379 "root_numpy/src/converters.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
        #else

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 379 "root_numpy/src/converters.pyx"
        #endif

#line 379 "root_numpy/src/converters.pyx"
      } else {

#line 379 "root_numpy/src/converters.pyx"
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_7)) break;

#line 379 "root_numpy/src/converters.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
        #else

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 379 "root_numpy/src/converters.pyx"
        #endif

#line 379 "root_numpy/src/converters.pyx"
      }
    } else 
#line 379 "root_numpy/src/converters.pyx"
{

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_1 = __pyx_t_11(__pyx_t_7);

#line 379 "root_numpy/src/converters.pyx"
      if (unlikely(!__pyx_t_1)) {

#line 379 "root_numpy/src/converters.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 379 "root_numpy/src/converters.pyx"
        if (exc_type) {

#line 379 "root_numpy/src/converters.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 379 "root_numpy/src/converters.pyx"
          else __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
        }

#line 379 "root_numpy/src/converters.pyx"
        break;

#line 379 "root_numpy/src/converters.pyx"
      }

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 379 "root_numpy/src/converters.pyx"
    }

#line 379 "root_numpy/src/converters.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 379 "root_numpy/src/converters.pyx"
      PyObject* sequence = __pyx_t_1;

#line 379 "root_numpy/src/converters.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 379 "root_numpy/src/converters.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 379 "root_numpy/src/converters.pyx"
      #else

#line 379 "root_numpy/src/converters.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 379 "root_numpy/src/converters.pyx"
      #endif

#line 379 "root_numpy/src/converters.pyx"
      if (unlikely(size != 2)) {

#line 379 "root_numpy/src/converters.pyx"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 379 "root_numpy/src/converters.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 379 "root_numpy/src/converters.pyx"
        __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      }

#line 379 "root_numpy/src/converters.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 379 "root_numpy/src/converters.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 

#line 379 "root_numpy/src/converters.pyx"
      } else {

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 

#line 379 "root_numpy/src/converters.pyx"
      }

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 379 "root_numpy/src/converters.pyx"
      #else

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 379 "root_numpy/src/converters.pyx"
      #endif

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 379 "root_numpy/src/converters.pyx"
    } else {

#line 379 "root_numpy/src/converters.pyx"
      Py_ssize_t index = -1;

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_12 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_8 = __pyx_t_12(__pyx_t_9); if (unlikely(!__pyx_t_8)) 
#line 379 "root_numpy/src/converters.pyx"
goto __pyx_L14_unpacking_failed;

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_8);
      index = 1; __pyx_t_5 = __pyx_t_12(__pyx_t_9); if (unlikely(!__pyx_t_5)) 
#line 379 "root_numpy/src/converters.pyx"
goto __pyx_L14_unpacking_failed;

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 379 "root_numpy/src/converters.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_9), 2) < 0) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_12 = NULL;

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 379 "root_numpy/src/converters.pyx"
      goto __pyx_L15_unpacking_done;

#line 379 "root_numpy/src/converters.pyx"
      __pyx_L14_unpacking_failed:;

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_12 = NULL;

#line 379 "root_numpy/src/converters.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 379 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __pyx_L15_unpacking_done:;

#line 379 "root_numpy/src/converters.pyx"
    }

#line 379 "root_numpy/src/converters.pyx"
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypename, __pyx_t_8) < 0) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 379 "root_numpy/src/converters.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {

#line 379 "root_numpy/src/converters.pyx"
      PyObject* sequence = __pyx_t_5;

#line 379 "root_numpy/src/converters.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 379 "root_numpy/src/converters.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 379 "root_numpy/src/converters.pyx"
      #else

#line 379 "root_numpy/src/converters.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 379 "root_numpy/src/converters.pyx"
      #endif

#line 379 "root_numpy/src/converters.pyx"
      if (unlikely(size != 3)) {

#line 379 "root_numpy/src/converters.pyx"
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 379 "root_numpy/src/converters.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 379 "root_numpy/src/converters.pyx"
        __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      }

#line 379 "root_numpy/src/converters.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 379 "root_numpy/src/converters.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 2); 

#line 379 "root_numpy/src/converters.pyx"
      } else {

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 

#line 379 "root_numpy/src/converters.pyx"
        __pyx_t_14 = PyList_GET_ITEM(sequence, 2); 

#line 379 "root_numpy/src/converters.pyx"
      }

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_9);

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_13);

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_14);

#line 379 "root_numpy/src/converters.pyx"
      #else

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_13 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_14 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_14);

#line 379 "root_numpy/src/converters.pyx"
      #endif

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 379 "root_numpy/src/converters.pyx"
    } else {

#line 379 "root_numpy/src/converters.pyx"
      Py_ssize_t index = -1;

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_15 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_15);

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_12 = Py_TYPE(__pyx_t_15)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_9)) 
#line 379 "root_numpy/src/converters.pyx"
goto __pyx_L16_unpacking_failed;

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_13 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_13)) 
#line 379 "root_numpy/src/converters.pyx"
goto __pyx_L16_unpacking_failed;

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_13);
      index = 2; __pyx_t_14 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_14)) 
#line 379 "root_numpy/src/converters.pyx"
goto __pyx_L16_unpacking_failed;

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_GOTREF(__pyx_t_14);

#line 379 "root_numpy/src/converters.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_15), 3) < 0) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_12 = NULL;

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 379 "root_numpy/src/converters.pyx"
      goto __pyx_L17_unpacking_done;

#line 379 "root_numpy/src/converters.pyx"
      __pyx_L16_unpacking_failed:;

#line 379 "root_numpy/src/converters.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 379 "root_numpy/src/converters.pyx"
      __pyx_t_12 = NULL;

#line 379 "root_numpy/src/converters.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 379 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
      __pyx_L17_unpacking_done:;

#line 379 "root_numpy/src/converters.pyx"
    }

#line 379 "root_numpy/src/converters.pyx"
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctype, __pyx_t_9) < 0) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 379 "root_numpy/src/converters.pyx"
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_dtype, __pyx_t_13) < 0) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 379 "root_numpy/src/converters.pyx"
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_dtypecode, __pyx_t_14) < 0) __PYX_ERR(1, 379, __pyx_L1_error)

#line 379 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "root_numpy/src/converters.pyx":381
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(             # <<<<<<<<<<<<<<
 *             dtype.itemsize, dtype.name, dtypecode)))
 * 
 */

#line 381 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 381, __pyx_L1_error)

#line 381 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 381 "root_numpy/src/converters.pyx"
    __pyx_t_16 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 381, __pyx_L1_error)

#line 381 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "root_numpy/src/converters.pyx":382
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(
 *             dtype.itemsize, dtype.name, dtypecode)))             # <<<<<<<<<<<<<<
 * 
 * # vector<> converters
 */

#line 382 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 382, __pyx_L1_error)

#line 382 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 382 "root_numpy/src/converters.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 382, __pyx_L1_error)

#line 382 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 382 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 382 "root_numpy/src/converters.pyx"
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 382, __pyx_L1_error)

#line 382 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 382 "root_numpy/src/converters.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 382, __pyx_L1_error)

#line 382 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 382 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 382, __pyx_L1_error)

#line 382 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 382 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 382 "root_numpy/src/converters.pyx"
    __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 382, __pyx_L1_error)

#line 382 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 382 "root_numpy/src/converters.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_dtypecode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 382, __pyx_L1_error)

#line 382 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 382 "root_numpy/src/converters.pyx"
    __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 382, __pyx_L1_error)

#line 382 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "root_numpy/src/converters.pyx":380
 * # basic type converters
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():
 *     CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *         ctype, new BasicConverter(
 *             dtype.itemsize, dtype.name, dtypecode)))
 */

#line 380 "root_numpy/src/converters.pyx"
    try {

#line 380 "root_numpy/src/converters.pyx"
      __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_16, new __pyx_t_13_librootnumpy_BasicConverter(__pyx_t_6, __pyx_t_17, __pyx_t_18));

#line 380 "root_numpy/src/converters.pyx"
    } catch(...) {

#line 380 "root_numpy/src/converters.pyx"
      __Pyx_CppExn2PyErr();

#line 380 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 380, __pyx_L1_error)

#line 380 "root_numpy/src/converters.pyx"
    }

#line 380 "root_numpy/src/converters.pyx"
    try {

#line 380 "root_numpy/src/converters.pyx"
      __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 380 "root_numpy/src/converters.pyx"
    } catch(...) {

#line 380 "root_numpy/src/converters.pyx"
      __Pyx_CppExn2PyErr();

#line 380 "root_numpy/src/converters.pyx"
      __PYX_ERR(1, 380, __pyx_L1_error)

#line 380 "root_numpy/src/converters.pyx"
    }

    /* "root_numpy/src/converters.pyx":379
 * 
 * # basic type converters
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():             # <<<<<<<<<<<<<<
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(
 */

#line 379 "root_numpy/src/converters.pyx"
  }

#line 379 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/converters.pyx":386
 * # vector<> converters
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<bool>', new VectorBoolConverter()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<char>', new VectorConverter[char]()))
 */

#line 386 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_bool); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 386, __pyx_L1_error)

#line 386 "root_numpy/src/converters.pyx"
  try {

#line 386 "root_numpy/src/converters.pyx"
    __pyx_t_20 = new __pyx_t_13_librootnumpy_VectorBoolConverter();

#line 386 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 386 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 386 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 386, __pyx_L1_error)

#line 386 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":385
 * 
 * # vector<> converters
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<bool>', new VectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 385 "root_numpy/src/converters.pyx"
  try {

#line 385 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, __pyx_t_20);

#line 385 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 385 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 385 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 385, __pyx_L1_error)

#line 385 "root_numpy/src/converters.pyx"
  }

#line 385 "root_numpy/src/converters.pyx"
  try {

#line 385 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 385 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 385 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 385 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 385, __pyx_L1_error)

#line 385 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":388
 *     'vector<bool>', new VectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<char>', new VectorConverter[char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 */

#line 388 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_char); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 388, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":387
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<bool>', new VectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<char>', new VectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 387 "root_numpy/src/converters.pyx"
  try {

#line 387 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<char> ());

#line 387 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 387 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 387 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 387, __pyx_L1_error)

#line 387 "root_numpy/src/converters.pyx"
  }

#line 387 "root_numpy/src/converters.pyx"
  try {

#line 387 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 387 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 387 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 387 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 387, __pyx_L1_error)

#line 387 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":390
 *     'vector<char>', new VectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<short>', new VectorConverter[short]()))
 */

#line 390 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_unsigned_char); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 390, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":389
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<char>', new VectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 389 "root_numpy/src/converters.pyx"
  try {

#line 389 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_char> ());

#line 389 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 389 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 389 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 389, __pyx_L1_error)

#line 389 "root_numpy/src/converters.pyx"
  }

#line 389 "root_numpy/src/converters.pyx"
  try {

#line 389 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 389 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 389 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 389 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 389, __pyx_L1_error)

#line 389 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":392
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<short>', new VectorConverter[short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 */

#line 392 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_short); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 392, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":391
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<short>', new VectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 391 "root_numpy/src/converters.pyx"
  try {

#line 391 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<short> ());

#line 391 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 391 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 391 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 391, __pyx_L1_error)

#line 391 "root_numpy/src/converters.pyx"
  }

#line 391 "root_numpy/src/converters.pyx"
  try {

#line 391 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 391 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 391 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 391 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 391, __pyx_L1_error)

#line 391 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":394
 *     'vector<short>', new VectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<int>', new VectorConverter[int]()))
 */

#line 394 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_unsigned_short); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 394, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":393
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<short>', new VectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 393 "root_numpy/src/converters.pyx"
  try {

#line 393 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_short> ());

#line 393 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 393 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 393 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 393, __pyx_L1_error)

#line 393 "root_numpy/src/converters.pyx"
  }

#line 393 "root_numpy/src/converters.pyx"
  try {

#line 393 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 393 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 393 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 393 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 393, __pyx_L1_error)

#line 393 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":396
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<int>', new VectorConverter[int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 */

#line 396 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_int); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 396, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":395
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<int>', new VectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 395 "root_numpy/src/converters.pyx"
  try {

#line 395 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<int> ());

#line 395 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 395 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 395 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 395, __pyx_L1_error)

#line 395 "root_numpy/src/converters.pyx"
  }

#line 395 "root_numpy/src/converters.pyx"
  try {

#line 395 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 395 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 395 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 395 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 395, __pyx_L1_error)

#line 395 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":398
 *     'vector<int>', new VectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long>', new VectorConverter[long]()))
 */

#line 398 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_unsigned_int); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 398, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":397
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<int>', new VectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 397 "root_numpy/src/converters.pyx"
  try {

#line 397 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_int> ());

#line 397 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 397 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 397 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 397, __pyx_L1_error)

#line 397 "root_numpy/src/converters.pyx"
  }

#line 397 "root_numpy/src/converters.pyx"
  try {

#line 397 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 397 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 397 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 397 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 397, __pyx_L1_error)

#line 397 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":400
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long>', new VectorConverter[long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 */

#line 400 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_long); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 400, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":399
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<long>', new VectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 399 "root_numpy/src/converters.pyx"
  try {

#line 399 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<long> ());

#line 399 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 399 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 399 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 399, __pyx_L1_error)

#line 399 "root_numpy/src/converters.pyx"
  }

#line 399 "root_numpy/src/converters.pyx"
  try {

#line 399 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 399 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 399 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 399 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 399, __pyx_L1_error)

#line 399 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":402
 *     'vector<long>', new VectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long long>', new VectorConverter[long_long]()))
 */

#line 402 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_unsigned_long); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 402, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":401
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long>', new VectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 401 "root_numpy/src/converters.pyx"
  try {

#line 401 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_long> ());

#line 401 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 401 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 401 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 401, __pyx_L1_error)

#line 401 "root_numpy/src/converters.pyx"
  }

#line 401 "root_numpy/src/converters.pyx"
  try {

#line 401 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 401 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 401 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 401 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 401, __pyx_L1_error)

#line 401 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":404
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long long>', new VectorConverter[long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 */

#line 404 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_long_long); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 404, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":403
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<long long>', new VectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 403 "root_numpy/src/converters.pyx"
  try {

#line 403 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_long_long> ());

#line 403 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 403 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 403 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 403, __pyx_L1_error)

#line 403 "root_numpy/src/converters.pyx"
  }

#line 403 "root_numpy/src/converters.pyx"
  try {

#line 403 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 403 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 403 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 403 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 403, __pyx_L1_error)

#line 403 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":406
 *     'vector<long long>', new VectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<float>', new VectorConverter[float]()))
 */

#line 406 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_unsigned_long_long); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 406, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":405
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long long>', new VectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 405 "root_numpy/src/converters.pyx"
  try {

#line 405 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_long_long> ());

#line 405 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 405 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 405 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 405, __pyx_L1_error)

#line 405 "root_numpy/src/converters.pyx"
  }

#line 405 "root_numpy/src/converters.pyx"
  try {

#line 405 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 405 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 405 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 405 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 405, __pyx_L1_error)

#line 405 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":408
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<float>', new VectorConverter[float]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<double>', new VectorConverter[double]()))
 */

#line 408 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_float); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 408, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":407
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<float>', new VectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 407 "root_numpy/src/converters.pyx"
  try {

#line 407 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<float> ());

#line 407 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 407 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 407 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 407, __pyx_L1_error)

#line 407 "root_numpy/src/converters.pyx"
  }

#line 407 "root_numpy/src/converters.pyx"
  try {

#line 407 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 407 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 407 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 407 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 407, __pyx_L1_error)

#line 407 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":410
 *     'vector<float>', new VectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<double>', new VectorConverter[double]()))             # <<<<<<<<<<<<<<
 * 
 * # vector<vector<> > converters
 */

#line 410 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_double); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 410, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":409
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<float>', new VectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<double>', new VectorConverter[double]()))
 * 
 */

#line 409 "root_numpy/src/converters.pyx"
  try {

#line 409 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<double> ());

#line 409 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 409 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 409 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 409, __pyx_L1_error)

#line 409 "root_numpy/src/converters.pyx"
  }

#line 409 "root_numpy/src/converters.pyx"
  try {

#line 409 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 409 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 409 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 409 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 409, __pyx_L1_error)

#line 409 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":414
 * # vector<vector<> > converters
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<bool> >', new VectorVectorBoolConverter()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 */

#line 414 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_bool); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 414, __pyx_L1_error)

#line 414 "root_numpy/src/converters.pyx"
  try {

#line 414 "root_numpy/src/converters.pyx"
    __pyx_t_21 = new __pyx_t_13_librootnumpy_VectorVectorBoolConverter();

#line 414 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 414 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 414 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 414, __pyx_L1_error)

#line 414 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":413
 * 
 * # vector<vector<> > converters
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<bool> >', new VectorVectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 413 "root_numpy/src/converters.pyx"
  try {

#line 413 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, __pyx_t_21);

#line 413 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 413 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 413 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 413, __pyx_L1_error)

#line 413 "root_numpy/src/converters.pyx"
  }

#line 413 "root_numpy/src/converters.pyx"
  try {

#line 413 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 413 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 413 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 413 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 413, __pyx_L1_error)

#line 413 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":416
 *     'vector<vector<bool> >', new VectorVectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 */

#line 416 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_char); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 416, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":415
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<bool> >', new VectorVectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 415 "root_numpy/src/converters.pyx"
  try {

#line 415 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<char> ());

#line 415 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 415 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 415 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 415, __pyx_L1_error)

#line 415 "root_numpy/src/converters.pyx"
  }

#line 415 "root_numpy/src/converters.pyx"
  try {

#line 415 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 415 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 415 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 415 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 415, __pyx_L1_error)

#line 415 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":418
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 */

#line 418 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_unsigned_char); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 418, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":417
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 417 "root_numpy/src/converters.pyx"
  try {

#line 417 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_char> ());

#line 417 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 417 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 417 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 417, __pyx_L1_error)

#line 417 "root_numpy/src/converters.pyx"
  }

#line 417 "root_numpy/src/converters.pyx"
  try {

#line 417 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 417 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 417 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 417 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 417, __pyx_L1_error)

#line 417 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":420
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 */

#line 420 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_short); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 420, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":419
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 419 "root_numpy/src/converters.pyx"
  try {

#line 419 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<short> ());

#line 419 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 419 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 419 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 419, __pyx_L1_error)

#line 419 "root_numpy/src/converters.pyx"
  }

#line 419 "root_numpy/src/converters.pyx"
  try {

#line 419 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 419 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 419 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 419 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 419, __pyx_L1_error)

#line 419 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":422
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 */

#line 422 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_unsigned_short); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 422, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":421
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 421 "root_numpy/src/converters.pyx"
  try {

#line 421 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_short> ());

#line 421 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 421 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 421 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 421, __pyx_L1_error)

#line 421 "root_numpy/src/converters.pyx"
  }

#line 421 "root_numpy/src/converters.pyx"
  try {

#line 421 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 421 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 421 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 421 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 421, __pyx_L1_error)

#line 421 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":424
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 */

#line 424 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_int); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 424, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":423
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 423 "root_numpy/src/converters.pyx"
  try {

#line 423 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<int> ());

#line 423 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 423 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 423 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 423, __pyx_L1_error)

#line 423 "root_numpy/src/converters.pyx"
  }

#line 423 "root_numpy/src/converters.pyx"
  try {

#line 423 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 423 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 423 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 423 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 423, __pyx_L1_error)

#line 423 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":426
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 */

#line 426 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_unsigned_int); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 426, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":425
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 425 "root_numpy/src/converters.pyx"
  try {

#line 425 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_int> ());

#line 425 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 425 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 425 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 425, __pyx_L1_error)

#line 425 "root_numpy/src/converters.pyx"
  }

#line 425 "root_numpy/src/converters.pyx"
  try {

#line 425 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 425 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 425 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 425 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 425, __pyx_L1_error)

#line 425 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":428
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 */

#line 428 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_long); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 428, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":427
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 427 "root_numpy/src/converters.pyx"
  try {

#line 427 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<long> ());

#line 427 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 427 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 427 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 427, __pyx_L1_error)

#line 427 "root_numpy/src/converters.pyx"
  }

#line 427 "root_numpy/src/converters.pyx"
  try {

#line 427 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 427 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 427 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 427 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 427, __pyx_L1_error)

#line 427 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":430
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 */

#line 430 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_unsigned_long); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 430, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":429
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 429 "root_numpy/src/converters.pyx"
  try {

#line 429 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_long> ());

#line 429 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 429 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 429 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 429, __pyx_L1_error)

#line 429 "root_numpy/src/converters.pyx"
  }

#line 429 "root_numpy/src/converters.pyx"
  try {

#line 429 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 429 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 429 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 429 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 429, __pyx_L1_error)

#line 429 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":432
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 */

#line 432 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_long_long); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 432, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":431
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 431 "root_numpy/src/converters.pyx"
  try {

#line 431 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_long_long> ());

#line 431 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 431 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 431 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 431, __pyx_L1_error)

#line 431 "root_numpy/src/converters.pyx"
  }

#line 431 "root_numpy/src/converters.pyx"
  try {

#line 431 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 431 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 431 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 431 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 431, __pyx_L1_error)

#line 431 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":434
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 */

#line 434 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_unsigned_long_long); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 434, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":433
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 433 "root_numpy/src/converters.pyx"
  try {

#line 433 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_long_long> ());

#line 433 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 433 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 433 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 433, __pyx_L1_error)

#line 433 "root_numpy/src/converters.pyx"
  }

#line 433 "root_numpy/src/converters.pyx"
  try {

#line 433 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 433 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 433 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 433 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 433, __pyx_L1_error)

#line 433 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":436
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))
 */

#line 436 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_float); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 436, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":435
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 435 "root_numpy/src/converters.pyx"
  try {

#line 435 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<float> ());

#line 435 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 435 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 435 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 435, __pyx_L1_error)

#line 435 "root_numpy/src/converters.pyx"
  }

#line 435 "root_numpy/src/converters.pyx"
  try {

#line 435 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 435 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 435 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 435 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 435, __pyx_L1_error)

#line 435 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":438
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))             # <<<<<<<<<<<<<<
 * 
 * # string converters
 */

#line 438 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_double); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 438, __pyx_L1_error)

  /* "root_numpy/src/converters.pyx":437
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))
 * 
 */

#line 437 "root_numpy/src/converters.pyx"
  try {

#line 437 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<double> ());

#line 437 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 437 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 437 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 437, __pyx_L1_error)

#line 437 "root_numpy/src/converters.pyx"
  }

#line 437 "root_numpy/src/converters.pyx"
  try {

#line 437 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 437 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 437 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 437 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 437, __pyx_L1_error)

#line 437 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":442
 * # string converters
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'string', new StringConverter()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<string>', new VectorStringConverter()))
 */

#line 442 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_string); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 442, __pyx_L1_error)

#line 442 "root_numpy/src/converters.pyx"
  try {

#line 442 "root_numpy/src/converters.pyx"
    __pyx_t_22 = new __pyx_t_13_librootnumpy_StringConverter();

#line 442 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 442 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 442 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 442, __pyx_L1_error)

#line 442 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":441
 * 
 * # string converters
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'string', new StringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 441 "root_numpy/src/converters.pyx"
  try {

#line 441 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, __pyx_t_22);

#line 441 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 441 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 441 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 441, __pyx_L1_error)

#line 441 "root_numpy/src/converters.pyx"
  }

#line 441 "root_numpy/src/converters.pyx"
  try {

#line 441 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 441 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 441 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 441 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 441, __pyx_L1_error)

#line 441 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":444
 *     'string', new StringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<string>', new VectorStringConverter()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<string> >', new VectorVectorStringConverter()))
 */

#line 444 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_string); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 444, __pyx_L1_error)

#line 444 "root_numpy/src/converters.pyx"
  try {

#line 444 "root_numpy/src/converters.pyx"
    __pyx_t_23 = new __pyx_t_13_librootnumpy_VectorStringConverter();

#line 444 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 444 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 444 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 444, __pyx_L1_error)

#line 444 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":443
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'string', new StringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<string>', new VectorStringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 443 "root_numpy/src/converters.pyx"
  try {

#line 443 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, __pyx_t_23);

#line 443 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 443 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 443 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 443, __pyx_L1_error)

#line 443 "root_numpy/src/converters.pyx"
  }

#line 443 "root_numpy/src/converters.pyx"
  try {

#line 443 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 443 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 443 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 443 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 443, __pyx_L1_error)

#line 443 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":446
 *     'vector<string>', new VectorStringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<string> >', new VectorVectorStringConverter()))             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 446 "root_numpy/src/converters.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_vector_vector_string); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 446, __pyx_L1_error)

#line 446 "root_numpy/src/converters.pyx"
  try {

#line 446 "root_numpy/src/converters.pyx"
    __pyx_t_24 = new __pyx_t_13_librootnumpy_VectorVectorStringConverter();

#line 446 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 446 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 446 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 446, __pyx_L1_error)

#line 446 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":445
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<string>', new VectorStringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<string> >', new VectorVectorStringConverter()))
 * 
 */

#line 445 "root_numpy/src/converters.pyx"
  try {

#line 445 "root_numpy/src/converters.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, __pyx_t_24);

#line 445 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 445 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 445 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 445, __pyx_L1_error)

#line 445 "root_numpy/src/converters.pyx"
  }

#line 445 "root_numpy/src/converters.pyx"
  try {

#line 445 "root_numpy/src/converters.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

#line 445 "root_numpy/src/converters.pyx"
  } catch(...) {

#line 445 "root_numpy/src/converters.pyx"
    __Pyx_CppExn2PyErr();

#line 445 "root_numpy/src/converters.pyx"
    __PYX_ERR(1, 445, __pyx_L1_error)

#line 445 "root_numpy/src/converters.pyx"
  }

  /* "root_numpy/src/converters.pyx":531
 * 
 * 
 * @atexit.register             # <<<<<<<<<<<<<<
 * def cleanup():
 *     # Delete all converters when module is town down
 */

#line 531 "root_numpy/src/converters.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_atexit); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 531, __pyx_L1_error)

#line 531 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 531 "root_numpy/src/converters.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_register); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 531, __pyx_L1_error)

#line 531 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 531 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/converters.pyx":532
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # Delete all converters when module is town down
 *     it = CONVERTERS.begin()
 */

#line 532 "root_numpy/src/converters.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_1cleanup, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 532, __pyx_L1_error)

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 532 "root_numpy/src/converters.pyx"
  __pyx_t_8 = NULL;

#line 532 "root_numpy/src/converters.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 532 "root_numpy/src/converters.pyx"
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);

#line 532 "root_numpy/src/converters.pyx"
    if (likely(__pyx_t_8)) {

#line 532 "root_numpy/src/converters.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 532 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 532 "root_numpy/src/converters.pyx"
      __Pyx_INCREF(function);

#line 532 "root_numpy/src/converters.pyx"
      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 532 "root_numpy/src/converters.pyx"
    }

#line 532 "root_numpy/src/converters.pyx"
  }

#line 532 "root_numpy/src/converters.pyx"
  if (!__pyx_t_8) {

#line 532 "root_numpy/src/converters.pyx"
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 531, __pyx_L1_error)

#line 532 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 532 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 532 "root_numpy/src/converters.pyx"
  } else {

#line 532 "root_numpy/src/converters.pyx"
    __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 531, __pyx_L1_error)

#line 532 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_14);

#line 532 "root_numpy/src/converters.pyx"
    __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 532 "root_numpy/src/converters.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 532 "root_numpy/src/converters.pyx"
    PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_1);

#line 532 "root_numpy/src/converters.pyx"
    __pyx_t_1 = 0;

#line 532 "root_numpy/src/converters.pyx"
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 531, __pyx_L1_error)

#line 532 "root_numpy/src/converters.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 532 "root_numpy/src/converters.pyx"
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 532 "root_numpy/src/converters.pyx"
  }

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 532 "root_numpy/src/converters.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cleanup, __pyx_t_7) < 0) __PYX_ERR(1, 532, __pyx_L1_error)

#line 532 "root_numpy/src/converters.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":33
 * 
 * 
 * def list_objects(fname, types=None):             # <<<<<<<<<<<<<<
 *     cdef TClass* tclass
 *     # ROOT owns these pointers
 */

#line 33 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_3list_objects, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 33, __pyx_L1_error)

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 33 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_objects, __pyx_t_7) < 0) __PYX_ERR(2, 33, __pyx_L1_error)

#line 33 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":53
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     return list_objects(fname, types=['TTree'])
 * 
 */

#line 53 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_5list_trees, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 53, __pyx_L1_error)

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 53 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_trees, __pyx_t_7) < 0) __PYX_ERR(2, 53, __pyx_L1_error)

#line 53 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":57
 * 
 * 
 * def list_directories(fname):             # <<<<<<<<<<<<<<
 *     return list_objects(fname, types=['TDirectoryFile'])
 * 
 */

#line 57 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_7list_directories, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 57, __pyx_L1_error)

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 57 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_directories, __pyx_t_7) < 0) __PYX_ERR(2, 57, __pyx_L1_error)

#line 57 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":61
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree == None:
 *         # automatically select single tree
 */

#line 61 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_9list_structures, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 61, __pyx_L1_error)

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 61 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_structures, __pyx_t_7) < 0) __PYX_ERR(2, 61, __pyx_L1_error)

#line 61 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":80
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list(list_structures(fname, tree).keys())
 * 
 */

#line 80 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_11list_branches, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 80, __pyx_L1_error)

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 80 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_branches, __pyx_t_7) < 0) __PYX_ERR(2, 80, __pyx_L1_error)

#line 80 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":441
 * 
 * 
 * def root2array_fromfile(fnames, string treename, branches,             # <<<<<<<<<<<<<<
 *                         selection, start, stop, step,
 *                         bool include_weight, string weight_name,
 */

#line 441 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_13root2array_fromfile, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 441, __pyx_L1_error)

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 441 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_root2array_fromfile, __pyx_t_7) < 0) __PYX_ERR(2, 441, __pyx_L1_error)

#line 441 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":479
 * 
 * 
 * def root2array_fromtree(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         bool include_weight, string weight_name,
 */

#line 479 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_15root2array_fromtree, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 479, __pyx_L1_error)

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 479 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_root2array_fromtree, __pyx_t_7) < 0) __PYX_ERR(2, 479, __pyx_L1_error)

#line 479 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":490
 * 
 * 
 * cdef TTree* array2tree(np.ndarray arr, string name='tree', TTree* tree=NULL) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[NP2ROOTConverter*] converters
 *     cdef NP2ROOTConverter* cvt
 */

#line 490 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_tree); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 490, __pyx_L1_error)

#line 490 "root_numpy/src/tree.pyx"
  __pyx_k__38 = __pyx_t_17;

  /* "root_numpy/src/tree.pyx":546
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */

#line 546 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_17array2tree_toCObj, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 546, __pyx_L1_error)

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 546 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array2tree_toCObj, __pyx_t_7) < 0) __PYX_ERR(2, 546, __pyx_L1_error)

#line 546 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":555
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* rfile = Open(filename, mode)
 *     if rfile == NULL:
 */

#line 555 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_19array2root, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 555, __pyx_L1_error)

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 555 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array2root, __pyx_t_7) < 0) __PYX_ERR(2, 555, __pyx_L1_error)

#line 555 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":10
 * 
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */

#line 10 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_21array_d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 10, __pyx_L1_error)

#line 10 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 10 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_d, __pyx_t_7) < 0) __PYX_ERR(3, 10, __pyx_L1_error)

#line 10 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":15
 * 
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */

#line 15 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_23array_f, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 15, __pyx_L1_error)

#line 15 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 15 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_f, __pyx_t_7) < 0) __PYX_ERR(3, 15, __pyx_L1_error)

#line 15 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":20
 * 
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */

#line 20 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_25array_l, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 20, __pyx_L1_error)

#line 20 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 20 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_l, __pyx_t_7) < 0) __PYX_ERR(3, 20, __pyx_L1_error)

#line 20 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":25
 * 
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */

#line 25 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_27array_i, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 25, __pyx_L1_error)

#line 25 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 25 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_i, __pyx_t_7) < 0) __PYX_ERR(3, 25, __pyx_L1_error)

#line 25 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":30
 * 
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */

#line 30 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_29array_s, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 30, __pyx_L1_error)

#line 30 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 30 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_s, __pyx_t_7) < 0) __PYX_ERR(3, 30, __pyx_L1_error)

#line 30 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":35
 * 
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 35 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_31array_c, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 35, __pyx_L1_error)

#line 35 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 35 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_c, __pyx_t_7) < 0) __PYX_ERR(3, 35, __pyx_L1_error)

#line 35 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":40
 * 
 * 
 * def array_h1c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 40 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_33array_h1c, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 40, __pyx_L1_error)

#line 40 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 40 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_h1c, __pyx_t_7) < 0) __PYX_ERR(3, 40, __pyx_L1_error)

#line 40 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":46
 * 
 * 
 * def array_h2c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 46 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_35array_h2c, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 46, __pyx_L1_error)

#line 46 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 46 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_h2c, __pyx_t_7) < 0) __PYX_ERR(3, 46, __pyx_L1_error)

#line 46 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":52
 * 
 * 
 * def array_h3c(root_hist):             # <<<<<<<<<<<<<<
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 52 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_37array_h3c, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 52, __pyx_L1_error)

#line 52 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 52 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_h3c, __pyx_t_7) < 0) __PYX_ERR(3, 52, __pyx_L1_error)

#line 52 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":62
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1D* _hist = <TH1D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 62 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_39h1d_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 62, __pyx_L1_error)

#line 62 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 62 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h1d_array, __pyx_t_7) < 0) __PYX_ERR(3, 62, __pyx_L1_error)

#line 62 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":70
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2D* _hist = <TH2D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 70 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_41h2d_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 70, __pyx_L1_error)

#line 70 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 70 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h2d_array, __pyx_t_7) < 0) __PYX_ERR(3, 70, __pyx_L1_error)

#line 70 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":78
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3d_array(root_hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3D* _hist = <TH3D*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayD* _arr = dynamic_cast["TArrayD*"](_hist)
 */

#line 78 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_43h3d_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 78, __pyx_L1_error)

#line 78 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 78 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h3d_array, __pyx_t_7) < 0) __PYX_ERR(3, 78, __pyx_L1_error)

#line 78 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":86
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1F* _hist = <TH1F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 86 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_45h1f_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 86, __pyx_L1_error)

#line 86 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 86 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h1f_array, __pyx_t_7) < 0) __PYX_ERR(3, 86, __pyx_L1_error)

#line 86 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2F* _hist = <TH2F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 94 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_47h2f_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 94, __pyx_L1_error)

#line 94 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 94 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h2f_array, __pyx_t_7) < 0) __PYX_ERR(3, 94, __pyx_L1_error)

#line 94 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":102
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3f_array(root_hist, np.ndarray[np.float32_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3F* _hist = <TH3F*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayF* _arr = dynamic_cast["TArrayF*"](_hist)
 */

#line 102 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_49h3f_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 102, __pyx_L1_error)

#line 102 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 102 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h3f_array, __pyx_t_7) < 0) __PYX_ERR(3, 102, __pyx_L1_error)

#line 102 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":110
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1I* _hist = <TH1I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 110 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_51h1i_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 110, __pyx_L1_error)

#line 110 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 110 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h1i_array, __pyx_t_7) < 0) __PYX_ERR(3, 110, __pyx_L1_error)

#line 110 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":118
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2I* _hist = <TH2I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 118 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_53h2i_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 118 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h2i_array, __pyx_t_7) < 0) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":126
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3i_array(root_hist, np.ndarray[int, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3I* _hist = <TH3I*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayI* _arr = dynamic_cast["TArrayI*"](_hist)
 */

#line 126 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_55h3i_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 126, __pyx_L1_error)

#line 126 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 126 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h3i_array, __pyx_t_7) < 0) __PYX_ERR(3, 126, __pyx_L1_error)

#line 126 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":134
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1S* _hist = <TH1S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 134 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_57h1s_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 134, __pyx_L1_error)

#line 134 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 134 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h1s_array, __pyx_t_7) < 0) __PYX_ERR(3, 134, __pyx_L1_error)

#line 134 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":142
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2S* _hist = <TH2S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 142 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_59h2s_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 142, __pyx_L1_error)

#line 142 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 142 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h2s_array, __pyx_t_7) < 0) __PYX_ERR(3, 142, __pyx_L1_error)

#line 142 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":150
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3s_array(root_hist, np.ndarray[short, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3S* _hist = <TH3S*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayS* _arr = dynamic_cast["TArrayS*"](_hist)
 */

#line 150 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_61h3s_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 150, __pyx_L1_error)

#line 150 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 150 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h3s_array, __pyx_t_7) < 0) __PYX_ERR(3, 150, __pyx_L1_error)

#line 150 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":158
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h1c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH1C* _hist = <TH1C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 158 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_63h1c_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 158, __pyx_L1_error)

#line 158 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 158 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h1c_array, __pyx_t_7) < 0) __PYX_ERR(3, 158, __pyx_L1_error)

#line 158 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":166
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h2c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH2C* _hist = <TH2C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 166 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_65h2c_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 166, __pyx_L1_error)

#line 166 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 166 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h2c_array, __pyx_t_7) < 0) __PYX_ERR(3, 166, __pyx_L1_error)

#line 166 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":174
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def h3c_array(root_hist, np.ndarray[np.int8_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     cdef TH3C* _hist = <TH3C*> PyCObject_AsVoidPtr(root_hist)
 *     cdef TArrayC* _arr = dynamic_cast["TArrayC*"](_hist)
 */

#line 174 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_67h3c_array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 174, __pyx_L1_error)

#line 174 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 174 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h3c_array, __pyx_t_7) < 0) __PYX_ERR(3, 174, __pyx_L1_error)

#line 174 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/matrix.pyx":6
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_69matrix_d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 6, __pyx_L1_error)

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 6 "root_numpy/src/matrix.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matrix_d, __pyx_t_7) < 0) __PYX_ERR(4, 6, __pyx_L1_error)

#line 6 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/matrix.pyx":19
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */

#line 19 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_71matrix_f, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 19, __pyx_L1_error)

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 19 "root_numpy/src/matrix.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matrix_f, __pyx_t_7) < 0) __PYX_ERR(4, 19, __pyx_L1_error)

#line 19 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":6
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f1(f1, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef SIZE_t i
 */

#line 6 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_73sample_f1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 6, __pyx_L1_error)

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 6 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_f1, __pyx_t_7) < 0) __PYX_ERR(5, 6, __pyx_L1_error)

#line 6 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":17
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h1(h1, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef SIZE_t i
 */

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_75sample_h1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 17, __pyx_L1_error)

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 17 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_h1, __pyx_t_7) < 0) __PYX_ERR(5, 17, __pyx_L1_error)

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":28
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f2(f2, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef SIZE_t i
 */

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_77sample_f2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 28, __pyx_L1_error)

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 28 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_f2, __pyx_t_7) < 0) __PYX_ERR(5, 28, __pyx_L1_error)

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":43
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h2(h2, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef SIZE_t i
 */

#line 43 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_79sample_h2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 43, __pyx_L1_error)

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 43 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_h2, __pyx_t_7) < 0) __PYX_ERR(5, 43, __pyx_L1_error)

#line 43 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":58
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_f3(f3, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef SIZE_t i
 */

#line 58 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_81sample_f3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 58, __pyx_L1_error)

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 58 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_f3, __pyx_t_7) < 0) __PYX_ERR(5, 58, __pyx_L1_error)

#line 58 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":75
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def sample_h3(h3, SIZE_t n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef SIZE_t i
 */

#line 75 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_83sample_h3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 75, __pyx_L1_error)

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 75 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_h3, __pyx_t_7) < 0) __PYX_ERR(5, 75, __pyx_L1_error)

#line 75 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 3 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_85fill_h1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 3, __pyx_L1_error)

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 3 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_h1, __pyx_t_7) < 0) __PYX_ERR(6, 3, __pyx_L1_error)

#line 3 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":31
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 31 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_87fill_h2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 31, __pyx_L1_error)

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 31 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_h2, __pyx_t_7) < 0) __PYX_ERR(6, 31, __pyx_L1_error)

#line 31 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":59
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 59 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_89fill_h3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 59, __pyx_L1_error)

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 59 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_h3, __pyx_t_7) < 0) __PYX_ERR(6, 59, __pyx_L1_error)

#line 59 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":87
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p1(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 87 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_91fill_p1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 87, __pyx_L1_error)

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 87 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_p1, __pyx_t_7) < 0) __PYX_ERR(6, 87, __pyx_L1_error)

#line 87 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":115
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p2(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 115 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_93fill_p2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 115, __pyx_L1_error)

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 115 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_p2, __pyx_t_7) < 0) __PYX_ERR(6, 115, __pyx_L1_error)

#line 115 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":143
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_p3(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 143 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_95fill_p3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 143, __pyx_L1_error)

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 143 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_p3, __pyx_t_7) < 0) __PYX_ERR(6, 143, __pyx_L1_error)

#line 143 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":171
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def thn2array(hist, shape, dtype):             # <<<<<<<<<<<<<<
 *     cdef THnBase* _hist = <THnBase*> PyCObject_AsVoidPtr(hist)
 *     cdef double content
 */

#line 171 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_97thn2array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 171, __pyx_L1_error)

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 171 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_thn2array, __pyx_t_7) < 0) __PYX_ERR(6, 171, __pyx_L1_error)

#line 171 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":185
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def thnsparse2array(hist, shape, dtype):             # <<<<<<<<<<<<<<
 *     cdef THnBase* _hist = <THnBase*> PyCObject_AsVoidPtr(hist)
 *     cdef double content
 */

#line 185 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_99thnsparse2array, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 185, __pyx_L1_error)

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 185 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_thnsparse2array, __pyx_t_7) < 0) __PYX_ERR(6, 185, __pyx_L1_error)

#line 185 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/graph.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 3 "root_numpy/src/graph.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_101fill_g1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 3, __pyx_L1_error)

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 3 "root_numpy/src/graph.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_g1, __pyx_t_7) < 0) __PYX_ERR(7, 3, __pyx_L1_error)

#line 3 "root_numpy/src/graph.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/graph.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 16 "root_numpy/src/graph.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_103fill_g2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 16, __pyx_L1_error)

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 16 "root_numpy/src/graph.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_g2, __pyx_t_7) < 0) __PYX_ERR(7, 16, __pyx_L1_error)

#line 16 "root_numpy/src/graph.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":3
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h1(hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_105evaluate_h1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 3, __pyx_L1_error)

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 3 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_h1, __pyx_t_7) < 0) __PYX_ERR(8, 3, __pyx_L1_error)

#line 3 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":16
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h2(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_107evaluate_h2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 16, __pyx_L1_error)

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 16 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_h2, __pyx_t_7) < 0) __PYX_ERR(8, 16, __pyx_L1_error)

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":29
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_h3(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_109evaluate_h3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 29, __pyx_L1_error)

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 29 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_h3, __pyx_t_7) < 0) __PYX_ERR(8, 29, __pyx_L1_error)

#line 29 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":42
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f1(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 */

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_111evaluate_f1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 42, __pyx_L1_error)

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 42 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_f1, __pyx_t_7) < 0) __PYX_ERR(8, 42, __pyx_L1_error)

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":55
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f2(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 */

#line 55 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_113evaluate_f2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 55, __pyx_L1_error)

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 55 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_f2, __pyx_t_7) < 0) __PYX_ERR(8, 55, __pyx_L1_error)

#line 55 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":68
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_f3(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 */

#line 68 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_115evaluate_f3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 68, __pyx_L1_error)

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 68 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_f3, __pyx_t_7) < 0) __PYX_ERR(8, 68, __pyx_L1_error)

#line 68 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":81
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_1d(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_117evaluate_formula_1d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 81, __pyx_L1_error)

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 81 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_formula_1d, __pyx_t_7) < 0) __PYX_ERR(8, 81, __pyx_L1_error)

#line 81 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":94
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_2d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 94 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_119evaluate_formula_2d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 94, __pyx_L1_error)

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 94 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_formula_2d, __pyx_t_7) < 0) __PYX_ERR(8, 94, __pyx_L1_error)

#line 94 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":107
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_3d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 107 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_121evaluate_formula_3d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 107, __pyx_L1_error)

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 107 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_formula_3d, __pyx_t_7) < 0) __PYX_ERR(8, 107, __pyx_L1_error)

#line 107 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":120
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_formula_4d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 120 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_123evaluate_formula_4d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 120, __pyx_L1_error)

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 120 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_formula_4d, __pyx_t_7) < 0) __PYX_ERR(8, 120, __pyx_L1_error)

#line 120 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":133
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_graph(graph, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 */

#line 133 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_125evaluate_graph, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 133, __pyx_L1_error)

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 133 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_graph, __pyx_t_7) < 0) __PYX_ERR(8, 133, __pyx_L1_error)

#line 133 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":146
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_spline(spline, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 */

#line 146 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_127evaluate_spline, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 146, __pyx_L1_error)

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 146 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_spline, __pyx_t_7) < 0) __PYX_ERR(8, 146, __pyx_L1_error)

#line 146 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/innerjoin.pyx":1
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */

#line 1 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 1, __pyx_L1_error)

#line 1 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 1 "root_numpy/src/innerjoin.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_7) < 0) __PYX_ERR(9, 1, __pyx_L1_error)

#line 1 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "_librootnumpy.pyx":1
 * # cython: experimental_cpp_class_def=True, c_string_type=str, c_string_encoding=ascii             # <<<<<<<<<<<<<<
 * 
 * include "setup.pxi"
 */

#line 1 "_librootnumpy.pyx"
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(13, 1, __pyx_L1_error)

#line 1 "_librootnumpy.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 1 "_librootnumpy.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_7) < 0) __PYX_ERR(13, 1, __pyx_L1_error)

#line 1 "_librootnumpy.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

#line 55 "string.to_py"


#line 55 "string.to_py"
  /*--- Wrapped vars code ---*/

#line 55 "string.to_py"


#line 55 "string.to_py"
  goto __pyx_L0;

#line 55 "string.to_py"
  __pyx_L1_error:;

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_5);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_7);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_8);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_9);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_13);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_14);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_15);

#line 55 "string.to_py"
  if (__pyx_m) {

#line 55 "string.to_py"
    if (__pyx_d) {

#line 55 "string.to_py"
      __Pyx_AddTraceback("init _librootnumpy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 55 "string.to_py"
    }

#line 55 "string.to_py"
    Py_DECREF(__pyx_m); __pyx_m = 0;

#line 55 "string.to_py"
  } else if (!PyErr_Occurred()) {

#line 55 "string.to_py"
    PyErr_SetString(PyExc_ImportError, "init _librootnumpy");

#line 55 "string.to_py"
  }

#line 55 "string.to_py"
  __pyx_L0:;

#line 55 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 55 "string.to_py"
  #if PY_MAJOR_VERSION < 3

#line 55 "string.to_py"
  return;

#line 55 "string.to_py"
  #else

#line 55 "string.to_py"
  return __pyx_m;

#line 55 "string.to_py"
  #endif

#line 55 "string.to_py"
}

#line 1 "cython_utility"

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyErrFetchRestore */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* SetItemInt */
  static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
      static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyIntBinop */
        #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* SliceObject */
        static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* RaiseTooManyValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
        static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
        static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* BytesEquals */
        static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
        static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObjectCallMethod1 */
        static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

/* append */
        static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* RaiseDoubleKeywords */
        static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
        static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
        static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* StringJoin */
        #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* PyObjectCallNoArg */
        #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseNoneIterError */
          static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* pyobject_as_double */
          static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if CYTHON_COMPILING_IN_PYPY
    float_value = PyNumber_Float(obj);  if (0) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* None */
          static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyIntBinop */
          #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* SaveResetException */
          #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
          #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
          #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
            #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* ArgTypeTest */
            static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* BufferFormatCheck */
            static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

/* BufferFallbackError */
              static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* BufferIndexError */
              static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* Import */
              static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
              static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CodeObjectCache */
              static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
              #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) { __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


              /* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
              #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* None */
              #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* None */
              #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* None */
              #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* None */
              #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
              static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (Py_intptr_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (Py_intptr_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(Py_intptr_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, long, PyLong_AsLong(x))
            } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            Py_intptr_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (Py_intptr_t) -1;
        }
    } else {
        Py_intptr_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (Py_intptr_t) -1;
        val = __Pyx_PyInt_As_Py_intptr_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to Py_intptr_t");
    return (Py_intptr_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to Py_intptr_t");
    return (Py_intptr_t) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 2 * PyLong_SHIFT) {
                            return (unsigned long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 3 * PyLong_SHIFT) {
                            return (unsigned long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 4 * PyLong_SHIFT) {
                            return (unsigned long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) ((((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned long");
    return (unsigned long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned long");
    return (unsigned long) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, long, PyLong_AsLong(x))
            } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (PY_LONG_LONG) -1;
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
}

/* CheckBinaryVersion */
              static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
              #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
              #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
              static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
